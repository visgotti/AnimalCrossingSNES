!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.NEGATIVE_NUMBER=1073741824]="NEGATIVE_NUMBER",e[e.IMAGE_AND_STRING_SEPERATOR=1118481]="IMAGE_AND_STRING_SEPERATOR",e[e.EMPTY_SECTION_FLAG=1118482]="EMPTY_SECTION_FLAG",e[e.BLOB_SEPARATOR=1118483]="BLOB_SEPARATOR",e[e.CHUNK_SEPERATOR=1118484]="CHUNK_SEPERATOR",e[e.TILE_=1118485]="TILE_"}(t.RESERVED_FLAGS||(t.RESERVED_FLAGS={})),t.RUNTIME_TILE_LAYER_SECTION_SIZE=128,t.EDITOR_TILE_LAYER_SECTION_SIZE=256,function(e){e.RECT="rects",e.POLYGON="polygons",e.POINT="points"}(t.ColliderShape||(t.ColliderShape={}));t.ObjectType=class{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.MASSIVE=0]="MASSIVE",e[e.LARGE=1]="LARGE",e[e.MEDIUM=2]="MEDIUM",e[e.SMALL=3]="SMALL"}(t.MapSizes||(t.MapSizes={})),function(e){e[e.RECT=0]="RECT",e[e.POLYGON=1]="POLYGON",e[e.POINT=2]="POINT",e[e.CIRCLE=3]="CIRCLE",e[e.LINE=4]="LINE",e[e.ELIPSE=5]="ELIPSE"}(t.RuntimeColliderShape||(t.RuntimeColliderShape={})),function(e){e[e.SMALL=0]="SMALL",e[e.MEDIUM=1]="MEDIUM",e[e.LARGE=2]="LARGE"}(t.MapSize||(t.MapSize={}))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1);function s(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}function i(e){return r(this,void 0,void 0,(function*(){const t=window.URL||window.webkitURL;let n,r=!0;try{n=t.createObjectURL(e)}catch(t){r=!1;const o=s(e);n="data:image/png;base64,"+o}const o=new Image;return new Promise((e,s)=>{o.src=n,o.addEventListener("load",s=>(r&&t.revokeObjectURL(n),e(new PIXI.Texture(new PIXI.BaseTexture(o)))))})}))}function a(e){let t=e.split(","),n=t[0].match(/:(.*?);/)[1],r=atob(t[1]),o=r.length,s=new Uint8Array(o);for(;o--;)s[o]=r.charCodeAt(o);return new Blob([s],{type:n})}t.httpGetAsync=function(e,t=!0){return r(this,void 0,void 0,(function*(){const n=new XMLHttpRequest;return t||(n.responseType="arraybuffer"),n.open("GET",e,!0),n.send(null),new Promise((e,r)=>{n.onreadystatechange=()=>{if(4==n.readyState){if(200==n.status)return e(t?JSON.parse(n.responseText):n.response);try{return r(t?JSON.parse(n.responseText):n.response)}catch(e){return console.error("Error parsing http error response",n),r(e)}}}})}))},t.resolveMapSize=function(e,t){return e<=1028&&t<=1028?o.MapSize.SMALL:o.MapSize.LARGE},t.bufferToBase64=s,t.getTextureFromBlob=i,t.getTextureFromDataUrl=function(e){return r(this,void 0,void 0,(function*(){window.URL||window.webkitURL;const t=new Image;return new Promise((n,r)=>{t.src=e,t.addEventListener("load",e=>n(new PIXI.Texture(new PIXI.BaseTexture(t))))})}))},t.dataUrlToTexture=function(e){return r(this,void 0,void 0,(function*(){return i(a(e))}))},t.dataURLtoBlob=a,t.rotateColliders=function(e,t){},t.removeFileExtension=function(e){return e.replace(/\.[^/.]+$/,"")},t.indexedDB_enabled=function(){return!!(window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB)},t.resolveMaxTextureSize=function(e){if(1==e.type){const t=e.gl.MAX_TEXTURE_SIZE;let n;return n=t>=4096?t-t%4096:t>=2048?t-t%2048:t>=1024?t-t%1024:t>=512?t-t%512:256,n}return 2048},t.computedSectionLength=function(e,t,n){let r,o=1;if(e<t)r=e;else{for(o=2;e/o>t;)o*=2;r=e/o}let s=n-r%n;return{mainLength:r+s,offsetLength:Math.abs(r-s*(o-1))}},t.mergeOptions=function(e,t,n=[]){const r=t;for(let t in r)e[t]&&(r[t]=e[t]);const o=[],s=[],i=[];for(let e=0;e<n.length;e++){const t=n[e];t in r||o.push(t),null===r[t]&&i.push(t),void 0===r[t]&&s.push(t)}let a="";if(a=o.length?a.concat("Missing param found for required params:"+o.join(", ")):a,a=i.length?a.concat("null param found for required params:"+i.join(", ")):a,a=o.length?a.concat("undefined param found for required params:"+s.join(", ")):a,a)throw a;return r}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4),s=self;class i extends Worker{constructor(){super("")}}t.default=i;const a=n(7),u=n(2),d=n(8),c=n(9),l=n(0);let h,f,E;const p={};let S,g,_,A=[];function y(e,t,n,s,i){return r(this,void 0,void 0,(function*(){f=t,E=e;for(let e=0;e<n.length;e+=2)A.push({width:n[e],height:n[e+1]});return h=new o.Decoder(A,s,i),S=new a.Loader(`__ty__${E}`),yield S.initialize(),d.ResultCodes.SUCCESS}))}function m(e,t){return r(this,void 0,void 0,(function*(){for(let n=0;n<t.length;n++){const r=t[n],o=`${f}/${e}/s_${r}`,s=yield u.httpGetAsync(o,!1);return yield S.saveArrayBuffer(o,s),d.ResultCodes.SUCCESS}}))}function R(e,t){return r(this,void 0,void 0,(function*(){const n=`${f}/${e}/s_${t}`,r=yield u.httpGetAsync(n,!1);return yield S.saveArrayBuffer(n,r),d.ResultCodes.SUCCESS}))}s.onmessage=e=>r(void 0,void 0,void 0,(function*(){const t=e.data[2],n=e.data[1],o=e.data[0];if(n===d.Messages.REQUEST_AND_SAVE_ALL_MAP_CHUNKS){const e=yield function(e){return r(this,void 0,void 0,(function*(){try{const t=c.mapFileKey(f,e),n=yield u.httpGetAsync(t,!1),{buffers:r,metaData:o}=h.getCompressedChunksFromMap(1024,1024,n),s=[];for(let t=0;t<r.length;t++){const n=c.mapFileKey(f,e,t);s.push(S.saveArrayBuffer(n,r[t]))}return yield Promise.all(s),JSON.stringify(o)}catch(e){return console.error(e),d.ResultCodes.ERROR}}))}(o);s.postMessage([e,t])}else if(n===d.Messages.GET_SECTION_DATA){const e=yield function(e){return r(this,void 0,void 0,(function*(){if(!g)throw new Error("no cur map.");if(p[e])return p[e].ts=Date.now(),p[e].string;const t=`${f}/${_}/s_${e}`,n=yield S.loadArrayBuffer(t);return JSON.stringify(yield h.decodeChunk(e,g.mapW,g.mapH,1024,1024,l.RUNTIME_TILE_LAYER_SECTION_SIZE,l.RUNTIME_TILE_LAYER_SECTION_SIZE,g.layerTileLayerOrder,n))}))}(o);postMessage([e,t])}else if(n===d.Messages.REQUEST_AND_SAVE_MAP_CHUNKS){const e=yield m.apply(null,o);s.postMessage([e,t])}else if(n===d.Messages.REQUEST_AND_SAVE_SINGLE_MAP_CHUNK){const e=yield R.apply(null,o);s.postMessage([e,t])}if(n===d.Messages.INIT_LOADER){const e=yield y.apply(null,JSON.parse(o));s.postMessage([e,t])}else if(n===d.Messages.INIT_MAP){const e=yield function({mapId:e,data:t}){return r(this,void 0,void 0,(function*(){[...Object.keys(p)].forEach(e=>{delete p[e]}),_=e,g=t}))}(JSON.parse(o));s.postMessage([e,t])}}))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(5),s=n(0),i=n(6),a=n(1);t.Decoder=class{constructor(e,t,n){this.propSeqToNameLookup={},this.tileIdToSizeLookup=[],this.tagSeqToStringLookup={},this.tileIdToSizeLookup=e,this.tagSeqToStringLookup=t,this.propSeqToNameLookup=n||{}}decodeMetaData(e){const t=e[0],n=e[1];let r=2,o=0;const i=[];let a,u=1;for(;;){if(e[r]===s.RESERVED_FLAGS.BLOB_SEPARATOR){if(u++,2===u){a=r+1;break}}else 1===u?(e[r]===s.RESERVED_FLAGS.EMPTY_SECTION_FLAG?i.push(null):i.push([e[r]]),o=i.length-1,u=0):i[o].push(e[r]);r++}return{mapW:t,mapH:n,startingChunkIndex:a,layerTileLayerOrder:i}}adjustNeg(e){return e.x>s.RESERVED_FLAGS.NEGATIVE_NUMBER&&(e.x&=~s.RESERVED_FLAGS.NEGATIVE_NUMBER,e.x*=-1),e.y>s.RESERVED_FLAGS.NEGATIVE_NUMBER&&(e.y&=~s.RESERVED_FLAGS.NEGATIVE_NUMBER,e.y*=-1),e}decodeString(e,t){let n="",r=t[e++];for(;r!=s.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR;)n+=String.fromCharCode(r),r=t[e++];return{decodedString:n,endIndex:e}}decodePropStrings(e,t){const n={};let r=null,o=t[e];for(;o!=s.RESERVED_FLAGS.BLOB_SEPARATOR;)if(o==s.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)r=null,o=t[++e];else if(null===r){if(r=this.propSeqToNameLookup[o],!r)throw new Error("Expected prop");n[r]="",o=t[++e]}else n[r]+=String.fromCharCode(o),o=t[++e];return{endIndex:e+1,props:n}}decodePropNumbers(e,t){const n={};let r=t[e];for(;r!=s.RESERVED_FLAGS.BLOB_SEPARATOR;){const o=this.propSeqToNameLookup[t[e++]];if(!o)throw new Error("Did not find seq.");let i=t[e++];i>s.RESERVED_FLAGS.NEGATIVE_NUMBER&&(i&=~s.RESERVED_FLAGS.NEGATIVE_NUMBER,i*=-1),n[o]=i,r=t[e]}return{endIndex:e+1,props:n}}decodePropBooleans(e,t){const n={};let r=t[e];for(;r!=s.RESERVED_FLAGS.BLOB_SEPARATOR;){const o=this.propSeqToNameLookup[t[e++]];if(!o)throw new Error("Did not find seq.");let s=!!t[e++];n[o]=s,r=t[e]}return{endIndex:e+1,props:n}}decodePolygon(e,t){let n=e;const r=t[n++],o=t[n++];let s=[];const i=t[n++];for(;s.length<i;)s.push(this.adjustNeg({x:t[n++],y:t[n++]}));const u={colObj:{id:r,shapeType:a.RuntimeColliderShape.POLYGON,shapeData:s},endIndex:n};return this.decodeColliderTagsAndProps(u,o,t,n),u}decodeProps(e,t){let n,r={};return t[e]===s.RESERVED_FLAGS.EMPTY_SECTION_FLAG?{endAtIndex:e+1}:(({endIndex:e,props:n}=this.decodePropBooleans(e,t)),r=Object.assign(Object.assign({},r),n),({endIndex:e,props:n}=this.decodePropNumbers(e,t)),r=Object.assign(Object.assign({},r),n),({endIndex:e,props:n}=this.decodePropStrings(e,t)),r=Object.assign(Object.assign({},r),n),{props:r,endAtIndex:e})}mapTags(e){return e.map(e=>{if(!(e in this.tagSeqToStringLookup))throw new Error(`Could not find tag seq ${e} in lookup.`);return this.tagSeqToStringLookup[e]})}decodeRect(e,t){let n=e;const r=t[n++],o=t[n++],s=this.adjustNeg({x:t[n++],y:t[n++],w:t[n++],h:t[n++]}),i={colObj:{id:r,shapeType:a.RuntimeColliderShape.RECT,shapeData:s},endIndex:n};return this.decodeColliderTagsAndProps(i,o,t,n),i}decodeColliderTagsAndProps(e,t,n,r){const{tags:o,endAtIndex:s}=this.decodeTags(t,n,r);o&&(e.colObj.tags=o),e.endIndex=s;const{endAtIndex:i,props:a}=this.decodeProps(s,n);a&&(e.colObj.props=a),e.endIndex=i}decodeTags(e,t,n){let r;if(!e)return{endAtIndex:n};for(r=[];r.length<e;)r.push(t[n++]);return{tags:this.mapTags(r),endAtIndex:n}}decodePoint(e,t){let n=e;const r=t[n++],o=t[n++],s=this.adjustNeg({x:t[n++],y:t[n++]}),i={colObj:{id:r,shapeType:a.RuntimeColliderShape.POINT,shapeData:s},endIndex:n};return this.decodeColliderTagsAndProps(i,o,t,n),i}decodeCollider(e,t,n){switch(e){case"polygons":return this.decodePolygon(t,n);case"rects":return this.decodeRect(t,n);case"points":return this.decodePoint(t,n);default:throw new Error(`Unhandled type ${e}`)}}decodeColliders(e,t,n){const r=new Array(n);let o=!1,s=0;const i=["points","rects","polygons"];let a=e;for(;s<n;){let e=0;for(;e<i.length;){let n=0,u=t[a++];for(;n<u;){o=!0,r[s]||(r[s]={}),r[s][i[e]]||(r[s][i[e]]=new Array(u));const{endIndex:d,colObj:c}=this.decodeCollider(i[e],a,t);a=d,r[s][i[e]][n]=c,n++}e++}s++}return{decoded:o?r:null,endIndex:a}}splitChunkArrayLayers(e,t){const n=new Array(t.length),r=new Array(t.length);let o=0;for(let i=0;i<t.length;i++){r[i]=[];const a=t[i];if(a&&a.length){n[i]=[],a.forEach(()=>{n[i].push([])});let t=0;for(;t<a.length;)e[o]===s.RESERVED_FLAGS.BLOB_SEPARATOR?t++:n[i][t].push(e[o]),o++}else n[i]=null}let i,a=0,u=!1,d=!0,c=0,l=!0;for(;a<t.length;){5==e[o+1]&&e[o+2];const n=e[o];if(d)i=n,i||(r[a]=null),d=!1;else if(n===s.RESERVED_FLAGS.BLOB_SEPARATOR)l=!0,a++,a<t.length&&(d=!0);else if(n===s.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)l=!0,r[a].push(n);else{u=!0,c++,c===(l?4:3)&&(c=0,l=!1),r[a].push(n)}o++}const{endIndex:h,decoded:f}=this.decodeColliders(o,e,t.length);o=h;const E={tileArrays:n};return u&&(E.images=r),f&&(E.colliders=f),E}decodeChunk(e,t,n,r,s,a,u,d,c){c=Array.isArray(c)?c:o.default.uncompress(c);const l=Math.ceil(t/r),h=e%l*r,f=Math.floor(e/l)*s,{endX:E,endY:p}=i.calculateEndOfChunk(t,n,r,s,h,f),S={index:e,x:h,y:f,width:E-h,height:p-f,layers:new Array(d.length)},g=this.splitChunkArrayLayers(c,d),_=!!g.images,A=!!g.colliders;for(let e=0;e<d.length;e++){const o=d[e];S.layers[e]={layerId:e},o&&(S.layers[e].tileLayers=o.map((o,i)=>{const{width:d,height:c}=this.tileIdToSizeLookup[o],l=g.tileArrays[e][i];return{tileSizeSeq:o,maxTileId:1e4,tileWidth:d,tileHeight:c,subChunks:l?this.unmergeSubsectionTiles(d,c,a,u,r,s,h,f,t,n,l):null}})),_&&g.images[e]&&(S.layers[e].images=this.unmergeLayerImages(g.images[e])),A&&g.colliders[e]&&(S.layers[e].colliders=g.colliders[e])}return S}getCompressedChunksFromMap(e,t,n){const r=o.default.uncompress(n),{mapW:i,mapH:a,startingChunkIndex:u,layerTileLayerOrder:d}=this.decodeMetaData(r),c=Math.ceil(i/e)*Math.ceil(a/t);let l=0;const h=new Array(c);for(let e=0;e<c;e++)h[e]=[];for(let e=u;e<r.length;e++)if(r[e]!==s.RESERVED_FLAGS.CHUNK_SEPERATOR)h[l].push(r[e]);else{if(++l,l===c){if(e!==r.length-1)throw new Error("Should be on last element by the time it gets here.");break}h[l]=[]}return{metaData:{mapW:i,mapH:a,startingChunkIndex:u,layerTileLayerOrder:d},buffers:h.map(e=>o.default.compress(e))}}decodeMap(e,t,n,i,a,u){return r(this,void 0,void 0,(function*(){const r=Array.isArray(a)?a:o.default.uncompress(a),{mapW:d,mapH:c,startingChunkIndex:l,layerTileLayerOrder:h}=this.decodeMetaData(r),f=(h.length,Math.ceil(d/e)*Math.ceil(c/t)),E=new Array(f);E[0]=[];let p=0;for(let e=l;e<r.length;e++)if(r[e]!==s.RESERVED_FLAGS.CHUNK_SEPERATOR)E[p].push(r[e]);else{if(++p,p===f){if(e!==r.length-1)throw new Error("Should be on last element by the time it gets here.");break}E[p]=[]}const S=[];if(u)for(let r=0;r<E.length;r++){const o=this.decodeChunk(r,d,c,e,t,n,i,h,E[r]);S.push(o),yield u(o,r)}else for(let r=0;r<E.length;r++)S.push(this.decodeChunk(r,d,c,e,t,n,i,h,E[r]));return{metaData:{mapW:d,mapH:c,startingChunkIndex:l,layerTileLayerOrder:h},chunks:S}}))}unmergeLayerImages(e){const t={};let n=!0,r=0,o=null;for(let i=0;i<e.length;i++)if(e[i]!==s.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)if(n)o=e[i],t[o]=[],n=!1;else{let n=e[i];r<2&&n>s.RESERVED_FLAGS.NEGATIVE_NUMBER&&(n&=~s.RESERVED_FLAGS.NEGATIVE_NUMBER,n*=-1),t[o].push(n),r++,3===r&&(r=0)}else n=!0;return t}unmergeSubsectionTiles(e,t,n,r,o,a,u,d,c,l,h,f){let E,p;f?(E=f.x,p=f.y):({endX:E,endY:p}=i.calculateEndOfChunk(c,l,o,a,u,d));const S=i.calculateSubChunks(c,l,o,a,u,d,n,r),g=new Array(S).fill(-1);let _=0,A=u,y=d,{x:m,y:R}=i.getTopLeftPadding(e,t,c,l,n,r,A,y),T=m,I=R;const w=()=>{_++,T=0,I=0,A+=n,A>=E&&(A=u,y+=r),({x:m,y:R}=i.getTopLeftPadding(e,t,c,l,n,r,A,y)),T=m,I=R};for(let o=0;o<h.length;o++)if(h[o]===s.RESERVED_FLAGS.EMPTY_SECTION_FLAG){if(-1!==g[_])throw new Error("This sub chunk should have been -1 at this time");g[_]=null,w()}else{if(-1===g[_]&&(g[_]=[m,R]),g[_].push(h[o]),T+=e,A+T>=E||T>=n){T=m,I+=t,(y+I>=p||I>=r)&&w()}}return g}}},function(e,t,n){"use strict";function r(){}function o(e){return e<128?1:e<16384?2:e<1<<21?3:e<1<<28?4:5}function s(e){return e+e^e>>31}function i(e){return e>>1^-(1&e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r,r.computeCompressedSizeInBytes=function(e){for(var t=e.length,n=0,r=0;r<t;r++)n+=o(e[r]);return n},r.computeCompressedSizeInBytesSigned=function(e){for(var t=e.length,n=0,r=0;r<t;r++)n+=o(s(e[r]));return n},r.compress=function(e){for(var t=e.length,n=new ArrayBuffer(r.computeCompressedSizeInBytes(e)),o=new Int8Array(n),s=0,i=0;i<t;i++){var a=e[i];a<128?o[s++]=a:a<16384?(o[s++]=127&a|128,o[s++]=a>>>7):a<1<<21?(o[s++]=127&a|128,o[s++]=a>>>7&127|128,o[s++]=a>>>14):a<1<<28?(o[s++]=127&a|128,o[s++]=a>>>7&127|128,o[s++]=a>>>14&127|128,o[s++]=a>>>21):(o[s++]=127&a|128,o[s++]=a>>>7&127|128,o[s++]=a>>>14&127|128,o[s++]=a>>>21&127|128,o[s++]=a>>>28)}return n},r.computeHowManyIntegers=function(e){for(var t=new Int8Array(e).length,n=0,r=0;r<t;r++)n+=e[r]>>>7;return t-n},r.uncompress=function(e){for(var t=[],n=new Int8Array(e),r=n.length,o=0;r>o;){var s=n[o++],i=127&s;s>=0?t.push(i):(i|=(127&(s=n[o++]))<<7,s>=0?t.push(i):(i|=(127&(s=n[o++]))<<14,s>=0?t.push(i):(i|=(127&(s=n[o++]))<<21,s>=0?t.push(i):(i|=(s=n[o++])<<28,t.push(i)))))}return t},r.compressSigned=function(e){for(var t=e.length,n=new ArrayBuffer(r.computeCompressedSizeInBytesSigned(e)),o=new Int8Array(n),i=0,a=0;a<t;a++){var u=s(e[a]);u<128?o[i++]=u:u<16384?(o[i++]=127&u|128,o[i++]=u>>>7):u<1<<21?(o[i++]=127&u|128,o[i++]=u>>>7&127|128,o[i++]=u>>>14):u<1<<28?(o[i++]=127&u|128,o[i++]=u>>>7&127|128,o[i++]=u>>>14&127|128,o[i++]=u>>>21):(o[i++]=127&u|128,o[i++]=u>>>7&127|128,o[i++]=u>>>14&127|128,o[i++]=u>>>21&127|128,o[i++]=u>>>28)}return n},r.uncompressSigned=function(e){for(var t=[],n=new Int8Array(e),r=n.length,o=0;r>o;){var s=n[o++],a=127&s;s>=0?t.push(i(a)):(a|=(127&(s=n[o++]))<<7,s>=0?t.push(i(a)):(a|=(127&(s=n[o++]))<<14,s>=0?t.push(i(a)):(a|=(127&(s=n[o++]))<<21,s>=0?t.push(i(a)):(a|=(s=n[o++])<<28,t.push(i(a))))))}return t}},function(e,t,n){"use strict";function r(e,t,n,r,o,s,i,a){const u=e-o,d=t-s,c=Math.min(Math.ceil(n/i),Math.ceil(u/i));return{rows:Math.min(Math.ceil(r/a),Math.ceil(d/a)),columns:c}}Object.defineProperty(t,"__esModule",{value:!0}),t.calculateEndOfChunk=function(e,t,n,r,o,s){const i=e-o,a=t-s;return{endX:o+(i>=n?n:i),endY:s+(a>=r?r:a)}},t.calculateSubChunks=function(e,t,n,o,s,i,a,u){const{rows:d,columns:c}=r(e,t,n,o,s,i,a,u);return d*c},t.calculateRowsAndColumns=r,t.getTopLeftPadding=function(e,t,n,r,o,s,i,a){const u={x:0,y:0},d=Math.floor(i/o),c=Math.floor(a/s);let l=(e-o%e)*d,h=Math.floor(l/e);return u.x=l-h*e,l=(t-s%t)*c,h=Math.floor(l/t),u.y=l-h*t,u},t.calculateOffsets=function(e,t,n,r,o,s,i,a){const u=Math.ceil(n/o),d=Math.ceil(r/s),c={x:0,y:0},l=Math.floor(i/o),h=Math.floor(a/s);let f=(e-o%e)*l,E=Math.floor(f/e);c.x=f-E*e,f=(t-s%t)*h,E=Math.floor(f/t),c.y=f-E*t;const p={x:0,y:0};return l<u-1&&(f=(e-o%e)*(l+1),E=Math.floor(f/e),p.x=f-E*e),h<d-1&&(f=(t-s%t)*(h+1),E=Math.floor(f/t),p.y=f-E*t),{bottomRightOverflow:p,topLeftPadding:c}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2),s="object"==typeof window?window.indexedDB||window.webkitIndexedDB||window.mozIndexedDB||window.OIndexedDB||window.msIndexedDB:self.indexedDB||self.webkitIndexedDb;t.Loader=class{constructor(e,t){this.db=t,this.name=e}initialize(){return r(this,void 0,void 0,(function*(){if(this.db)return!0;const e=s.open(this.name,1);return new Promise((t,n)=>{e.onerror=function(e){console.error("Error creating/accessing IndexedDB database",e)},e.onsuccess=r=>{if(this.db=e.result,this.db.onerror=function(e){return console.error("Error creating/accessing IndexedDB database",e),n("Error creating/accessing IndexedDB database")},!this.db.setVersion)return t(!0);if(1==this.db.version)return this.db.createObjectStore(this.name),t(!0);this.db.setVersion(1).onsuccess=function(){return this.db.createObjectStore(this.name),t(!0)}},e.onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore(this.name)}})}))}deleteItem(e){return r(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readwrite").objectStore(this.name).delete(e);return new Promise((n,r)=>{t.onsuccess=e=>n(!0),t.onerror=t=>r(`Error saving texture to indexedDB: ${e}`)})}))}saveJson(e,t){return r(this,void 0,void 0,(function*(){const n=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(JSON.stringify(t),e);return new Promise((t,r)=>{n.onsuccess=e=>t(!0),n.onerror=t=>r(`Error saving texture to indexedDB: ${e}`)})}))}loadJson(e){return r(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((n,r)=>{t.onsuccess=e=>e.target.result?n(JSON.parse(e.target.result)):n(null),t.onerror=t=>{throw new Error(`Error getting texture from indexedDB: ${e}`)}})}))}saveArrayBuffer(e,t){return r(this,void 0,void 0,(function*(){const n=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(t,e);return new Promise((t,r)=>{n.onsuccess=e=>t(!0),n.onerror=t=>r(`Error saving texture to indexedDB: ${e}`)})}))}loadArrayBuffer(e){return r(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((n,r)=>{t.onsuccess=e=>n(e.target.result),t.onerror=t=>{throw new Error(`Error getting texture from indexedDB: ${e}`)}})}))}saveTexture(e,t){return r(this,void 0,void 0,(function*(){const n=this.db.transaction([this.name],"readwrite");let r;if(t.baseTexture.source){const e=document.createElement("canvas");e.width=t.baseTexture.width,e.height=t.baseTexture.height;const n=e.getContext("2d");console.log("the base texture was",t.baseTexture),n.drawImage(t.baseTexture.source,0,0),r=e.toDataURL("image/png")}if(!r)throw new Error("did not get a datasUrl from texture.");const o=n.objectStore(this.name).put(r,e);return new Promise((t,n)=>{o.onsuccess=e=>t(!0),o.onerror=t=>n(`Error saving texture to indexedDB: ${e}`)})}))}saveImageData(e,t){return r(this,void 0,void 0,(function*(){const n=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(t,e);return new Promise((t,r)=>{n.onsuccess=e=>t(!0),n.onerror=t=>r(`Error saving texture to indexedDB: ${e}`)})}))}loadImageData(e){return r(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((n,r)=>{t.onsuccess=e=>{var t,r;const o=null===(r=null===(t=e)||void 0===t?void 0:t.target)||void 0===r?void 0:r.result;return n(o)},t.onerror=t=>r(new Error(`Error getting texture from indexedDB: ${e}`))})}))}loadTexture(e){return r(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((n,s)=>{t.onsuccess=e=>r(this,void 0,void 0,(function*(){var t,r;const i=null===(r=null===(t=e)||void 0===t?void 0:t.target)||void 0===r?void 0:r.result;if(!i)return n(null);try{const e=yield o.dataUrlToTexture(i);return n(e)}catch(e){return s(e)}})),t.onerror=t=>(console.error("Error",t),s(new Error(`Error getting texture from indexedDB: ${e}`)))})}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.GET_SECTION_DATA=0]="GET_SECTION_DATA",e[e.REQUEST_AND_SAVE_MAP_CHUNKS=1]="REQUEST_AND_SAVE_MAP_CHUNKS",e[e.REQUEST_AND_SAVE_SINGLE_MAP_CHUNK=2]="REQUEST_AND_SAVE_SINGLE_MAP_CHUNK",e[e.REQUEST_AND_SAVE_ALL_MAP_CHUNKS=3]="REQUEST_AND_SAVE_ALL_MAP_CHUNKS",e[e.INIT_LOADER=4]="INIT_LOADER",e[e.INIT_MAP=5]="INIT_MAP"}(t.Messages||(t.Messages={})),function(e){e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR"}(t.ResultCodes||(t.ResultCodes={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mapFileKey=function(e,t,n){return null!=n?`${e}/${t}/s_${n}`:`${e}/${t}/map`},t.mapMetaPath=function(e,t){return`${e}/${t}/meta`}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,