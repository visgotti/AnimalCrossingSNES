!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.World=t():e.World=t()}(window,(function(){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=12)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.MASSIVE=0]="MASSIVE",e[e.LARGE=1]="LARGE",e[e.MEDIUM=2]="MEDIUM",e[e.SMALL=3]="SMALL"}(t.MapSizes||(t.MapSizes={})),function(e){e[e.RECT=0]="RECT",e[e.POLYGON=1]="POLYGON",e[e.POINT=2]="POINT",e[e.CIRCLE=3]="CIRCLE",e[e.LINE=4]="LINE",e[e.ELIPSE=5]="ELIPSE"}(t.RuntimeColliderShape||(t.RuntimeColliderShape={})),function(e){e[e.SMALL=0]="SMALL",e[e.MEDIUM=1]="MEDIUM",e[e.LARGE=2]="LARGE"}(t.MapSize||(t.MapSize={}))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(0);function r(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}function a(e){return s(this,void 0,void 0,(function*(){const t=window.URL||window.webkitURL;let i,s=!0;try{i=t.createObjectURL(e)}catch(t){s=!1;const n=r(e);i="data:image/png;base64,"+n}const n=new Image;return new Promise((e,r)=>{n.src=i,n.addEventListener("load",r=>(s&&t.revokeObjectURL(i),e(new PIXI.Texture(new PIXI.BaseTexture(n)))))})}))}function o(e){let t=e.split(","),i=t[0].match(/:(.*?);/)[1],s=atob(t[1]),n=s.length,r=new Uint8Array(n);for(;n--;)r[n]=s.charCodeAt(n);return new Blob([r],{type:i})}t.httpGetAsync=function(e,t=!0){return s(this,void 0,void 0,(function*(){const i=new XMLHttpRequest;return t||(i.responseType="arraybuffer"),i.open("GET",e,!0),i.send(null),new Promise((e,s)=>{i.onreadystatechange=()=>{if(4==i.readyState){if(200==i.status)return e(t?JSON.parse(i.responseText):i.response);try{return s(t?JSON.parse(i.responseText):i.response)}catch(e){return console.error("Error parsing http error response",i),s(e)}}}})}))},t.resolveMapSize=function(e,t){return e<=1028&&t<=1028?n.MapSize.SMALL:n.MapSize.LARGE},t.bufferToBase64=r,t.getTextureFromBlob=a,t.getTextureFromDataUrl=function(e){return s(this,void 0,void 0,(function*(){window.URL||window.webkitURL;const t=new Image;return new Promise((i,s)=>{t.src=e,t.addEventListener("load",e=>i(new PIXI.Texture(new PIXI.BaseTexture(t))))})}))},t.dataUrlToTexture=function(e){return s(this,void 0,void 0,(function*(){return a(o(e))}))},t.dataURLtoBlob=o,t.rotateColliders=function(e,t){},t.removeFileExtension=function(e){return e.replace(/\.[^/.]+$/,"")},t.indexedDB_enabled=function(){return!!(window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB)},t.resolveMaxTextureSize=function(e){if(1==e.type){const t=e.gl.MAX_TEXTURE_SIZE;let i;return i=t>=4096?t-t%4096:t>=2048?t-t%2048:t>=1024?t-t%1024:t>=512?t-t%512:256,i}return 2048},t.computedSectionLength=function(e,t,i){let s,n=1;if(e<t)s=e;else{for(n=2;e/n>t;)n*=2;s=e/n}let r=i-s%i;return{mainLength:s+r,offsetLength:Math.abs(s-r*(n-1))}},t.mergeOptions=function(e,t,i=[]){const s=t;for(let t in s)e[t]&&(s[t]=e[t]);const n=[],r=[],a=[];for(let e=0;e<i.length;e++){const t=i[e];t in s||n.push(t),null===s[t]&&a.push(t),void 0===s[t]&&r.push(t)}let o="";if(o=n.length?o.concat("Missing param found for required params:"+n.join(", ")):o,o=a.length?o.concat("null param found for required params:"+a.join(", ")):o,o=n.length?o.concat("undefined param found for required params:"+r.join(", ")):o,o)throw o;return s}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0),n=i(5),r=i(6);t.Collider=class{constructor(e,t,i,a,o,h,l,d,u,c){if(this.active=!1,this.props={},this.updatePosition=()=>{throw new Error("Static collider can not set position.")},this.updateRotation=()=>{throw new Error("Static collider can not set rotation.")},this._rotation=0,this._scaleX=0,this._scaleY=0,h)this.collisionManager=h,this.tagManager=h,n.TagMixin.ApplyMixin(this),r.TransformEventMixin.ApplyMixin(this);else{if(!c)throw new Error("No parent found on collider without ref to manager.");this.parent=c}this.props=l||{},this.gameObject=d,this.shapeType=t,this.layer=e,this.shapeData=i,this.transformedShapeData=i,this.data=u,this.tags=a,this.active=!0,this.dynamic=o,t===s.RuntimeColliderShape.POLYGON?this.isPolygon=!0:t===s.RuntimeColliderShape.LINE?(this.updateAdjustedShapeData=this.updateAdjustedShapeDataLine.bind(this),this.isLine=!0):t===s.RuntimeColliderShape.CIRCLE?(this.updateAdjustedShapeData=this.updateAdjustedShapeDataCircle.bind(this),this.isCircle=!0):t===s.RuntimeColliderShape.RECT?(this.updateAdjustedShapeData=this.updateAdjustedShapeDataRect.bind(this),this.isRect=!0):t===s.RuntimeColliderShape.POINT?(this.updateAdjustedShapeData=this.updateAdjustedShapeDataPoint.bind(this),this.isPoint=!0):t===s.RuntimeColliderShape.ELIPSE&&(this.updateAdjustedShapeData=this.updateAdjustedShapeDataElipse.bind(this)),o&&(this.rebindPositionUpdate(),this.rebindRotationUpdate());const{x:p,y:g}=this.getMins();this.minX=p,this.minY=g}setDefaultPivot(){this.isRect?this.setPivot(this.shapeData.w/2,this.shapeData.h/2):this.isCircle?this.setPivot(this.shapeData.r,this.shapeData.r):this.isPoint?this.setPivot(this.shapeData[0].x-this.shapeData[1].x/2,this.shapeData[0].y-this.shapeData[1].y/2):this.shapeType===s.RuntimeColliderShape.POINT&&this.setPivot(0,0)}pivotPointInPlace(e,t,i){const s=t.x,n=t.y,r=Math.cos(e),a=Math.sin(e);t.x=r*(s-i.x)-a*(n-i.y)+i.x,t.x=a*(s-i.x)+r*(n-i.y)+i.y}doScale(e,t){}updateTransformedShapeData(){throw new Error("Unimplmented, supposed to be rebound in constructor.")}updateAdjustedShapeDataRect(){}updateAdjustedShapeDataCircle(){}updateAdjustedShapeDataElipse(){}updateAdjustedShapeDataPoint(){}updateAdjustedShapeDataLine(){}updateAdjustedShapeData(){}doRotation(e,t){this.shapeType===s.RuntimeColliderShape.RECT||(this.shapeType===s.RuntimeColliderShape.LINE?(this.pivotPointInPlace(e,this.shapeData[0],t),this.pivotPointInPlace(e,this.shapeData[1],t)):this.pivotPointInPlace(e,this.shapeData,t))}onGetPivotPoint(e){this.defaultPivotPoint=e}updateRotationWithListeners(e,t){this._rotation+=e,this.doRotation(e,t);for(let i=0;i<this.onRotationUpdates.length;i++)this.onRotationUpdates[i](e,t)}updateRotationWithOutListeners(e,t){if(!t)throw new Error("Need pivot point for rotation.");this._rotation+=e,this.doRotation(e,t)}setScale(e,t){}setTransformData(e){e.pivotX&&(this._pivotX=e.pivotX),e.pivotX&&(this._pivotY=e.pivotY),e.scaleX&&(this._scaleX=e.pivotY),e.scaleY&&(this._scaleY=e.scaleY),e.rotation&&(this._rotation=e.rotation),this.updateTransformedShapeData()}getMins(){let e,t;if(this.shapeType===s.RuntimeColliderShape.POLYGON){e=Number.MAX_SAFE_INTEGER,t=Number.MAX_SAFE_INTEGER;for(let i=0;i<this.shapeData.length;i++)e=Math.min(e,this.shapeData[i].x),t=Math.min(t,this.shapeData[i].y);return{x:e,y:t}}return this.shapeType===s.RuntimeColliderShape.LINE?{x:Math.min(this.shapeData[0].x,this.shapeData[1].x),y:Math.min(this.shapeData[0].y,this.shapeData[1].y)}:this.shapeType===s.RuntimeColliderShape.CIRCLE?{x:this.shapeData.x-this.shapeData.r,y:this.shapeData.y-this.shapeData.r}:(e=this.shapeData.x,t=this.shapeData.y,{x:e,y:t})}setPivot(e,t){this._pivotX=e,this._pivotY=t}updateShapeData(e){}updateRotationDegrees(e,t){this.updateRotation(e*Math.PI/180,t)}defaultPivotPoint(){const{x:e,y:t}=this.getMins();return{x:this.pivotX+e,y:this.pivotY+t}}rebindRotationUpdate(){this.updateRotation=this.updateRotationWithOutListeners.bind(this),this.onRotationUpdates&&(this.updateRotation=this.updateRotationWithListeners.bind(this))}rebindPositionUpdate(){this.onPositionUpdates?(this.updatePosition=this.updatePositionWithListeners.bind(this),this.shapeType!==s.RuntimeColliderShape.LINE&&this.shapeType!==s.RuntimeColliderShape.POLYGON||(this.updatePosition=this.updateArrayWithListeners.bind(this))):(this.updatePosition=this.updatePositionWithoutListeners.bind(this),this.shapeType!==s.RuntimeColliderShape.LINE&&this.shapeType!==s.RuntimeColliderShape.POLYGON||(this.updatePosition=this.updateArrayWithoutListeners.bind(this)))}get rotation(){return this._rotation}setRotation(e,t){this.updateRotation(e-this._rotation,t)}setRotationDegrees(e,t){this.updateRotation(e*Math.PI/180-this._rotation,t)}updateArrayWithoutListeners(e,t){for(let i=0;i<this.shapeData.length;i++)this.shapeData[i].x+=e,this.shapeData[i].y+=t}updateArrayWithListeners(e,t){for(let i=0;i<this.shapeData.length;i++)this.shapeData[i].x+=e,this.shapeData[i].y+=t;for(let i=0;i<this.onPositionUpdates.length;i++)this.onPositionUpdates[i](e,t)}updatePositionWithoutListeners(e,t){this.shapeData.x+=e,this.shapeData.y+=t}updatePositionWithListeners(e,t){if(this.shapeData.x+=e,this.shapeData.y+=t,this.onPositionUpdates)for(let i=0;i<this.onPositionUpdates.length;i++)this.onPositionUpdates[i](e,t)}deactivate(){delete this.data,delete this.tags,delete this.shapeData,delete this.layer,delete this.gameObject,this.active=!1,this.clearListeners(),this.rebindPositionUpdate()}onCollisionStart(e){return this.startListeners?this.startListeners.push(e):this.startListeners=[e],this.startListeners.length-1}onCollision(e){return this.onListeners?this.onListeners.push(e):this.onListeners=[e],this.onListeners.length-1}onCollisionEnd(e){return this.endListeners?this.endListeners.push(e):this.endListeners=[e],this.endListeners.length-1}offCollision(e){this.onListeners=this.removeFromListeners(e,this.onListeners),this.onListeners||delete this.onListeners}offCollisionEnd(e){this.endListeners=this.removeFromListeners(e,this.endListeners),this.endListeners||delete this.endListeners}offCollisionStart(e){this.startListeners=this.removeFromListeners(e,this.startListeners),this.startListeners||delete this.startListeners}clearListeners(){this.parent||(this.clearTagListeners(),this.clearTransformListeners()),this.onListeners&&(this.onListeners.length=0,delete this.onListeners),this.endListeners&&(this.endListeners.length=0,delete this.endListeners),this.startListeners&&(this.startListeners.length=0,delete this.startListeners)}removeFromListeners(e,t){const i=new Array(t.length-1);let s=-1;for(let n=0;n<t.length;n++){if(t[n]===e){s=n;break}i[n]=t[n]}for(let e=s+1;e<t.length;e++)i[e-1]=t[e];return i.length?i:null}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.NEGATIVE_NUMBER=1073741824]="NEGATIVE_NUMBER",e[e.IMAGE_AND_STRING_SEPERATOR=1118481]="IMAGE_AND_STRING_SEPERATOR",e[e.EMPTY_SECTION_FLAG=1118482]="EMPTY_SECTION_FLAG",e[e.BLOB_SEPARATOR=1118483]="BLOB_SEPARATOR",e[e.CHUNK_SEPERATOR=1118484]="CHUNK_SEPERATOR",e[e.TILE_=1118485]="TILE_"}(t.RESERVED_FLAGS||(t.RESERVED_FLAGS={})),t.RUNTIME_TILE_LAYER_SECTION_SIZE=128,t.EDITOR_TILE_LAYER_SECTION_SIZE=256,function(e){e.RECT="rects",e.POLYGON="polygons",e.POINT="points"}(t.ColliderShape||(t.ColliderShape={}));t.ObjectType=class{}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0),n=i(2),r=i(7),a=i(8),o=i(5),h=i(6);PIXI.Sprite;class l extends PIXI.Sprite{constructor(e,t,i,s){super(),this.worldX=0,this.worldY=0,this.chunkCount=0,this.pool=[],this.sortByY=!1,this.gameStage=i,this.collisionManager=t,this.pool=e,this.tagManager=s,o.TagMixin.ApplyMixin(this),h.TransformEventMixin.ApplyMixin(this)}get sprite(){return this.delegatedSprite?this.delegatedSprite:this}updatePosition(e,t){if(e||t){if(this.worldX+=e,this.worldY+=t,this.position.x=Math.round(this.worldX),this.position.y=Math.round(this.worldY),this.delegatedSprite&&(this.delegatedSprite.position.x=Math.round(this.worldX),this.delegatedSprite.position.y=Math.round(this.worldY)),this.colliders)for(let i=0;i<this.colliders.length;i++)this.colliders[i].updatePosition(e,t);if(this.onPositionUpdates)for(let i=0;i<this.onPositionUpdates.length;i++)this.onPositionUpdates[i](e,t)}}updateRotation(e){if(this.rotation+=e,this.delegatedSprite&&(this.delegatedSprite.rotation+=e),this.colliders)for(let e=0;e<this.colliders.length;e++){this.colliders[e].minX,this.x,this.pivot.x,this.colliders[e].minY,this.y,this.pivot.y;this.colliders[e].setRotation(this.rotation,this.pivot)}if(this.onRotationUpdates)for(let t=0;t<this.onRotationUpdates.length;t++)this.onRotationUpdates[t](e)}setPosition(e,t){if(e===this.worldX&&t===this.worldY)return;const i=e-this.worldX,s=t-this.worldY;if(this.worldX+=i,this.worldY+=s,this.position.x=Math.round(this.worldX),this.position.y=Math.round(this.worldY),this.delegatedSprite&&(this.delegatedSprite.position.x=this.position.x,this.delegatedSprite.position.y=this.position.y),this.colliders)for(let e=0;e<this.colliders.length;e++)this.colliders[e].updatePosition(i,s);if(this.onPositionUpdates)for(let e=0;e<this.onPositionUpdates.length;e++)this.onPositionUpdates[e](i,s)}changeLayer(e){var t;if(e!==this.layerIndex){const i=this.layerIndex;null===(t=this.layerParent)||void 0===t||t.removeMapSprite(this,!0);const s=this.gameStage.children[e];if(!s)throw new Error(`Layer index: ${e} is out of range for current map.`);if(this.layerIndex=e,this.layerParent=s,s.addMapSprite(this),this.delegatedSprite&&s.objectContainer.addChild(this.delegatedSprite),this.onLayerChangeListeners&&null!=i)for(let t=0;t<this.onLayerChangeListeners.length;t++)this.onLayerChangeListeners[t](e,i)}}addPolygonCollider(e,t,i,s,n){return e=e.map(e=>({x:e.x+this.worldX,y:e.y+this.worldY})),this._addCollider(new a.PolygonCollider(this.layerIndex,e,t,i,this.collisionManager,s,this,n))}addLineCollider(e,t,i,r,a){return e[0].x+=this.worldX,e[0].y+=this.worldY,e[1].x+=this.worldX,e[1].y+=this.worldY,this._addCollider(new n.Collider(this.layerIndex,s.RuntimeColliderShape.LINE,e,t,i,this.collisionManager,r,this,a))}addRectCollider(e,t,i,r,a,o,h,l){return e+=this.worldX,t+=this.worldY,this._addCollider(new n.Collider(this.layerIndex,s.RuntimeColliderShape.RECT,{x:e,y:t,w:i,h:r},a,o,this.collisionManager,h,this,l))}addCircleCollider(e,t,i,r,a,o,h){return e+=this.worldX,t+=this.worldY,this._addCollider(new n.Collider(this.layerIndex,s.RuntimeColliderShape.CIRCLE,{x:e,y:t,r:i},r,a,this.collisionManager,o,this,h))}addPointCollider(e,t,i,r,a,o){return e+=this.worldX,t+=this.worldY,this._addCollider(new n.Collider(this.layerIndex,s.RuntimeColliderShape.POINT,{x:e,y:t},i,r,this.collisionManager,a,this,o))}_addCollider(e){return this.colliders?this.colliders.push(e):this.colliders=[e],this.collisionManager.initCollider(e),e}removeCollider(e){for(let t=0;t<this.colliders.length;t++)if(this.colliders[t]===e){this.colliders.splice(t,1),this.collisionManager.removeCollider(e),delete e.gameObject;break}this.colliders.length||delete this.colliders}init(e,t){if(this.visible=!0,e.data&&(this.data=e.data),this.zIndex=e.zIndex,null!==this.zIndex&&void 0!==this.zIndex||(this.zIndex=-1),this.sortByY=-1===this.zIndex,this.imageData=t,this._ySortPoint=this.imageData&&"ySortPoint"in this.imageData?this.imageData.ySortPoint:e&&"ySort"in e?e.ySort:this.texture.height,e.texture?this.texture=e.texture:e.sprite&&(this.delegatedSprite=e.sprite,this.delegatedSprite.ySortPoint=this._ySortPoint,this.delegatedSprite.sortByY=this.sortByY),e.position?(this.worldX=e.position.x,this.worldY=e.position.y):(this.worldX=0,this.worldY=0),this.x=this.worldX,this.y=this.worldY,isNaN(e.layer)||this.changeLayer(e.layer),e.tags&&(this.tags=e.tags),e.colliders&&this.addColliders(e.colliders),e.flips){const{flipDiag:t,flipHor:i,flipVert:s}=e.flips,n=i?-1:1,r=s?-1:1;let a=0,o=0;if((i||s)&&(this.setScale(n,r),i&&(a=-this.sprite.width),s&&(o=-this.sprite.height)),t){const e=a;a=this.sprite.height<0?0:this.sprite.height+o,o=this.sprite.width<0?Math.abs(this.sprite.width):e,s&&!i&&(o*=-1),i&&!s&&(a*=-1),i||s||(a*=-1,o*=-1),this.setRotation(Math.PI/180*90)}this.sprite.pivot.set(),this.sprite.x=this.worldX-a,this.sprite.y=this.worldY-o}}setScale(e,t){this.scaleX=e,this.scaleY=t,console.error("setting scales",{x:e,y:t}),this.sprite.scale.set(e,t),this.colliders=[];for(let i=0;i<this.colliders.length;i++)this.colliders[i].setScale(e,t)}clearColliders(){if(this.colliders){const e=[...this.colliders];for(let t=0;t<e.length;t++)this.removeCollider(e[t])}}addCollider(e){const t="shapeType"in e?e.shapeType:r.CollisionManager.ResolveColliderType(e);t===s.RuntimeColliderShape.RECT?this.addRectCollider(e.shapeData.x,e.shapeData.y,e.shapeData.w,e.shapeData.h,e.tags,!!e.dynamic,null,e.data):t===s.RuntimeColliderShape.CIRCLE?this.addCircleCollider(e.shapeData.x,e.shapeData.y,e.shapeData.r,e.tags,!!e.dynamic,null,e.data):t===s.RuntimeColliderShape.POLYGON?this.addPolygonCollider(e.shapeData,e.tags,!!e.dynamic,null,e.data):t===s.RuntimeColliderShape.POINT?this.addPointCollider(e.shapeData.x,e.shapeData.y,e.tags,!!e.dynamic,null,e.data):t===s.RuntimeColliderShape.LINE&&this.addLineCollider(e.shapeData,e.tags,!!e.dynamic,null,e.data)}addColliders(e){for(let t=0;t<e.length;t++)this.addCollider(e[t])}onRemovedFromMap(e){this.onRemovedFromMapListeners?this.onRemovedFromMapListeners.push(e):this.onRemovedFromMapListeners=[e]}offRemovedFromMap(e){for(let t=0;t<this.onRemovedFromMapListeners.length;t++)this.onRemovedFromMapListeners[t]===e&&(this.onRemovedFromMapListeners.splice(t,1),this.onRemovedFromMapListeners.length||delete this.onRemovedFromMapListeners)}onChangedLayers(e){this.onLayerChangeListeners?this.onLayerChangeListeners.push(e):this.onLayerChangeListeners=[e]}offChangedLayers(e){for(let t=0;t<this.onLayerChangeListeners.length;t++)this.onLayerChangeListeners[t]===e&&(this.onLayerChangeListeners.splice(t,1),this.onLayerChangeListeners.length||delete this.onLayerChangeListeners)}setRotation(e){this.updateRotation(e-this.rotation)}removeFromMap(){var e,t;if(this.layerParent)return this.layerParent.removeMapSprite(this,!1);if(null===(e=this.tags)||void 0===e||e.forEach(e=>{var t;return null===(t=this.tagManager.taggedGameObjectRemovedListeners[e])||void 0===t?void 0:t.forEach(e=>e(this))}),null===(t=this.tagManager.gameObjectRemovedListeners)||void 0===t||t.forEach(e=>e(this)),this.delegatedSprite&&(delete this.delegatedSprite.ySortPoint,delete this.delegatedSprite),this.clearTagListeners(),delete this.tags,this.worldX=0,this.worldY=0,this.colliders){for(let e=0;e<this.colliders.length;e++)this.collisionManager.removeCollider(this.colliders[e]);this.colliders.length=0,delete this.colliders}if(this.clearTransformListeners(),this.clearTagListeners(),delete this.layerIndex,this.visible=!1,this.imageData=null,this.alpha=1,this.texture=null,this.rotation=0,this.scale.set(1,1),this.scaleX=1,this.scaleY=1,this.anchor.set(0,0),this.pivot.set(0,0),this.onRemovedFromMapListeners){for(let e=0;e<this.onRemovedFromMapListeners.length;e++)this.onRemovedFromMapListeners[e]();this.onRemovedFromMapListeners.length=0,delete this.onRemovedFromMapListeners}this.onLayerChangeListeners&&(this.onLayerChangeListeners.length=0,delete this.onLayerChangeListeners),delete this.data,this.pool.push(this)}get ySortPoint(){return this.y+this._ySortPoint}}t.GameObject=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static ApplyMixin(e){e.clearTagListeners=s.prototype.clearTagListeners.bind(e),e.onTagAdded=s.prototype.onTagAdded.bind(e),e.offTagAdded=s.prototype.offTagAdded.bind(e),e.onTagRemoved=s.prototype.onTagRemoved.bind(e),e.offTagRemoved=s.prototype.offTagRemoved.bind(e),e.addTag=s.prototype.addTag.bind(e),e.removeTag=s.prototype.removeTag.bind(e)}clearTagListeners(){this.tagAddedListeners&&(Object.keys(this.tagAddedListeners).forEach(e=>{this.tagAddedListeners[e].length=0,delete this.tagAddedListeners[e]}),delete this.tagAddedListeners),this.anyTagAddedListeners&&(this.anyTagAddedListeners.length=0,delete this.anyTagAddedListeners),this.tagRemovedListeners&&(Object.keys(this.tagRemovedListeners).forEach(e=>{this.tagRemovedListeners[e].length=0,delete this.tagRemovedListeners[e]}),delete this.tagRemovedListeners),this.anyTagRemovedListeners&&(this.anyTagRemovedListeners.length=0,delete this.anyTagRemovedListeners)}onTagAdded(e,t){t?this.tagAddedListeners?this.tagAddedListeners[t]?this.tagAddedListeners[t].push(e):this.tagAddedListeners[t]=[e]:this.tagAddedListeners={[t]:[e]}:this.anyTagAddedListeners?this.anyTagAddedListeners.push(e):this.anyTagAddedListeners=[e]}offTagAdded(e,t){if(t){for(let i=0;i<this.tagAddedListeners[t].length;i++)if(this.tagAddedListeners[t][i]===e)return this.tagAddedListeners[t].splice(i,1),this.tagAddedListeners[t].length||(delete this.tagAddedListeners[t],Object.keys(this.tagAddedListeners).length||delete this.tagAddedListeners),!0;return!1}for(let t=0;t<this.anyTagAddedListeners.length;t++)if(this.anyTagAddedListeners[t]===e)return this.anyTagAddedListeners.splice(t,1),this.anyTagAddedListeners.length||delete this.anyTagAddedListeners,!0;return!1}onTagRemoved(e,t){t?this.tagRemovedListeners?this.tagRemovedListeners[t]?this.tagRemovedListeners[t].push(e):this.tagRemovedListeners[t]=[e]:this.tagRemovedListeners={[t]:[e]}:this.anyTagRemovedListeners?this.anyTagRemovedListeners.push(e):this.anyTagRemovedListeners=[e]}offTagRemoved(e,t){if(!t){for(let t=0;t<this.anyTagRemovedListeners.length;t++)if(this.anyTagRemovedListeners[t]===e)return this.anyTagRemovedListeners.splice(t,1),this.anyTagRemovedListeners.length||delete this.anyTagRemovedListeners,!0;return!1}for(let i=0;i<this.tagRemovedListeners[t].length;i++)if(this.tagRemovedListeners[t][i]===e)return this.tagRemovedListeners[t].splice(i,1),this.tagRemovedListeners[t].length||(delete this.tagRemovedListeners[t],Object.keys(this.tagRemovedListeners).length||delete this.tagRemovedListeners),!0;return!1}addTag(e,t=!0){if(t&&this.tags&&this.tags.includes(e))throw new Error(`Trying to add duplicate tag ${e} to collider.`);if(this.tags?this.tags.push(e):this.tags=[e],this.tagAddedListeners){const t=this.tagAddedListeners[e];if(t)for(let i=0;i<t.length;i++)t[i](e)}if(this.anyTagAddedListeners)for(let t=0;t<this.anyTagAddedListeners.length;t++)this.anyTagAddedListeners[t](e);this.tagManager._onAddedTag(this,e)}removeTag(e){for(let t=0;t<this.tags.length;t++)if(this.tags[t]===e){if(this.tags.splice(t,1),this.tags.length||delete this.tags,this.tagRemovedListeners){const t=this.tagRemovedListeners[e];if(t)for(let i=0;i<t.length;i++)t[i](e)}return this.tagManager._onRemovedTag(this,e),!0}if(this.anyTagRemovedListeners)for(let t=0;t<this.anyTagRemovedListeners.length;t++)this.anyTagRemovedListeners[t](e);return!1}}t.TagMixin=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static ApplyMixin(e){e.clearTransformListeners=s.prototype.clearTransformListeners.bind(e),e.onRotationUpdate=s.prototype.onRotationUpdate.bind(e),e.onPositionUpdate=s.prototype.onPositionUpdate.bind(e),e.offPositionUpdate=s.prototype.offPositionUpdate.bind(e),e.offPositionUpdate=s.prototype.offPositionUpdate.bind(e)}clearTransformListeners(){this.onRotationUpdates&&(this.onRotationUpdates.length=0,delete this.onRotationUpdates,this.rebindPositionUpdate&&this.rebindPositionUpdate()),this.onPositionUpdates&&(this.onPositionUpdates.length=0,delete this.onPositionUpdates,this.rebindRotationUpdate&&this.rebindRotationUpdate())}onPositionUpdate(e){this.onPositionUpdates?this.onPositionUpdates.push(e):(this.onPositionUpdates=[e],this.rebindPositionUpdate&&this.rebindPositionUpdate())}offPositionUpdate(e){for(let t=0;t<this.onPositionUpdates.length;t++)if(this.onPositionUpdates[t]===e&&(this.onPositionUpdates.splice(t,1),!this.onPositionUpdates.length))return delete this.onPositionUpdates,void(this.rebindPositionUpdate&&this.rebindPositionUpdate())}onRotationUpdate(e){this.onRotationUpdates?this.onRotationUpdates.push(e):(this.onRotationUpdates=[e],this.rebindRotationUpdate&&this.rebindRotationUpdate())}offRotationUpdate(e){for(let t=0;t<this.onRotationUpdates.length;t++)if(this.onRotationUpdates[t]===e)return this.onRotationUpdates.splice(t,1),this.onRotationUpdates.length||(delete this.onRotationUpdates,this.rebindRotationUpdate&&this.rebindRotationUpdate()),!0;return!1}}t.TransformEventMixin=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0),r=i(8);class a{constructor(e){this.plugins=[],this.lastCollisions=[],this.collisionHandlersMap={},this.endCollisionHandlersMap={},this.startCollisionHandlersMap={},this.seqToTag={},this.rectLayerLookup=[],this.polygonLayerLookup=[],this.pointLayerLookup=[],this.circleLayerLookup=[],this.lineLayerLookup=[],this.chunkColliderLookup={},this.nextTagSeq=0,this.cachedTypeExecution={},this.cacheTypeOnNextRun={},this.cacheCount=0,e&&this.setCollisionSystem(e)}getCollidersWithTags(e){if(!this.collisionSystem)throw new Error("No collision system implemented to make query.");return this.collisionSystem.getCollidersWithTags(e)}onAfterCollisions(e){this.onAfterHandlers?this.onAfterHandlers.push(e):this.onAfterHandlers=[e]}onBeforeCollisions(e){this.onBeforeHandlers?this.onBeforeHandlers.push(e):this.onBeforeHandlers=[e]}offAfterCollisions(e){let t=this.onAfterHandlers.length;for(;t--;)if(this.onAfterHandlers[t]===e)return this.onAfterHandlers.splice(t,1),this.onAfterHandlers.length||delete this.onAfterHandlers,!0;return!1}offBeforeCollisions(e){let t=this.onBeforeHandlers.length;for(;t--;)if(this.onBeforeHandlers[t]===e)return this.onBeforeHandlers.splice(t,1),this.onBeforeHandlers.length||delete this.onBeforeHandlers,!0;return!1}onAddedCollider(e,t){if(t){this.addedTagHandlers||(this.addedTagHandlers={});for(let i=0;i<t.length;i++)this.addedTagHandlers[t[i]]?this.addedTagHandlers[t[i]].push(e):this.addedTagHandlers[t[i]]=[e]}else this.addedColliderHandlers?this.addedColliderHandlers.push(e):this.addedColliderHandlers=[e]}onRemovedCollider(e,t){if(t){this.removedTagHandlers||(this.removedTagHandlers={});for(let i=0;i<t.length;i++)this.removedTagHandlers[t[i]]?this.removedTagHandlers[t[i]].push(e):this.removedTagHandlers[t[i]]=[e]}else this.removedColliderHandlers?this.removedColliderHandlers.push(e):this.removedColliderHandlers=[e]}offAddedCollider(e,t){if(t){for(let i=0;i<t.length;i++){const s=this.addedTagHandlers[t[i]];let n=s.length;for(;n--;)s[n]===e&&this.addedTagHandlers[t[i]].splice(n,1);s.length||delete this.addedTagHandlers[t[i]]}Object.keys(this.addedTagHandlers).length||delete this.addedTagHandlers}else for(let t=0;t<this.addedColliderHandlers.length;t++)if(this.addedColliderHandlers[t]===e)return this.addedColliderHandlers.splice(t,1),this.addedColliderHandlers.length||delete this.addedColliderHandlers,!0;return!1}offRemovedCollider(e,t){if(t){for(let i=0;i<t.length;i++){const s=this.removedTagHandlers[t[i]];let n=s.length;for(;n--;)s[n]===e&&s.splice(n,1);s.length||delete this.removedTagHandlers[t[i]]}return Object.keys(this.removedTagHandlers).length||delete this.removedTagHandlers,!0}for(let t=0;t<this.removedColliderHandlers.length;t++)if(this.removedColliderHandlers[t]===e)return this.removedColliderHandlers.splice(t,1),this.removedColliderHandlers.length||delete this.removedColliderHandlers,!0;return!1}_onAddedTag(e,t){this.collisionSystem.onAddedTagToCollider(e,t)}_onRemovedTag(e,t){this.collisionSystem.onRemovedTagFromCollider(e,t)}addChunkColliders(e){for(let t=0;t<e.layers.length;t++){const i=e.layers[t];if(!i||!i.colliders)continue;const s=i.colliders;s.rects&&this.addCollidersToLookup(t,this.rectLayerLookup,s.rects),s.polygons&&this.addCollidersToLookup(t,this.polygonLayerLookup,s.polygons),s.points&&this.addCollidersToLookup(t,this.pointLayerLookup,s.points),s.circles&&this.addCollidersToLookup(t,this.circleLayerLookup,s.circles),s.lines&&this.addCollidersToLookup(t,this.lineLayerLookup,s.lines)}}addCollidersToLookup(e,t,i){let a=t[e];a||(a={},t[e]=a);for(let t=0;t<i.length;t++){const o=i[t];if(a[o.id])a[o.id]++;else{a[o.id]=1;const t=o.shapeType===n.RuntimeColliderShape.POLYGON?new r.PolygonCollider(e,o.shapeData,o.tags,o.dynamic,this,o.props):new s.Collider(e,o.shapeType,o.shapeData,o.tags,o.dynamic,this,o.props);this.initCollider(t),this.chunkColliderLookup[`${o.id}_${o.shapeType}_${e}`]=t}}}initCollider(e){if(e.dynamic?this.collisionSystem.onAddedDynamicCollider(e):this.collisionSystem.onAddedStaticCollider(e),e.parent){if(e.shapeType===n.RuntimeColliderShape.POLYGON)for(let t=0;t<e.lines.length;t++)this.initCollider(e.lines[t])}else{if(e.tags){const t=[],i=[],s=[],n=[];for(let r=0;r<e.tags.length;r++){const a=e.tags[r];this.pluginInitHandlers&&this.pluginInitHandlers[a]&&this.doTagHandlers(a,e,this.pluginInitHandlers,s),this.pluginTagAInitHandlers&&this.pluginTagAInitHandlers[a]&&this.doTagHandlers(a,e,this.pluginTagAInitHandlers,i),this.pluginTagBInitHandlers&&this.pluginTagBInitHandlers[a]&&this.doTagHandlers(a,e,this.pluginTagBInitHandlers,t),this.addedTagHandlers&&this.addedTagHandlers[a]&&this.doTagHandlers(a,e,this.addedTagHandlers,n)}}if(this.addedColliderHandlers)for(let t=0;t<this.addedColliderHandlers.length;t++)this.addedColliderHandlers[t](e)}}removeCollider(e){if(e.dynamic?this.collisionSystem.onRemovedDynamicCollider(e):this.collisionSystem.onRemovedStaticCollider(e),!e.parent){if(e.tags){const t=[],i=[],s=[],n=[];for(let r=0;r<e.tags.length;r++){const a=e.tags[r];this.pluginRemoveHandlers&&this.pluginRemoveHandlers[a]&&this.doTagHandlers(a,e,this.pluginRemoveHandlers,s),this.pluginTagARemoveHandlers&&this.pluginTagARemoveHandlers[a]&&this.doTagHandlers(a,e,this.pluginTagARemoveHandlers,i),this.pluginTagBRemoveHandlers&&this.pluginTagBRemoveHandlers[a]&&this.doTagHandlers(a,e,this.pluginTagBRemoveHandlers,t),this.removedTagHandlers&&this.removedTagHandlers[a]&&this.doTagHandlers(a,e,this.removedTagHandlers,n)}}if(this.removedColliderHandlers)for(let t=0;t<this.removedColliderHandlers.length;t++)this.removedColliderHandlers[t](e)}e.clearListeners()}static ResolveColliderType(e){if(Array.isArray(e.shapeData))return 2===e.shapeData.length?n.RuntimeColliderShape.LINE:n.RuntimeColliderShape.POLYGON;if(e.shapeData.hasOwnProperty("x"))return e.shapeData.hasOwnProperty("r")?n.RuntimeColliderShape.CIRCLE:e.shapeData.hasOwnProperty("w")?n.RuntimeColliderShape.RECT:n.RuntimeColliderShape.POINT;throw new Error(`Invalid shape data found on collider ${e}`)}doTagHandlers(e,t,i,s){const n=i[e];if(n)for(let e=0;e<n.length;e++)s.includes(n[e])||(s.push(n[e]),n[e](t))}removeChunkColliders(e){for(let t=0;t<e.layers.length;t++){const i=e.layers[t];if(!i||!i.colliders)continue;const s=i.colliders;s.rects&&this.removeColliderFromLookup(t,this.rectLayerLookup[t],s.rects),s.polygons&&this.removeColliderFromLookup(t,this.polygonLayerLookup[t],s.polygons),s.points&&this.removeColliderFromLookup(t,this.pointLayerLookup[t],s.points),s.circles&&this.removeColliderFromLookup(t,this.circleLayerLookup[t],s.circles),s.lines&&this.removeColliderFromLookup(t,this.lineLayerLookup[t],s.lines)}}removeColliderFromLookup(e,t,i){for(let s=0;s<i.length;s++){const n=i[s];if(!(n.id in t))throw new Error("The shape id should be in lookup at this point.");const r=`${n.id}_${n.shapeType}_${e}`;if(!--t[n.id]){const e=this.chunkColliderLookup[r];if(!e)throw new Error("Should have found collider");!e.parent&&this.removeCollider(e),delete t[n.id],delete this.chunkColliderLookup[r]}}}reset(){const e=this.collisionSystem.getAllColliders();for(let t=0;t<e.length;t++)e[t].parent||this.removeCollider(e[t]);this.collisionSystem.onClear()}initMap(e){this.collisionSystem.onInit(e.mapW,e.mapH);const t=e.layerTileLayerOrder.length;this.rectLayerLookup.length=t,this.pointLayerLookup.length=t,this.polygonLayerLookup.length=t,this.circleLayerLookup.length=t,this.lineLayerLookup.length=t;for(let e=0;e<t;e++)delete this.rectLayerLookup[e],delete this.polygonLayerLookup[e],delete this.pointLayerLookup[e],delete this.circleLayerLookup[e],delete this.lineLayerLookup[e]}init(e){let t=0;Object.keys(e).forEach(i=>{this.seqToTag[i]=e[i],t=Math.max(parseInt(i),t)}),this.nextTagSeq=t}setCollisionSystem(e){const t=this.collisionSystem;this.collisionSystem=e,e?(this.addColliderCouple=this.collisionSystem.onAddedColliderCouple.bind(this.collisionSystem),this.removeColliderCouple=this.collisionSystem.onRemovedColliderCouple.bind(this.collisionSystem)):t&&(this.addColliderCouple=a.prototype.addColliderCouple.bind(this),this.removeColliderCouple=a.prototype.removeColliderCouple.bind(this))}update(e){const t=[...this.lastCollisions];if(this.onBeforeHandlers)for(let e=0;e<this.onBeforeHandlers.length;e++)this.onBeforeHandlers[e](t);const i=this.collisionSystem.getCollisions(e);if(this.lastCollisions.length=0,i.length)for(let e=0;e<i.length;e+=2){const s=i[e],n=i[e+1];let r=!1;for(let e=0;e<t.length;e+=2)if(t[e]===s&&t[e+1]===n||t[e]===n&&t[e+1]===s){t.splice(e,2),r=!0;break}if(this.lastCollisions.push(s,n),r){if(this.doCollisionHandlerIteration(s,n,this.collisionHandlersMap),s.onListeners)for(let e=0;e<s.onListeners.length;e++)s.onListeners[e](n);if(n.onListeners)for(let e=0;e<n.onListeners.length;e++)n.onListeners[e](s)}else{if(this.doCollisionHandlerIteration(s,n,this.startCollisionHandlersMap),s.startListeners)for(let e=0;e<s.startListeners.length;e++)s.startListeners[e](n);if(n.startListeners)for(let e=0;e<n.startListeners.length;e++)n.startListeners[e](s)}}if(t.length)for(let e=0;e<t.length;e+=2){const i=t[e],s=t[e+1];if(this.doCollisionHandlerIteration(i,s,this.endCollisionHandlersMap),i.endListeners)for(let e=0;e<i.endListeners.length;e++)i.endListeners[e](s);if(s.endListeners)for(let e=0;e<s.endListeners.length;e++)s.endListeners[e](i)}if(this.onAfterHandlers)for(let e=0;e<this.onAfterHandlers.length;e++)this.onAfterHandlers[e](this.lastCollisions)}removePlugin(e){for(let t=0;t<this.plugins.length;t++){if(this.plugins[t]===e||this.plugins[t]._f&&this.plugins[t]._f===e){const e=this.plugins[t];if(this.plugins.splice(t,1),e.onBeforeCollisions&&this.offBeforeCollisions(e.onBeforeCollisions),e.onAfterCollisions&&this.offAfterCollisions(e.onAfterCollisions),this.plugins.length){const t=(t,i)=>{if(e.tagBs&&e.tagBs.length)for(let s=0;s<e.tagAs.length;s++){const n=e.tagAs[s],r=i[n].couples;for(let i=0;i<e.tagBs.length;i++){const s=r[e.tagBs[i]];for(let e=0;e<s.length;e++)if(s[e]===t){s.splice(e,1);break}s.length||delete r[e.tagBs[i]]}0===Object.keys(r).length&&(delete i[n].couples,i[n].singles||delete i[n])}else for(let s=0;s<e.tagAs.length;s++){const n=e.tagAs[s],r=i[n].singles;for(let e=0;e<r.length;e++)if(r[e]===t){r.splice(e,1);break}r.length||(delete i[n].singles,i[n].couples||delete i[n])}};e.onCollisionStart&&t(e.onCollisionStart,this.startCollisionHandlersMap),e.onCollision&&t(e.onCollision,this.collisionHandlersMap),e.onCollisionEnd&&t(e.onCollisionEnd,this.endCollisionHandlersMap);const i=(e,t,i)=>{let s=!1;return e.forEach(e=>{const n=i[e];for(let e=0;e<n.length;e++)if(n[e]===t){n.splice(e,1);break}n.length||(s=!0,delete i[e])}),s?Object.keys(i).length:1};if(e.onAddedColliderWithTagA&&!i(e.tagAs,e.onAddedColliderWithTagA,this.pluginTagAInitHandlers)&&delete this.pluginTagAInitHandlers,e.onAddedColliderWithTagB&&!i(e.tagBs,e.onAddedColliderWithTagB,this.pluginTagBInitHandlers)&&delete this.pluginTagBInitHandlers,e.onColliderAddedTagA&&!i(e.tagAs,e.onAddedColliderWithTagA,this.pluginColliderAddedTagAHandlers)&&delete this.pluginColliderAddedTagAHandlers,e.onColliderAddedTagB&&!i(e.tagBs,e.onColliderAddedTagB,this.pluginColliderAddedTagBHandlers)&&delete this.pluginColliderAddedTagBHandlers,e.onColliderRemovedTagA&&!i(e.tagAs,e.onColliderRemovedTagA,this.pluginColliderRemovedTagAHandlers)&&delete this.pluginColliderRemovedTagAHandlers,e.onColliderRemovedTagB&&!i(e.tagBs,e.onColliderRemovedTagB,this.pluginColliderRemovedTagBHandlers)&&delete this.pluginColliderRemovedTagBHandlers,e.onAdded)if(e.tagAs&&e.tagAs.length)if(i(e.tagAs,e.onAdded,this.pluginInitHandlers)){if(e.tagBs){i(e.tagBs.filter(t=>!e.tagAs.includes(t)),e.onAdded,this.pluginInitHandlers)||delete this.pluginInitHandlers}}else delete this.pluginInitHandlers;else this.offAddedCollider(e.onAdded);if(e.onRemovedTagA&&!i(e.tagAs,e.onRemovedTagA,this.pluginTagARemoveHandlers)&&delete this.pluginTagARemoveHandlers,e.onRemovedTagB&&!i(e.tagBs,e.onRemovedTagB,this.pluginTagBRemoveHandlers)&&delete this.pluginTagBRemoveHandlers,e.onRemoved)if(e.tagAs&&e.tagAs.length)if(i(e.tagAs,e.onRemoved,this.pluginRemoveHandlers)){if(e.tagBs){i(e.tagBs.filter(t=>!e.tagAs.includes(t)),e.onRemoved,this.pluginRemoveHandlers)||delete this.pluginRemoveHandlers}}else delete this.pluginRemoveHandlers;else this.offRemovedCollider(e.onRemoved);if(e.tagAs&&e.tagBs)for(let t=0;t<e.tagAs.length;t++)for(let i=0;i<e.tagBs.length;i++)this.collisionSystem.onRemovedColliderCouple(e.tagAs[t],e.tagBs[i])}else{for(let e in this.startCollisionHandlersMap)this.startCollisionHandlersMap.hasOwnProperty(e)&&delete this.startCollisionHandlersMap[e];for(let e in this.collisionHandlersMap)this.collisionHandlersMap.hasOwnProperty(e)&&delete this.collisionHandlersMap[e];for(let e in this.endCollisionHandlersMap)this.endCollisionHandlersMap.hasOwnProperty(e)&&delete this.endCollisionHandlersMap[e]}return!0}}return this.cacheTypeOnNextRun={},this.cachedTypeExecution={},this.reapplyPlugins(),!1}addColliderCouple(e,t){throw new Error("No collision system is being used.")}removeColliderCouple(e,t){throw new Error("No collision system is being used.")}addColliderCouples(e){for(let t=0;t<e.length;t++)this.addColliderCouple(e[t][0],e[t][1])}removeColliderCouples(e){for(let t=0;t<e.length;t++)this.removeColliderCouple(e[t][0],e[t][1])}addPlugin(e,t,i){if(!this.validatePlugin(e))return;e.init&&e.init(t,i),this.plugins.push(e),e.onCollisionStart&&this.addToPluginMap(e,e.onCollisionStart,this.startCollisionHandlersMap),e.onCollision&&this.addToPluginMap(e,e.onCollision,this.collisionHandlersMap),e.onCollisionEnd&&this.addToPluginMap(e,e.onCollisionEnd,this.endCollisionHandlersMap),e.onBeforeCollisions&&this.onBeforeCollisions(e.onBeforeCollisions),e.onAfterCollisions&&this.onAfterCollisions(e.onAfterCollisions);const s=(e,t,i)=>{e.forEach(e=>{i[e]?i[e].push(t):i[e]=[t]})};if(e.onColliderAddedTagA&&(this.pluginColliderAddedTagAHandlers||(this.pluginColliderAddedTagAHandlers={}),s(e.tagAs,e.onColliderAddedTagA,this.pluginColliderAddedTagAHandlers)),e.onColliderAddedTagB&&(this.pluginColliderAddedTagBHandlers||(this.pluginColliderAddedTagBHandlers={}),s(e.tagBs,e.onColliderAddedTagB,this.pluginColliderAddedTagBHandlers)),e.onColliderRemovedTagA&&(this.pluginColliderRemovedTagAHandlers||(this.pluginColliderRemovedTagAHandlers={}),s(e.tagAs,e.onColliderAddedTagA,this.pluginColliderRemovedTagAHandlers)),e.onColliderRemovedTagB&&(this.pluginColliderRemovedTagBHandlers||(this.pluginColliderRemovedTagBHandlers={}),s(e.tagBs,e.onColliderAddedTagB,this.pluginColliderRemovedTagBHandlers)),e.onAddedColliderWithTagA&&(this.pluginTagAInitHandlers||(this.pluginTagAInitHandlers={}),s(e.tagAs,e.onAddedColliderWithTagA,this.pluginTagAInitHandlers)),e.onAddedColliderWithTagB&&(this.pluginTagBInitHandlers||(this.pluginTagBInitHandlers={}),s(e.tagBs,e.onAddedColliderWithTagB,this.pluginTagBInitHandlers)),e.onAdded)if(e.tagAs&&e.tagAs.length){this.pluginInitHandlers||(this.pluginInitHandlers={}),s(e.tagAs&&e.tagBs?[...e.tagAs,...e.tagBs].filter((e,t,i)=>i.indexOf(e)===t):e.tagAs,e.onAdded,this.pluginInitHandlers)}else this.onAddedCollider(e.onAdded);if(e.onRemovedTagA&&(this.pluginTagARemoveHandlers||(this.pluginTagARemoveHandlers={}),s(e.tagAs,e.onRemovedTagA,this.pluginTagARemoveHandlers)),e.onRemovedTagB&&(this.pluginTagBRemoveHandlers||(this.pluginTagBRemoveHandlers={}),s(e.tagBs,e.onRemovedTagB,this.pluginTagBRemoveHandlers)),e.onRemoved)if(e.tagAs&&e.tagAs.length){this.pluginRemoveHandlers||(this.pluginRemoveHandlers={}),s(e.tagAs&&e.tagBs?[...e.tagAs,...e.tagBs].filter((e,t,i)=>i.indexOf(e)===t):e.tagAs,e.onRemoved,this.pluginRemoveHandlers)}else this.onRemovedCollider(e.onRemoved);if(this.collisionSystem){if(e.tagAs&&e.tagBs)for(let t=0;t<e.tagAs.length;t++)for(let i=0;i<e.tagBs.length;i++)this.collisionSystem.onAddedColliderCouple(e.tagAs[t],e.tagBs[i]);this.reapplyPlugins()}}addToPluginMap(e,t,i){if(e.tagBs&&e.tagBs.length)for(let s=0;s<e.tagAs.length;s++){const n=e.tagAs[s];i[n]?i[n].couples||(i[n].couples={}):i[n]={couples:{}};for(let s=0;s<e.tagBs.length;s++){const r=e.tagBs[s];i[n].couples[r]?i[n].couples[r].push(t):i[n].couples[r]=[t]}}else for(let s=0;s<e.tagAs.length;s++){const n=e.tagAs[s];i[n]?i[n].singles?i[n].singles.push(t):i[n].singles=[t]:i[n]={singles:[t]}}}validatePlugin(e){if(this.plugins.includes(e))return console.error("plugin validation error, collision plugin:",e.name,"already exists."),!1;if(!(e.onCollision||e.onCollisionStart||e.onCollisionEnd||e.onAddedColliderWithTagB||e.onAddedColliderWithTagA||e.onRemovedTagA||e.onRemovedTagB||e.onRemoved||e.onAdded))return console.error("plugin validation error, collision plugin:",e.name,"does not implement any of the collision hooks: onCollision, onCollisionStart, onCollisionEnd, onAdded, onRemoved, onAddedColliderWithTagA, onAddedColliderWithTagB, onRemovedTagA, or onRemovedTabB"),!1;if(!e.tagAs||!e.tagAs.length){if(e.onAddedColliderWithTagA||e.onRemovedTagA)return console.error("plugin validation error, collision plugin:",e.name,'needs a "tagAs" property with an array of at least 1 tag since youre using onAddedColliderWithTagA/onRemovedTagA'),!1;if(e.onCollision||e.onCollisionStart||e.onCollisionEnd)return console.error("plugin validation error, collision plugin:",e.name,'needs at least "tagAs" property with an array of at least 1 tag since youre using onCollision, onCollisionStart, onCollisionEnd. The only method you can use without tags are "init", "onAdded", and "onRemoved"'),!1}if(!e.tagBs||!e.tagBs.length){if(e.onAddedColliderWithTagB)return console.error("plugin validation error, collision plugin:",e.name,'invalid onAddedColliderWithTagB handler, the plugin needs a "tagBs" property with an array of at least 1 tag'),!1;if(e.onRemovedTagB)return console.error("plugin validation error, collision plugin:",e.name,'invalid onRemovedTagB handler, the plugin needs a "tagBs" property with an array of at least 1 tag'),!1}return!0}reapplyPlugins(){this.plugins.length?this.doCollisionHandlerIteration=this.iterateCollisionTagHandlers.bind(this):this.doCollisionHandlerIteration=()=>{}}iterateCollisionTagHandlers(e,t,i){const s=performance.now(),n=e.tags,r=t.tags;let a=[],o=[],h=[];for(let s=0;s<n.length;s++){const l=n[s],d=i[l];if(d){if(d.couples)for(let i=0;i<r.length;i++)d.couples[r[i]]&&d.couples[r[i]].forEach(i=>{o.includes(i)||(i(e,t),o.push(i))});if(d.singles)for(let i=0;i<d.singles.length;i++){r.includes(l)&&a.push(l);const s=d.singles[i];h.includes(s)||(s(e,t),h.push(s))}}}h.length=0,o.length=0;for(let s=0;s<r.length;s++){const l=r[s],d=i[l];if(d){if(d.couples)for(let i=0;i<n.length;i++)n[i]!==l&&d.couples[n[i]]&&d.couples[n[i]].forEach(i=>{o.includes(i)||(i(t,e),o.push(i))});if(d.singles&&!a.includes(l))for(let i=0;i<d.singles.length;i++){const s=d.singles[i];h.includes(s)||(s(t,e),h.push(s))}}}performance.now()}}t.CollisionManager=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0);class r extends s.Collider{constructor(e,t,i,r,a,o,h,l,d){super(e,n.RuntimeColliderShape.POLYGON,t,i,r,a,o,h,l),this.lines=new Array(this.shapeData.length);for(let e=0;e<this.lines.length;e++){const t=this.shapeData[e],i=e===this.shapeData.length-1?this.shapeData[0]:this.shapeData[e+1];this.lines[e]=new s.Collider(this.layer,n.RuntimeColliderShape.LINE,[t,i],this.tags,this.dynamic,null,o,h,null,this)}}doRotation(e,t){for(let i=0;i<this.shapeData.length;i++){const s=this.shapeData[i].x,n=this.shapeData[i].y,r=e,a=Math.cos(r),o=Math.sin(r),h=a*(s-t.x)-o*(n-t.y)+t.x,l=o*(s-t.x)+a*(n-t.y)+t.y;this.shapeData[i].x=h,this.shapeData[i].y=l}}onLineCollisionStart(e){if(this.lineStartListeners)this.lineStartListeners.push(e);else{this.lineStartListeners=[e];for(let e=0;e<this.lines.length;e++){if(this.lines[e].startListeners)throw new Error("You can not have listeners on polygon children colliders and use the parent onLineCollision");this.lines[e].onCollisionStart(t=>{for(let i=0;i<this.lineStartListeners.length;i++)this.lineStartListeners[i](this.lines[e],t)})}}}onLineCollision(e){if(this.lineListeners)this.lineListeners.push(e);else{this.lineListeners=[e];for(let e=0;e<this.lines.length;e++){if(this.lines[e].onListeners)throw new Error("You can not have listeners on polygon children colliders and use the parent onLineCollision");this.lines[e].onCollision(t=>{for(let i=0;i<this.lineListeners.length;i++)this.lineListeners[i](this.lines[e],t)})}}}onLineCollisionEnd(e){if(this.lineEndListeners)this.lineEndListeners.push(e);else{this.lineEndListeners=[e];for(let e=0;e<this.lines.length;e++){if(this.lines[e].endListeners)throw new Error("You can not have listeners on polygon children colliders and use the parent onLineCollision");this.lines[e].onCollisionEnd(t=>{for(let i=0;i<this.lineEndListeners.length;i++)this.lineEndListeners[i](this.lines[e],t)})}}}clearListeners(){super.clearListeners(),this.lines.forEach(e=>{e.clearListeners()})}offLineCollision(e){this.lineListeners=this.removeFromArray(e,this.lineListeners),this.lineListeners||(this.lines.forEach(e=>{e.onListeners.length=0,delete e.onListeners}),delete this.lineListeners)}offLineCollisionEnd(e){this.lineEndListeners=this.removeFromArray(e,this.lineEndListeners),this.lineEndListeners||(this.lines.forEach(e=>{e.endListeners.length=0,delete e.endListeners}),delete this.lineEndListeners)}offLineCollisionStart(e){this.lineStartListeners=this.removeFromArray(e,this.lineStartListeners),this.lineStartListeners||(this.lines.forEach(e=>{e.startListeners.length=0,delete e.startListeners}),delete this.startListeners)}setDefaultPivot(){let e,t,i,s;for(let n=0;n<this.shapeData.length;n++)e=this.shapeData[n].x<e||null==e?this.shapeData[n].x:e,t=this.shapeData[n].x>t||null==t?this.shapeData[n].x:t,i=this.shapeData[n].y<i||null==i?this.shapeData[n].y:i,s=this.shapeData[n].y>s||null==s?this.shapeData[n].y:s;this.setPivot((e+t)/2-e,(i+s)/2-i)}defaultPivotPoint(){let e,t,i,s;for(let n=0;n<this.shapeData.length;n++)e=this.shapeData[n].x<e||null==e?this.shapeData[n].x:e,t=this.shapeData[n].x>t||null==t?this.shapeData[n].x:t,i=this.shapeData[n].y<i||null==i?this.shapeData[n].y:i,s=this.shapeData[n].y>s||null==s?this.shapeData[n].y:s;return{x:(e+t)/2,y:(i+s)/2}}}t.PolygonCollider=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(20);t.AtlasFactory=(e,t)=>(e.type,new s.WebGlGameObjectAtlas(e,t))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AbstractTextureAtlas=class{constructor(e,t){this.lookup={},this.nextPositions=[],this.nextOpenRects=[],this.nextOpenPositions=[],this.nextPositionIndex=0,this.nextRectAtlasIndex=0,this.nextOpenIndex=0,this.atlasses=[],this.subChunkW=128,this.subChunkH=128,this.openRects=[],this.maxTextureSize=e>=2048?e-e%2048:e>=1024?e-e%1024:e>=512?e-e%512:256,this.renderer=t}initForMap(e,t,i){this.clear(),this.subChunkW=128|e,this.subChunkH=128|t,this.textureStartX=this.maxTextureSize-this.subChunkW,this.textureStartY=this.maxTextureSize-this.subChunkH,this.atlasses.push(PIXI.RenderTexture.create(this.maxTextureSize,this.maxTextureSize)),this.nextPositionIndex=0;for(let e=this.textureStartX;e>=0;e-=this.subChunkH)for(let t=this.textureStartX;t>=0;t-=this.subChunkW)this.nextPositions.push([t,e])}mergeAllLayerChunks(e){return new Array(e.length).fill(1).map((t,i)=>{if(e[i]&&e[i].length&&!e[i].every(e=>!e)){let t=0,s=0;const n=new PIXI.Container;e[i].forEach(e=>{e&&(t=Math.max(e.x+e.width,t),s=Math.max(e.y+e.height,s),n.addChild(e))});const r=PIXI.RenderTexture.create(t,s);return this.renderer.render(n,r),r}return null})}getMinTexturesForMap(e,t,i){const s=[];Math.ceil(e/this.maxTextureSize),Math.ceil(t/this.maxTextureSize);return i.forEach(e=>{s.push([]),e.forEach(e=>{})}),s}addOpenRect(e,t,i){}addOpenSpot(e,t,i,s,n){this.nextOpenRects.push({aIdx:e,x:t,y:i,w:s,h:n})}clear(){Object.keys(this.lookup).forEach(e=>{delete this.lookup[e]}),this.nextPositionIndex=0,this.nextOpenIndex=0,this.nextPositions.length=0,this.nextOpenPositions.length=0,this.nextOpenRects.length=0,this.atlasses.forEach(e=>{e.destroy(!0)}),this.atlasses.length=0}addParentChunkLayerGroup(e,t){}addTileToLayerGroup(e,t,i,s){}addSubChunkLayerGroup(e,t){if(e in this.lookup)return this.lookup[e].texture;const{x:i,y:s,w:n,h:r,aIdx:a}=this.getNextRect(t.width,t.height),o=new PIXI.Sprite(t);o.setTransform(i,s),this.renderer.render(o,this.atlasses[a],!1);const h=new PIXI.Texture(this.atlasses[a].baseTexture,new PIXI.Rectangle(i,s,n,r));return this.lookup[e]={texture:h,x:i,y:s,w:n,h:r,aIdx:a},h}renderSubChunkLayerGroup(e,t,i=!1){if(e in this.lookup)return this.lookup[e].texture;i&&console.error("layer width/height:",{width:t.width,height:t.height});const{x:s,y:n}=t.getLocalBounds(),{x:r,y:a,w:o,h:h,aIdx:l}=this.getNextRect(t.width,t.height);t.setTransform(r-s,a-n),this.renderer.render(t,this.atlasses[l],!1,null,!1);const d=new PIXI.Texture(this.atlasses[l].baseTexture,new PIXI.Rectangle(r,a,o,h));return this.lookup[e]={texture:d,x:r,y:a,w:o,h:h,aIdx:l},d}getNextRect(e,t){let i=this.nextOpenRects[0],s=0;for(;i&&(i.w<e||i.h<t);)i=this.nextOpenRects[++s];const n=i=>{const s=i.aIdx,n=i.w-e,r=i.h-t;n>=this.subChunkW&&this.nextOpenRects.push({aIdx:s,x:i.x+e,y:i.y,w:n,h:t}),r>=this.subChunkH&&this.nextOpenRects.push({aIdx:s,x:i.x,y:i.y+t,w:e,h:r}),n>=this.subChunkW&&r>=this.subChunkH&&this.nextOpenRects.push({aIdx:s,x:i.x+e,y:i.y+t,w:n,h:r})};if(i)return this.nextOpenRects.splice(s,1),n(i),{aIdx:i.aIdx,x:i.x,y:i.y,w:e,h:t};this.atlasses.push(PIXI.RenderTexture.create(this.maxTextureSize,this.maxTextureSize));const r=this.atlasses.length-1;return n({x:0,y:0,w:this.maxTextureSize,h:this.maxTextureSize,aIdx:r}),{aIdx:r,x:0,y:0,w:e,h:t}}getNextPosition(){let e=this.nextPositions.pop(),t=this.nextPositionIndex;if(e)return[...e,t];if(e=this.nextOpenPositions.pop(),e)return e;this.atlasses.push(PIXI.RenderTexture.create(this.maxTextureSize,this.maxTextureSize)),this.nextPositionIndex=this.atlasses.length-1;for(let e=this.textureStartX;e>=0;e-=this.subChunkH)for(let t=this.textureStartX;t>=0;t-=this.subChunkW)this.nextPositions.push([t,e]);return[...this.nextPositions.pop(),this.nextPositionIndex]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.GET_SECTION_DATA=0]="GET_SECTION_DATA",e[e.REQUEST_AND_SAVE_MAP_CHUNKS=1]="REQUEST_AND_SAVE_MAP_CHUNKS",e[e.REQUEST_AND_SAVE_SINGLE_MAP_CHUNK=2]="REQUEST_AND_SAVE_SINGLE_MAP_CHUNK",e[e.REQUEST_AND_SAVE_ALL_MAP_CHUNKS=3]="REQUEST_AND_SAVE_ALL_MAP_CHUNKS",e[e.INIT_LOADER=4]="INIT_LOADER",e[e.INIT_MAP=5]="INIT_MAP"}(t.Messages||(t.Messages={})),function(e){e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR"}(t.ResultCodes||(t.ResultCodes={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(13);t.default=s.default},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(14),r=i(15),a=i(17),o=i(19),h=i(1),l=i(0),d=i(24),u=i(25),c=i(34),p=i(35),g=i(11),f=i(2);t.MapCollider=f.Collider;const m=i(7),y=i(37),C=i(4);t.GameObject=C.GameObject;const x=i(39),w=i(40);let v=.025;let T,b=[],S=!1;class k{constructor(e){this.mapLoadCount=0,this.cachedMapMetaData={},this.awaitingCollisionEnd=[],this.mapsInitData=[],this.initialized=!1,this.chunkIteration=1,this.elapsed=0,this.elapsedCol=0,this.plugins=[],this.collisionPlugins=[],this.collisionHandlers=[],this.lastCollisions=[],this.seqToTag={},this.seqToProp={},this._isLoadingMap=!1,this._onMapCreatedListeners=[],this._onMapDestroyedListeners=[],this._onBeforeMapDestroyedListeners=[],this.bufferedObjects=[],this.ColliderShapes={RECT:l.RuntimeColliderShape.RECT,POLYGON:l.RuntimeColliderShape.POLYGON,POINT:l.RuntimeColliderShape.POINT,CIRCLE:l.RuntimeColliderShape.CIRCLE,LINE:l.RuntimeColliderShape.LINE,ELIPSE:l.RuntimeColliderShape.ELIPSE},this.basePath=e,this.mainStage=new PIXI.Container,this.gameStage=new PIXI.Container,this.interfaceStage=new PIXI.Container,this.mainStage.addChild(this.gameStage),this.mainStage.addChild(this.interfaceStage),this.plugins=[],this.collisionSystem=T||new y.SpatialGrid,this.collisionManager=new m.CollisionManager(this.collisionSystem),this.getCollidersWithTags=this.collisionManager.getCollidersWithTags.bind(this.collisionManager),this.updateCollisions=this.collisionManager.update.bind(this.collisionManager),this.onAddedCollider=this.collisionManager.onAddedCollider.bind(this.collisionManager),this.onRemovedCollider=this.collisionManager.onRemovedCollider.bind(this.collisionManager),this.offAddedCollider=this.collisionManager.onAddedCollider.bind(this.collisionManager),this.offRemovedCollider=this.collisionManager.onRemovedCollider.bind(this.collisionManager),this.addColliderCouple=this.collisionManager.addColliderCouple.bind(this.collisionManager),this.removeColliderCouple=this.collisionManager.removeColliderCouple.bind(this.collisionManager),this.addColliderCouples=this.collisionManager.addColliderCouples.bind(this.collisionManager),this.removeColliderCouples=this.collisionManager.removeColliderCouples.bind(this.collisionManager),this.onAfterCollisions=this.collisionManager.onAfterCollisions.bind(this.collisionManager),this.onBeforeCollisions=this.collisionManager.onBeforeCollisions.bind(this.collisionManager),this.offAfterCollisions=this.collisionManager.offAfterCollisions.bind(this.collisionManager),this.offBeforeCollisions=this.collisionManager.offBeforeCollisions.bind(this.collisionManager),this.gameObjectManager=new o.GameObjectManager(this.basePath,this.collisionManager),this.addGameObject=this.gameObjectManager.addGameObject.bind(this.gameObjectManager),this.getTexture=this.gameObjectManager.getTexture.bind(this.gameObjectManager),this.onTaggedGameObjectAdded=this.gameObjectManager.onTaggedGameObjectAdded.bind(this.gameObjectManager),this.onTaggedGameObjectRemoved=this.gameObjectManager.onTaggedGameObjectRemoved.bind(this.gameObjectManager),this.onGameObjectAdded=this.gameObjectManager.onGameObjectAdded.bind(this.gameObjectManager),this.onGameObjectRemoved=this.gameObjectManager.onGameObjectRemoved.bind(this.gameObjectManager),T=null}onMapDestroyed(e){this._onMapDestroyedListeners.push(e)}onBeforeMapDestroyed(e){this._onBeforeMapDestroyedListeners.push(e)}offBeforeMapDestroyed(e){this._onBeforeMapDestroyedListeners=this._onMapDestroyedListeners.filter(t=>t!==e)}onMapCreated(e){this._onMapCreatedListeners.push(e)}offMapCreated(e){this._onMapCreatedListeners=this._onMapCreatedListeners.filter(t=>t!==e)}offMapDestroyed(e){this._onMapDestroyedListeners=this._onMapDestroyedListeners.filter(t=>t!==e)}setCollisionSystem(e){this.collisionSystem=e}static useCollisionSystem(e){if(S)throw new Error("World was already initialized or initializing when we called use, to use a plugin with the static method, use world.setCollisionSystem if its already initialized.");T=e}static use(e,t){if(S)throw new Error("World was already initialized or initializing when we called use, to use a plugin with the static method, make sure to call World.use before you call World.init, otherwise use the returned world object's .use method and not the static one.");const i=k.ValidatePlugin(b,e);t&&(i.__opts=t),b.push(i)}use(e,t){switch(e=k.ValidatePlugin(this.plugins,e),this.plugins.push(e),e.type){case n.PluginTypes.Collision:this.collisionManager.addPlugin(e,this,t);break;case n.PluginTypes.GameObject:this.gameObjectManager.addPlugin(e,this,t);break;default:throw new Error(`Failed to install plugin: "${e.name}" All plugins need a type propety of 'collision', 'game_object', or 'map' but the type was set as: "${e.type}"`)}}static ValidatePlugin(e,t,i=!1){let s=i?1:0;const n="function"==typeof t?e.find(e=>e._f&&e._f===t):e.find(e=>e.type===t.type&&e.name===t.name);switch(n&&(s+=2),s){case 0:return"function"==typeof t?t():t;case 1:throw new Error(`Could not find plugin name ${t.name}`);case 2:throw new Error(`Already added plugin of type ${n.type} and name ${n.name}`);case 3:return n}}static addPlugin(e){k.use(e)}addPlugin(e){this.use(e)}static unusePlugin(e){if(S)throw new Error("Use the initialized World instance unusePlugin, not static methods.");{const t=b.indexOf(k.ValidatePlugin(b,e,!0));b.splice(t)}}unusePlugin(e){this.removePlugin(e)}removePlugin(e){(e=k.ValidatePlugin(this.plugins,e,!0)).type===n.PluginTypes.Collision?this.collisionManager.removePlugin(e):e.type===n.PluginTypes.GameObject&&this.gameObjectManager.removePlugin(e);const t=this.plugins.indexOf(e);if(t<0)throw new Error(`Could not find plugin ${e}`);this.plugins.splice(t,1),this.plugins.length}reapplyMapPlugins(){}static init(e,t,i){S=!0;const s={chunkVisibilityInterval:.1,camera:{},resolutionSettings:null};i=i?h.mergeOptions(i,s):s;const n=new k(e);for(let e=0;e<b.length;e++)n.use(b[e],b[e].__opts),delete b.opts;return b.length=0,"undefined"!=typeof window&&window.___plugins&&delete window.___plugins,n._init(e,t,i)}_init(e,t,i){return s(this,void 0,void 0,(function*(){if(this.collisionSystem!==this.collisionManager.collisionSystem&&this.collisionManager.setCollisionSystem(this.collisionSystem),this.renderer=t,i.chunkVisibilityInterval&&(v=i.chunkVisibilityInterval),this.flags={indexedDB:h.indexedDB_enabled(),localStorage:"undefined"!=typeof localStorage,webWorker:"undefined"!=typeof Worker,maxTextureSize:h.resolveMaxTextureSize(t),webGl:1===t.type},this.initialized)throw new Error("World already initialized.");const s=yield h.httpGetAsync(this.basePath+"/meta.json");this.worldMetaData=s;for(let e in s.propSeqToNameLookup)this.seqToProp[e]=s.propSeqToNameLookup[e];for(let e in s.colTags)this.seqToTag[s.colTags[e]]=e;if(this.collisionManager.reapplyPlugins(),this.reapplyMapPlugins(),this.collisionManager.init(this.seqToTag),this.mapsInitData=[],this.worldMetaData.maps.forEach((e,t)=>{e.forEach(e=>{this.mapsInitData.push(Object.assign(Object.assign({},e),{size:t}))})}),delete this.worldMetaData.maps,!s)throw new Error("Failed getting meta data on path"+this.basePath);if(this.flags.indexedDB&&(this.indexDbLoader=new d.Loader(`__ty__${s.world}`),yield this.indexDbLoader.initialize(),this.flags.webWorker)){if(this.chunkWorker=new p.ChunkLoaderWorker,(yield this.chunkWorker.initWorld(s.world,e+"/maps",s.tileSizeSeqLookup,this.seqToTag,this.seqToProp))!==g.ResultCodes.SUCCESS)throw new Error("didnt get success.")}return this.interfaceManager=new w.InterfaceManager(this.interfaceStage,this.renderer,this.indexDbLoader),this.addTextureToInterfaceAtlas=this.interfaceManager.addTextureToInterfaceAtlas.bind(this.interfaceManager),this.loadInterfaceTexture=this.interfaceManager.loadTexture.bind(this.interfaceManager),this.addInterfaceItem=this.interfaceManager.addInterfaceItem.bind(this.interfaceManager),this.removeInterfaceItem=this.interfaceManager.removeInterfaceItem.bind(this.interfaceManager),this.clearInterface=this.interfaceManager.clearInterface.bind(this.interfaceManager),yield this.gameObjectManager.init(this.renderer,this.gameStage,this.worldMetaData,this.flags,this.indexDbLoader),this.offTaggedGameObjectAdded=this.gameObjectManager.offTaggedGameObjectAdded.bind(this.gameObjectManager),this.offTaggedGameObjectRemoved=this.gameObjectManager.offTaggedGameObjectRemoved.bind(this.gameObjectManager),this.offGameObjectAdded=this.gameObjectManager.offGameObjectAdded.bind(this.gameObjectManager),this.offGameObjectRemoved=this.gameObjectManager.offGameObjectRemoved.bind(this.gameObjectManager),this.tileManager=new a.TileManager(this.basePath+"/tilesets",s.tilesets,s.tileSizeSeqLookup,this.flags,this.indexDbLoader),yield this.tileManager.init(),this.playerCamera=new c.PlayerCamera(i.camera,this.gameStage,this.flags,this.renderer),this.bindCameraCenter=this.playerCamera.bindCameraCenter.bind(this.playerCamera),this.screenToWorld=this.playerCamera.screenToWorld.bind(this.playerCamera),this.worldToScreen=this.playerCamera.worldToScreen.bind(this.playerCamera),this.resolutionManager=new x.ResolutionManager(this.playerCamera,i.resolutionSettings),this.chunkManager=new u.ChunkManager(this.basePath,t,s,this.mapsInitData,this.seqToTag,this.collisionManager,this.gameObjectManager,this.tileManager,this.playerCamera,this.indexDbLoader,this.chunkWorker),yield this.chunkManager.init(),this.loadedMap=new r.default(this.gameStage,t,this.flags,this.tileManager,this.chunkManager),this.render=this.renderer.render.bind(this.renderer,this.mainStage),this.initialized=!0,this}))}updateMassive(e){this.elapsed+=e,this.elapsedCol+=e,this.elapsed>v&&(this.elapsed=0,this.chunkIteration%2?(this.chunkManager.updateAlmostVisibleChunks(e),this.chunkIteration++):(this.chunkManager.updateVisibleChunks(e),this.chunkIteration=1)),this.chunkManager.nextBatch(),this.playerCamera.updateStage()}updateNoop(e){}updateMedium(e){this.playerCamera.updateStage()}updateSmall(e){this.playerCamera.updateStage()}get isLoadingMap(){return this._isLoadingMap}get isReady(){return!this._isLoadingMap&&!!this.currentMap}loadMap(e,t){var i;return s(this,void 0,void 0,(function*(){if(this._isLoadingMap)throw new Error(`Can not load new map: ${e} until current map: ${this.currentMap} is finished loading`);if(e==this.currentMap)return!0;if(this.currentMap)for(let t=0;t<this._onBeforeMapDestroyedListeners.length;t++)this._onBeforeMapDestroyedListeners[t](this.currentMap,e);if(this.gameStage.visible=!1,this.mapLoadCount++,this._isLoadingMap=!0,this.currentMap=e,this.elapsed=0,this.chunkIteration=0,!this.initialized)throw new Error("Initialize world before loading maps.");this.updateChunks=this.updateNoop.bind(this);const s=this.mapsInitData.find(t=>t.id===e);if(!s)throw new Error(`Could not find init data for map ${e}`);let n=this.chunkManager.getMapMetaData(e,s.ts);if(!n&&(this.cachedMapMetaData[e]||(this.cachedMapMetaData[e]=yield this.chunkManager.requestMapMetaData(e)),n=this.cachedMapMetaData[e],n))throw new Error(`could not find map meta data for ${e}`);const r=this.loadedMap.initialized;if(this.loadedMap.reset(),this.playerCamera.reset(),this.collisionManager.reset(),r)for(let e=0;e<this._onMapDestroyedListeners.length;e++)this._onMapDestroyedListeners[e]();this.collisionManager.initMap(n),yield this.loadedMap.initialize(n),this.resolutionManager.setMapLengths(n.mapW,n.mapH),this.playerCamera.updateMapSize(n.mapW,n.mapH),(null===(i=t)||void 0===i?void 0:i.cameraPosition)&&(this.playerCamera.boundCameraCenter&&(this.playerCamera.boundCameraCenter.x=t.cameraPosition.x,this.playerCamera.boundCameraCenter.y=t.cameraPosition.y),this.playerCamera.updateViewRect(t.cameraPosition.x,t.cameraPosition.y));const a=h.resolveMapSize(n.mapW,n.mapH);this.rebindUpdate(a),yield this.chunkManager.loadMap(s.id,n,this.mapLoadCount),this._isLoadingMap=!1;for(let e=0;e<this._onMapCreatedListeners.length;e++)this._onMapCreatedListeners[e](t);return this.gameStage.visible=!0,!0}))}update(e){this.updateChunks(e),this.updateCollisions(e),this.render()}rebindUpdate(e){switch(e){case l.MapSize.LARGE:case l.MapSize.MEDIUM:this.updateChunks=this.updateMassive.bind(this);break;case l.MapSize.SMALL:this.updateChunks=this.updateSmall.bind(this)}}_onCollision(e,t){}_onChangedMap(){}_onAddedColliders(){}_onAddedObject(){}_onRemovedColliders(){}_onRemovedObjects(){}_onShowChunk(){}_onInitializedChunk(){}_onHideChunk(){}_onDestroyChunk(){}static RadianAngleFromPositions(e,t){return Math.atan2(t.y-e.y,t.x-e.x)}static DegreeAngleFromPositions(e,t){return 180*Math.atan2(t.y-e.y,t.x-e.x)/Math.PI}}const M={RECT:l.RuntimeColliderShape.RECT,POLYGON:l.RuntimeColliderShape.POLYGON,POINT:l.RuntimeColliderShape.POINT,CIRCLE:l.RuntimeColliderShape.CIRCLE,LINE:l.RuntimeColliderShape.LINE,ELIPSE:l.RuntimeColliderShape.ELIPSE};t.ColliderShapes=M,k.ColliderShapes=M,t.default=k},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Collision="collision",e.Render="render",e.GameObject="game_object",e.Map="map"}(t.PluginTypes||(t.PluginTypes={}))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(16);t.default=class{constructor(e,t,i,s,n){this.managedPlugins=[],this.initialized=!1,this.panRight=!0,this.layerStages=[],this.stage=e,this.tileManager=s,this.chunkManager=n,this.flags=i,this.tileManager=s,this.initSectionManagerEventHandlers()}removeImageHandlersNoPlugins(e){for(let t=0;t<e.length;t++)if(e[t])for(let i=0;i<e[t].length;i++)e[t][i]&&this.layerStages[t].removeMapSprite(e[t][i])}addImageHandlersNoPlugins(e){for(let t=0;t<e.length;t++)if(e[t])for(let i=0;i<e[t].length;i++)e[t][i]&&(e[t][i].x=e[t][i].worldX,e[t][i].y=e[t][i].worldY,this.layerStages[t].addMapSprite(e[t][i]))}initSectionManagerEventHandlers(){this.chunkManager.on("add-subchunk-layer-sprite",({layerIndex:e,sprite:t})=>{this.layerStages[e].addSubChunk(t)}),this.chunkManager.on("remove-map-chunks",e=>{for(let t=0;t<e.length;t++)for(let i=0;i<e[t].length;i++)e[t][i]&&this.layerStages[t].removeChild(e[t][i])}),this.chunkManager.on("add-map-sub-chunks",e=>{for(let t=0;t<e.length;t++){const i=e[t];for(let e=0;e<i.length;e++){const t=this.layerStages[e],s=i[e];s&&s.parent!==t&&t.addSubChunk(s)}}}),this.chunkManager.on("add-map-chunk-layers",e=>{for(let t=0;t<e.length;t++)e[t]&&this.layerStages[t].addSubChunk(e[t])}),this.chunkManager.on("add-map-chunks",e=>{for(let t=0;t<e.length;t++)this.layerStages[t].addSubChunks(e[t])})}updateStages(){for(let e=0;e<this.metaData.layerTileLayerOrder.length;e++)this.panRight?(this.layerStages[e].x-=1,this.layerStages[e].y-=1,e===this.metaData.layerTileLayerOrder.length-1&&this.layerStages[e].x<=-250&&(this.panRight=!1)):(this.layerStages[e].x+=1,this.layerStages[e].y+=1,e===this.metaData.layerTileLayerOrder.length-1&&this.layerStages[e].x>=0&&(this.panRight=!0))}initialize(e){return s(this,void 0,void 0,(function*(){if(this.initialized)throw new Error("TileMap is already initialized, call either map.reset or map.destroy before initializing a new map.");this.metaData=e;for(let t=0;t<e.layerTileLayerOrder.length;t++)this.layerStages.push(new n.LayerContainer),this.stage.addChild(this.layerStages[t]);return this.initialized=!0,!0}))}setPlayerViewRect(e,t){}setPlayer(e){}addSprite(e){}removeSprite(e){}reset(){if(this.initialized){this.managedPlugins.forEach(e=>{}),this.initialized=!1,this.chunkManager.reset();for(let e=0;e<this.metaData.layerTileLayerOrder.length;e++)this.layerStages[e]&&this.layerStages[e].destroyLayer();this.layerStages.length=0,this.initialized=!1}}sleep(e){}removeColliderType(e){}addColliderType(e){}addColliderToSprite(e,t){}addCollider(e){}onBlockerDataAdded(e){this.onBlockerDataAddedHandler=e}onBlockerDataRemoved(e){this.onBlockerDataRemovedHandler=e}_onBlockerDataAdded(e,t){this.onBlockerDataAddedHandler&&this.onBlockerDataAddedHandler(e,t)}_onBlockerDataRemoved(e,t){this.onBlockerDataRemovedHandler&&this.onBlockerDataAddedHandler(e,t)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends PIXI.Container{constructor(e){super(),this.subChunks=[],e&&(this.tags=e)}destroyLayer(){if(this.objectContainer){const e=Array.from(this.objectContainer.children);for(let t=0;t<e.length;t++)delete e[t].layerIndex,delete e[t].layerParent,this.objectContainer.removeChild(e[t]);this.destroyObjectContainer()}this.children&&Array.from(this.children).forEach(e=>{e.parent.removeChild(e),e.destroy()}),this.parent&&this.parent.removeChild(this),this.destroy()}addSubChunk(e){if(this.objectContainer){if(this.children.pop()!==this.objectContainer)throw new Error("Last child should always be object container.");this.addChild(e),this.addChild(this.objectContainer)}else this.addChild(e)}addSubChunks(e){if(this.objectContainer){if(this.children.pop()!==this.objectContainer)throw new Error("Last child should always be object container.");for(let t=0;t<e.length;t++)this.addChild(e[t]);this.addChild(this.objectContainer)}else for(let t=0;t<e.length;t++)this.addChild(e[t])}destroyObjectContainer(){this.removeChild(this.objectContainer),this.objectContainer.destroy(),delete this.objectContainer}removeMapSprite(e,t=!1){const i=e.delegatedSprite||e;if(i.parent!==this.objectContainer)throw console.error(e),new Error("Error removing sprite, it wasnt a child");if(delete e.layerParent,delete e.layerIndex,!t&&e.removeFromMap(),this.objectContainer.removeChild(i),!this.objectContainer.children.length)return this.destroyObjectContainer(),!0}addMapSprite(e){const t=e.delegatedSprite||e;this.objectContainer?e.zIndex<this.objectContainer.children[this.objectContainer.children.length-1].zIndex?(this.objectContainer.addChild(t),this.objectContainer.children.sort((e,t)=>e.sortByY&&t.sortByY?e.ySortPoint-t.ySortPoint:e.sortByY&&!t.sortByY?t.zIndex===Number.MAX_SAFE_INTEGER?-1:e.ySortPoint-t.ySortPoint:!e.sortByY&&t.sortByY?e.zIndex===Number.MAX_SAFE_INTEGER?1:e.ySortPoint-t.ySortPoint:e.zIndex-t.zIndex)):this.objectContainer.addChild(t):(this.objectContainer=new PIXI.Container,this.addChild(this.objectContainer),this.objectContainer.addChild(t))}}t.LayerContainer=s},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(18);t.TileManager=class{constructor(e,t,i,s,n){this.tilesetMetaDataToLoad={},this.tilesets=[],this.spritePool=[],this.cachedTileColliders={},this.tileSizeSeqLookup=[],this.baseUrl=e,this.tileSizeSeqLookup=i,this.tilesets=new Array(i.length/2).fill(1).map(()=>[]),this.indexedDbEnabled=s.indexedDB,this.flags=s,this.loader=new PIXI.loaders.Loader,this.tilesetMetaData=t,this.indexDbLoader=n}init(){return s(this,void 0,void 0,(function*(){for(let e=0;e<this.tilesetMetaData.length;e++){const t=this.tilesetMetaData[e];yield this.loadTileset(t)}return!0}))}removeTileset(e,t){}loadTileset(e){return s(this,void 0,void 0,(function*(){try{const t=new n.Tileset(e,this.loader,this.baseUrl,this.indexDbLoader);yield t.loadResources();let i=-1;for(let e=0;e<this.tileSizeSeqLookup.length;e+=2)if(this.tileSizeSeqLookup[e]===t.tilesetData.tileWidth&&this.tileSizeSeqLookup[e+1]===t.tilesetData.tileHeight){i=e/2;break}if(i<0)throw new Error("Could not find the correct seq for tileset: "+JSON.stringify(e));return this.tilesets[i].push(t),!0}catch(e){throw console.error(e),e}}))}getTile(e,t){let i,s;for(let n=0;n<this.tilesets[e].length;n++){const{startIndex:r,endIndex:a}=this.tilesets[e][n];t>=r&&t<a&&(i=this.tilesets[e][n].getTileTexture(t),s=this.tilesets[e][n].getColliders(t))}let n=this.spritePool.pop();return n||(n=new PIXI.Sprite,n.removeFromMap=e=>{delete n.colliders,n.visible=!1,n.parent&&n.parent.removeChild(n),n.texture=null,n.rotation=0,n.scale.set(1,1),n.anchor.set(0,0),this.spritePool.push(n)}),n.colliders=s,n.texture=i,n.visible=!0,n}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(1);t.Tileset=class{constructor(e,t,i,s){this.createdTexturesLookup={},this.spritePool={},this.tileColliderLookup={},this.loaded=!1,this.indexedDbLoader=s,this.baseUrl=i,this.tilesetId=e.id,this.jsonUrl=this.baseUrl+"/"+n.removeFileExtension(this.tilesetId)+".json",this.pngUrl=this.baseUrl+"/"+n.removeFileExtension(this.tilesetId)+".png",this.lastUpdateTsData=e.dataTs,this.lastUpdateTsImage=e.imageTs,this.loader=t||PIXI.loader}get tilesetTextureKey(){return`ts_${this.tilesetId}_texture`}get tilesetLastUpdateImageKey(){return`ts_${this.tilesetId}_last_update_image`}get tilesetLastUpdateDataKey(){return`ts_${this.tilesetId}_last_update_data`}destroy(){}makeTexture(e){let t=(e-=this.startIndex)%this.tilesetColumns*this.tileWidth,i=Math.floor(e/this.tilesetColumns)*this.tileHeight;return new PIXI.Texture(this.tilesetTexture.baseTexture,new PIXI.Rectangle(t,i,this.tileWidth,this.tileHeight))}loadTexture(){return s(this,void 0,void 0,(function*(){if("undefined"==typeof localStorage||!this.indexedDbLoader)return new Promise((e,t)=>{this.loader.load((t,i)=>(this.tilesetTexture=i[this.tilesetTextureKey].texture,e(!0)))});{const e=()=>s(this,void 0,void 0,(function*(){return this.loader.add(this.tilesetTextureKey,this.pngUrl),new Promise((e,t)=>{this.loader.load((t,i)=>{this.tilesetTexture||(this.tilesetTexture=i[this.tilesetTextureKey].texture),this.indexedDbLoader.saveTexture(this.pngUrl,i[this.tilesetTextureKey].texture).then(()=>(localStorage.setItem(this.tilesetLastUpdateImageKey,`${this.lastUpdateTsImage+1}`),e(!0)))})})})),t=localStorage.getItem(this.tilesetLastUpdateImageKey);if(t&&parseInt(t)>this.lastUpdateTsImage)return this.tilesetTexture=yield this.indexedDbLoader.loadTexture(this.pngUrl),this.tilesetTexture||(yield e()),!0;yield e()}}))}loadData(){return s(this,void 0,void 0,(function*(){if("undefined"!=typeof localStorage&&this.indexedDbLoader){const e=()=>s(this,void 0,void 0,(function*(){if(this.tilesetData=yield n.httpGetAsync(this.jsonUrl),!this.tilesetData)throw console.error(this),new Error("Can not load tileset data");yield this.indexedDbLoader.saveJson(this.jsonUrl,this.tilesetData),localStorage.setItem(this.tilesetLastUpdateDataKey,`${this.lastUpdateTsData+1}`)})),t=localStorage.getItem(this.tilesetLastUpdateDataKey);t&&parseInt(t)>this.lastUpdateTsData?(this.tilesetData=yield this.indexedDbLoader.loadJson(this.jsonUrl),this.tilesetData||(yield e()),this.lastCachedTs=t?parseInt(t):0):yield e()}else this.tilesetData=yield n.httpGetAsync(this.jsonUrl);return this.startIndex=this.tilesetData.startingIndex,!0}))}loadResources(){return s(this,void 0,void 0,(function*(){yield Promise.all([this.loadData(),this.loadTexture()]),this.loaded=!0,this.tileWidth=this.tilesetData.tileWidth,this.tileHeight=this.tilesetData.tileHeight,this.imageWidth=this.tilesetTexture.width,this.imageHeight=this.tilesetTexture.height,this.tilesetColumns=this.imageWidth/this.tileWidth;const e=Math.ceil(this.imageWidth/this.tileWidth)*Math.ceil(this.imageHeight/this.tileHeight);return this.endIndex=this.tilesetData.startingIndex+e,!0}))}getColliders(e){for(let t=0;t<this.tilesetData.tileData.length;t++){if(this.tilesetData.tileData[t].id==e)return this.tilesetData.tileData[t];if(this.tilesetData.tileData[t].id>e)return null}return null}getTileTexture(e){let t=this.createdTexturesLookup[e];return t||(t=this.makeTexture(e),this.createdTexturesLookup[e]=t),t}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(4),r=i(1),a=i(9),o=i(23);t.GameObjectManager=class{constructor(e,t){this.taggedGameObjectAddedListeners={},this.taggedGameObjectRemovedListeners={},this.cachedImageData={},this.pendingLoads={},this.lastTouchedTimestamps={},this.userGameObjectAtlasses=[],this.cachedImageTextures={},this.userTextures=[],this.userTextureCacheTimestampLookup={},this.textureAtlasses=[],this.gameObjPool=[],this.installedPlugins=[],this.baseUrl=e+"/images",this.loader=new PIXI.loaders.Loader,this.collisionManager=t,this.tagSeqToId=this.collisionManager.seqToTag}reinit(e){this.imageData=e,this.removeUntouched()}removePlugin(e){const t=this.installedPlugins.indexOf(e);if(t<0)throw new Error(`Trying to remove non installed plugin: ${e.name}`);if(e.onGameObjectAdded&&this.offGameObjectAdded(e.onGameObjectAdded),e.onGameObjectRemoved&&this.offGameObjectRemoved(e.onGameObjectRemoved),e.onTaggedGameObjectAdded)for(let t in e.onTaggedGameObjectAdded)this.offTaggedGameObjectAdded(t,e.onTaggedGameObjectAdded[t]);if(e.onTaggedGameObjectRemoved)for(let t in e.onTaggedGameObjectRemoved)this.offTaggedGameObjectRemoved(t,e.onTaggedGameObjectRemoved[t]);this.installedPlugins.splice(t,1)}addPlugin(e,t,i){if(this.installedPlugins.includes(e))throw new Error(`Already installed plugin: ${e.name}`);if(e.init&&e.init(t,i),e.onGameObjectAdded&&(e.onGameObjectAdded=e.onGameObjectAdded.bind(e),this.onGameObjectAdded(e.onGameObjectAdded)),e.onGameObjectRemoved&&(e.onGameObjectRemoved=e.onGameObjectRemoved.bind(e),this.onGameObjectRemoved(e.onGameObjectRemoved)),e.onTaggedGameObjectAdded)for(let t in e.onTaggedGameObjectAdded)e.onTaggedGameObjectAdded[t]=e.onTaggedGameObjectAdded[t].bind(e),this.onTaggedGameObjectAdded(t,e.onTaggedGameObjectAdded[t]);if(e.onTaggedGameObjectRemoved)for(let t in e.onTaggedGameObjectRemoved)e.onTaggedGameObjectRemoved[t]=e.onTaggedGameObjectRemoved[t].bind(e),this.onTaggedGameObjectRemoved(t,e.onTaggedGameObjectRemoved[t])}isAnimatingImage(e){return!1}addTextures(e){}getImageData(e){return s(this,void 0,void 0,(function*(){if(e in this.cachedImageData)return this.cachedImageData[e]?JSON.parse(this.cachedImageData[e]):null;const t=yield this.loadImageColliderData(e);return t?(this.cachedImageData[e]=JSON.stringify({colliders:t}),{colliders:t}):(this.cachedImageData[e]=null,null)}))}checkForImageInCache(e){const t=this.gameObjectImageAtlas.getTexture(e);return t||(this.cachedImageTextures[e]?this.cachedImageTextures[e]:null)}getMapImageTexture(e){return s(this,void 0,void 0,(function*(){const t=`${this.baseUrl}/i_${e}`,i=this.checkForImageInCache(t);if(i)return i;if(this.pendingLoads[e])return new Promise((t,i)=>{this.pendingLoads[e].push(e=>(console.error("Resolving!!!"),t(e)))});this.pendingLoads[e]=[];const s=yield this.loadImageTexture(t);if(delete this.pendingLoads[e],s){if(s.width<=this.flags.maxTextureSize&&s.height<=this.flags.maxTextureSize)return this.gameObjectImageAtlas.addTexture(t,s,null,!0);this.cachedImageTextures[t]=s}return this.cachedImageTextures[t]}))}reset(){this.gameObjPool.length>20&&(this.gameObjPool.length=20)}init(e,t,i,n,r){return s(this,void 0,void 0,(function*(){this.flags=n,this.gameStage=t,this.renderer=e,this.worldMetaData=i,this.indexedDbLoader=r,this.gameObjectImageAtlas=a.AtlasFactory(e,r),yield this.updateStorage()}))}parseColliderData(e){return Object.keys(e).forEach(t=>{e[t].forEach(e=>{e.tags&&e.tags.length&&(e.tags=e.tags.map(e=>{if(!this.tagSeqToId[e])throw new Error(`Could not find tag ${e}`);return this.tagSeqToId[e]}))})}),e}loadImagesHttp(e){return s(this,void 0,void 0,(function*(){const t=yield r.httpGetAsync(`${this.baseUrl}/atlas_data.json`),i={atlasData:t.atlasData,colliderData:t.colliderData?this.parseColliderData(t.colliderData):{},atlasImages:[]};return i.atlasImages=e?yield Promise.all(e.map(e=>s(this,void 0,void 0,(function*(){const t=yield r.httpGetAsync(`${this.baseUrl}/atlas_images/atlas_${e}.png`,!1),i=yield r.getTextureFromBlob(t);return{atlasIndex:e,texture:i}})))):yield Promise.all(i.atlasData.map(e=>s(this,void 0,void 0,(function*(){const t=yield r.httpGetAsync(`${this.baseUrl}/atlas_images/atlas_${e.aIdx}.png`,!1),i=yield r.getTextureFromBlob(t);return{atlasIndex:e.aIdx,texture:i}})))),i}))}splitAndSaveImage(e,t,i,n,r,a,o){return s(this,void 0,void 0,(function*(){const s=new PIXI.Texture(a,new PIXI.Rectangle(t,i,n,r)),h=new PIXI.Sprite(s),l=this.renderer.extract.base64(h);return o?yield this.indexedDbLoader.saveJson(`${this.baseUrl}/i_${e}.json`,o):yield this.indexedDbLoader.deleteItem(`${this.baseUrl}/i_${e}.json`),this.indexedDbLoader.saveImageData(`${this.baseUrl}/i_${e}`,l)}))}loadImageColliderData(e){return s(this,void 0,void 0,(function*(){let t=null;const i=`${this.baseUrl}/i_${e}.json`;if(this.flags.indexedDB)try{t=yield this.indexedDbLoader.loadJson(i)}catch(e){try{t=yield r.httpGetAsync(i)}catch(e){console.error(e)}}else try{t=yield r.httpGetAsync(i)}catch(e){console.error(e)}return t}))}getCachedUserTextureTimestamp(){return s(this,void 0,void 0,(function*(){const e=()=>{this.clearUserTextureCacheTimeout=setTimeout(()=>{this.clearUserTextureCacheTimeout=null,this.userTextureCacheNeedsResave&&(this.userTextureCacheNeedsResave=!1,this.indexedDbLoader.saveJson("_user_texture_cache_data",this.userTextureCacheTimestampLookup).then(()=>{delete this.userTextureCacheTimestampLookup})),delete this.userTextureCacheTimestampLookup},5e3)};return this.userTextureCacheTimestampLookup?(this.clearUserTextureCacheTimeout&&clearTimeout(this.clearUserTextureCacheTimeout),e(),this.userTextureCacheTimestampLookup):this.indexedDbLoader?(this.userTextureCacheTimestampLookup=yield this.indexedDbLoader.loadJson("_user_texture_cache_data"),this.userTextureCacheTimestampLookup||(this.userTextureCacheTimestampLookup={},yield this.indexedDbLoader.saveJson("_user_texture_cache_data",this.userTextureCacheTimestampLookup)),e(),this.userTextureCacheTimestampLookup):null}))}getTexture(e,t){return s(this,void 0,void 0,(function*(){t=t||{addToAtlas:!0};const i=this.checkForImageInCache(e);if(i)return i;if(t.cacheFor&&this.indexedDbLoader){const i=yield this.getCachedUserTextureTimestamp();if(i[e]&&i[e]<Date.now()){this.pendingLoads[e]=[];const t=yield this.loadImageTexture(e);return delete this.pendingLoads[e],t}{const i=yield r.httpGetAsync(e,!1);if(!i)throw new Error(`Could not find image texture at path: ${e}`);yield this.indexedDbLoader.saveImageData(e,i);const s=yield r.getTextureFromBlob(i);return(yield this.getCachedUserTextureTimestamp())[e]=Date.now()+t.cacheFor,this.userTextureCacheNeedsResave=!0,t.addToAtlas&&s.width<this.flags.maxTextureSize&&s.height<this.flags.maxTextureSize?this.gameObjectImageAtlas.addTexture(e,s,"runtime",!0):s}}{const i=yield r.httpGetAsync(e,!1);if(!i)throw new Error(`Could not find image texture at path: ${e}`);const s=yield r.getTextureFromBlob(i);return t.addToAtlas&&s.width<this.flags.maxTextureSize&&s.height<this.flags.maxTextureSize?this.gameObjectImageAtlas.addTexture(e,s,"runtime",!0):s}}))}loadImageTexture(e){var t;return s(this,void 0,void 0,(function*(){let i="";if(this.flags.indexedDB&&(i=yield this.indexedDbLoader.loadImageData(e)),i||(console.warn("Did not load image data ",e,"from indexddb, going to server."),i=yield r.httpGetAsync(e,!1)),!i)throw new Error(`Failed all method of getting image ${e}`);const s=yield r.getTextureFromDataUrl(i);return null===(t=this.pendingLoads[e])||void 0===t||t.forEach(e=>{e(s)}),delete this.pendingLoads[e],s}))}updateStorage(){return s(this,void 0,void 0,(function*(){const e=[],t=[];if(this.flags.localStorage&&this.flags.indexedDB){let i=localStorage.getItem(`${this.baseUrl}/update_timestamps`);const s=[];if(i){const n=JSON.parse(i);for(let i=0;i<n.length;i++){if(!this.worldMetaData.images[i]){t.push(i);continue}const n=this.worldMetaData.images[i];s.push(n),e.push(i)}const r=i.length-this.worldMetaData.images.length;if(r<0){const t=i.length+Math.abs(r);for(let n=i.length;n<t;n++)e.push(t),s.push(this.worldMetaData.images[n])}}else for(let t=0;t<this.worldMetaData.images.length;t++)s.push(this.worldMetaData.images[t]),e.push(t);if(e.length){localStorage.setItem(`${this.baseUrl}/update_timestamps`,JSON.stringify(s));const{atlasData:t,atlasImages:i,colliderData:n}=yield this.loadImagesHttp(e);yield Promise.all(i.map(({atlasIndex:e,texture:i})=>{const s=t.find(t=>t.aIdx==e);return!(!s||!s.images)&&s.images.map(({id:e,x:t,y:s,w:r,h:a})=>this.splitAndSaveImage(e,t,s,r,a,i.baseTexture,n[e]))}))}}}))}onGameObjectAdded(e){this.gameObjectAddedListeners?this.gameObjectAddedListeners.push(e):this.gameObjectAddedListeners=[e]}onGameObjectRemoved(e){this.gameObjectRemovedListeners?this.gameObjectRemovedListeners.push(e):this.gameObjectRemovedListeners=[e]}offGameObjectAdded(e){for(let t=0;t<this.gameObjectAddedListeners.length;t++)if(this.gameObjectAddedListeners[t]===e)return this.gameObjectAddedListeners.splice(t,1),this.gameObjectAddedListeners.length||delete this.gameObjectAddedListeners,!0;return!1}offGameObjectRemoved(e){for(let t=0;t<this.gameObjectRemovedListeners.length;t++)if(this.gameObjectRemovedListeners[t]===e)return this.gameObjectRemovedListeners.splice(t,1),this.gameObjectRemovedListeners.length||delete this.gameObjectRemovedListeners,!0;return!1}onTaggedGameObjectAdded(e,t){this.taggedGameObjectAddedListeners[e]?this.taggedGameObjectAddedListeners[e].push(t):this.taggedGameObjectAddedListeners[e]=[t]}offTaggedGameObjectAdded(e,t){const i=this.taggedGameObjectAddedListeners[e];if(!i)return!1;for(let s=0;s<i.length;s++)if(i[s]===t)return i.splice(s,1),i.length||delete this.taggedGameObjectAddedListeners[e],!0}onTaggedGameObjectRemoved(e,t){this.taggedGameObjectRemovedListeners[e]?this.taggedGameObjectRemovedListeners[e].push(t):this.taggedGameObjectRemovedListeners[e]=[t]}offTaggedGameObjectRemoved(e,t){const i=this.taggedGameObjectRemovedListeners[e];if(!i)return!1;for(let s=0;s<i.length;s++)if(i[s]===t)return i.splice(s,1),i.length||delete this.taggedGameObjectRemovedListeners[e],!0}addGameObject(e){var t,i,s;let r=this.gameObjPool.pop();return r||(r=new n.GameObject(this.gameObjPool,this.collisionManager,this.gameStage,this)),null===(t=this.gameObjectAddedListeners)||void 0===t||t.forEach(e=>e(r)),null===(s=null===(i=e)||void 0===i?void 0:i.tags)||void 0===s||s.forEach(e=>{var t;return null===(t=this.taggedGameObjectAddedListeners[e])||void 0===t?void 0:t.forEach(e=>e(r))}),r.init(e),r}_getMapImage(e,t,i,r,a){var h,l;return s(this,void 0,void 0,(function*(){const s=yield this.getMapImageTexture(e);let d;if(r>999999){const{id:e,flips:t}=o.decodeRotation(r);r=e,d=t}let u=yield this.getImageData(e);u?(u.layer=a,u.position={x:t,y:i},u.zIndex=r,u.flips=d):u={layer:a,position:{x:t,y:i},zIndex:r,flips:d},u.texture=s;let c=this.gameObjPool.pop();return c||(c=new n.GameObject(this.gameObjPool,this.collisionManager,this.gameStage,this)),c.init(u),null===(h=this.gameObjectAddedListeners)||void 0===h||h.forEach(e=>e(c)),null===(l=u.tags)||void 0===l||l.forEach(e=>{var t;return null===(t=this.taggedGameObjectAddedListeners[e])||void 0===t?void 0:t.forEach(e=>e(c))}),c}))}removeImage(e){}removeUntouched(e=3e4){const t=Object.keys(this.lastTouchedTimestamps),i=Date.now();for(let s=0;s<t.length;s++){i-this.lastTouchedTimestamps[t[s]]>=e&&this.removeImage(t[s])}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21);class n extends s.BaseGameObjectAtlas{constructor(e,t){super(2048,e)}removeTextureFromAtlas(e,t,i){if(!(e in this.cachedTextures))throw new Error(`Could not find id ${e}`);this.cachedTextures[e].destroy(!1),delete this.cachedTextures[e],this.renderer.bindRenderTexture(this.atlasses[i],null);const s=this.renderer.gl;s.enable(s.SCISSOR_TEST),s.scissor(t.x,t.y,t.w,t.h),this.renderer.clear(),this.renderer.bindRenderTexture()}}t.WebGlGameObjectAtlas=n},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(22);t.BaseGameObjectAtlas=class{constructor(e,t,i){this.nextOpenPositions=[],this.atlasses=[],this.cachedTextures={},this.loader=i,this.maxTextureSize=e>=4096?e-e%4096:e>=2048?e-e%2048:e>=1024?e-e%1024:e>=512?e-e%512:256,this.renderer=t,this.packer=new n.MaxRectsPacker(this.maxTextureSize,this.maxTextureSize,0,{smart:!0,pot:!0,allowRotation:!1,tag:!0})}getTexture(e){return this.cachedTextures[e]}addTexture(e,t,i,s=!1){if(e in this.cachedTextures)throw new Error("Trying to add texture twice.");const n={id:e,width:t.width,height:t.height};i&&(n.tag=i);const r=this.packer.add(n);let a=-1;for(let t=0;t<this.packer.bins.length;t++){for(let i=0;i<this.packer.bins[t].rects.length;i++)if(this.packer.bins[t].rects[i].id===e){a=t;break}if(a>-1)break}if(a<0)throw new Error(`No atlas index found for image after adding texture ${e}`);this.atlasses[a]||this.atlasses.push(PIXI.RenderTexture.create(this.maxTextureSize,this.maxTextureSize));const o=this.atlasses[a];if(!o)throw new Error("Should have texture atlas at this point");const h=new PIXI.Sprite(t);return h.setTransform(r.x,r.y),this.renderer.render(h,o,!1),this.cachedTextures[e]=new PIXI.Texture(o.baseTexture,new PIXI.Rectangle(r.x,r.y,r.width,r.height)),s&&h.destroy({texture:!0,baseTexture:!0}),this.cachedTextures[e]}loadSheet(e){return s(this,void 0,void 0,(function*(){if(!this.loader)throw new Error("Indexeddb is not supported.");return!1}))}saveSheet(e){return s(this,void 0,void 0,(function*(){if(!this.loader)throw new Error("Indexeddb is not supported.");return!1}))}}},function(e,t,i){"use strict";i.r(t),i.d(t,"Bin",(function(){return n})),i.d(t,"MaxRectsBin",(function(){return r})),i.d(t,"MaxRectsPacker",(function(){return l})),i.d(t,"OversizedElementBin",(function(){return a})),i.d(t,"PACKING_LOGIC",(function(){return h})),i.d(t,"Rectangle",(function(){return s}));class s{constructor(e=0,t=0,i=0,s=0,n=!1,r){this.oversized=!1,this._rot=!1,this._allowRotation=void 0,this._dirty=0,this._width=e,this._height=t,this._x=i,this._y=s,this._data={},this._rot=n,this._allowRotation=r}static Collide(e,t){return e.collide(t)}static Contain(e,t){return e.contain(t)}area(){return this.width*this.height}collide(e){return e.x<this.x+this.width&&e.x+e.width>this.x&&e.y<this.y+this.height&&e.y+e.height>this.y}contain(e){return e.x>=this.x&&e.y>=this.y&&e.x+e.width<=this.x+this.width&&e.y+e.height<=this.y+this.height}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this._dirty++)}get height(){return this._height}set height(e){e!==this._height&&(this._height=e,this._dirty++)}get x(){return this._x}set x(e){e!==this._x&&(this._x=e,this._dirty++)}get y(){return this._y}set y(e){e!==this._y&&(this._y=e,this._dirty++)}get rot(){return this._rot}set rot(e){if(!1!==this._allowRotation&&this._rot!==e){const t=this.width;this.width=this.height,this.height=t,this._rot=e,this._dirty++}}get allowRotation(){return this._allowRotation}set allowRotation(e){this._allowRotation!==e&&(this._allowRotation=e,this._dirty++)}get data(){return this._data}set data(e){null!==e&&e!==this._data&&(this._data=e,"object"==typeof e&&e.hasOwnProperty("allowRotation")&&(this._allowRotation=e.allowRotation),this._dirty++)}get dirty(){return this._dirty>0}setDirty(e=!0){this._dirty=e?this._dirty+1:0}}class n{constructor(){this._dirty=0}get dirty(){return this._dirty>0||this.rects.some(e=>e.dirty)}setDirty(e=!0){if(this._dirty=e?this._dirty+1:0,!e)for(let e of this.rects)e.setDirty&&e.setDirty(!1)}}class r extends n{constructor(e=o,t=o,i=0,n={smart:!0,pot:!0,square:!0,allowRotation:!1,tag:!1,border:0,logic:h.MAX_EDGE}){super(),this.maxWidth=e,this.maxHeight=t,this.padding=i,this.options=n,this.freeRects=[],this.rects=[],this.verticalExpand=!1,this.width=this.options.smart?0:e,this.height=this.options.smart?0:t,this.border=this.options.border?this.options.border:0,this.freeRects.push(new s(this.maxWidth+this.padding-2*this.border,this.maxHeight+this.padding-2*this.border,this.border,this.border)),this.stage=new s(this.width,this.height)}add(...e){let t,i;if(1===e.length){if("object"!=typeof e[0])throw new Error("MacrectsBin.add(): Wrong parameters");i=e[0];let t=i.data&&i.data.tag?i.data.tag:i.tag?i.tag:void 0;if(this.options.tag&&this.tag!==t)return}else{if(t=e.length>2?e[2]:null,this.options.tag){if(t&&this.tag!==t.tag)return;if(!t&&this.tag)return}i=new s(e[0],e[1]),i.data=t,i.setDirty(!1)}const n=this.place(i);return n&&this.rects.push(n),n}repack(){let e=[];this.reset(),this.rects.sort((e,t)=>{const i=Math.max(t.width,t.height)-Math.max(e.width,e.height);return 0===i&&e.hash&&t.hash?e.hash>t.hash?-1:1:i});for(let t of this.rects)this.place(t)||e.push(t);for(let t of e)this.rects.splice(this.rects.indexOf(t),1);return e.length>0?e:void 0}reset(e=!1,t=!1){e&&(this.data&&delete this.data,this.tag&&delete this.tag,this.rects=[],t&&(this.options={smart:!0,pot:!0,square:!0,allowRotation:!1,tag:!1,border:0})),this.width=this.options.smart?0:this.maxWidth,this.height=this.options.smart?0:this.maxHeight,this.border=this.options.border?this.options.border:0,this.freeRects=[new s(this.maxWidth+this.padding-2*this.border,this.maxHeight+this.padding-2*this.border,this.border,this.border)],this.stage=new s(this.width,this.height),this._dirty=0}place(e){let t,i,n=e.data&&e.data.tag?e.data.tag:e.tag?e.tag:void 0;if(!this.options.tag||this.tag===n){if(i=e.hasOwnProperty("_allowRotation")&&void 0!==e.allowRotation?e.allowRotation:this.options.allowRotation,t=this.findNode(e.width+this.padding,e.height+this.padding,i),t){this.updateBinSize(t);let i=this.freeRects.length,s=0;for(;s<i;)this.splitNode(this.freeRects[s],t)&&(this.freeRects.splice(s,1),i--,s--),s++;return this.pruneFreeList(),this.verticalExpand=this.width>this.height,e.x=t.x,e.y=t.y,void 0===e.rot&&(e.rot=!1),e.rot=t.rot?!e.rot:e.rot,this._dirty++,e}if(this.verticalExpand){if(this.updateBinSize(new s(e.width+this.padding,e.height+this.padding,this.border,this.height+this.padding-this.border))||this.updateBinSize(new s(e.width+this.padding,e.height+this.padding,this.width+this.padding-this.border,this.border)))return this.place(e)}else if(this.updateBinSize(new s(e.width+this.padding,e.height+this.padding,this.width+this.padding-this.border,this.border))||this.updateBinSize(new s(e.width+this.padding,e.height+this.padding,this.border,this.height+this.padding-this.border)))return this.place(e)}}findNode(e,t,i){let n,r,a,o=Number.MAX_VALUE;for(let l in this.freeRects)r=this.freeRects[l],r.width>=e&&r.height>=t&&(n=this.options.logic===h.MAX_AREA?r.width*r.height-e*t:Math.min(r.width-e,r.height-t),n<o&&(a=new s(e,t,r.x,r.y),o=n)),i&&r.width>=t&&r.height>=e&&(n=this.options.logic===h.MAX_AREA?r.width*r.height-t*e:Math.min(r.height-e,r.width-t),n<o&&(a=new s(t,e,r.x,r.y,!0),o=n));return a}splitNode(e,t){if(!e.collide(t))return!1;if(t.x<e.x+e.width&&t.x+t.width>e.x){if(t.y>e.y&&t.y<e.y+e.height){let i=new s(e.width,t.y-e.y,e.x,e.y);this.freeRects.push(i)}if(t.y+t.height<e.y+e.height){let i=new s(e.width,e.y+e.height-(t.y+t.height),e.x,t.y+t.height);this.freeRects.push(i)}}if(t.y<e.y+e.height&&t.y+t.height>e.y){if(t.x>e.x&&t.x<e.x+e.width){let i=new s(t.x-e.x,e.height,e.x,e.y);this.freeRects.push(i)}if(t.x+t.width<e.x+e.width){let i=new s(e.x+e.width-(t.x+t.width),e.height,t.x+t.width,e.y);this.freeRects.push(i)}}return!0}pruneFreeList(){let e=0,t=0,i=this.freeRects.length;for(;e<i;){t=e+1;let s=this.freeRects[e];for(;t<i;){let n=this.freeRects[t];if(n.contain(s)){this.freeRects.splice(e,1),e--,i--;break}s.contain(n)&&(this.freeRects.splice(t,1),t--,i--),t++}e++}}updateBinSize(e){if(!this.options.smart)return!1;if(this.stage.contain(e))return!1;let t=Math.max(this.width,e.x+e.width-this.padding+this.border),i=Math.max(this.height,e.y+e.height-this.padding+this.border);if(this.options.allowRotation){const s=Math.max(this.width,e.x+e.height-this.padding+this.border),n=Math.max(this.height,e.y+e.width-this.padding+this.border);s*n<t*i&&(t=s,i=n)}return this.options.pot&&(t=Math.pow(2,Math.ceil(Math.log(t)*Math.LOG2E)),i=Math.pow(2,Math.ceil(Math.log(i)*Math.LOG2E))),this.options.square&&(t=i=Math.max(t,i)),!(t>this.maxWidth+this.padding||i>this.maxHeight+this.padding)&&(this.expandFreeRects(t+this.padding,i+this.padding),this.width=this.stage.width=t,this.height=this.stage.height=i,!0)}expandFreeRects(e,t){this.freeRects.forEach((i,s)=>{i.x+i.width>=Math.min(this.width+this.padding-this.border,e)&&(i.width=e-i.x-this.border),i.y+i.height>=Math.min(this.height+this.padding-this.border,t)&&(i.height=t-i.y-this.border)},this),this.freeRects.push(new s(e-this.width-this.padding,t-2*this.border,this.width+this.padding-this.border,this.border)),this.freeRects.push(new s(e-2*this.border,t-this.height-this.padding,this.border,this.height+this.padding-this.border)),this.freeRects=this.freeRects.filter(e=>!(e.width<=0||e.height<=0||e.x<this.border||e.y<this.border)),this.pruneFreeList()}}class a extends n{constructor(...e){if(super(),this.rects=[],1===e.length){if("object"!=typeof e[0])throw new Error("OversizedElementBin: Wrong parameters");const t=e[0];this.rects=[t],this.width=t.width,this.height=t.height,this.data=t.data,t.oversized=!0}else{this.width=e[0],this.height=e[1],this.data=e.length>2?e[2]:null;const t=new s(this.width,this.height);t.oversized=!0,t.data=this.data,this.rects.push(t)}this.freeRects=[],this.maxWidth=this.width,this.maxHeight=this.height,this.options={smart:!1,pot:!1,square:!1}}add(){}reset(e=!1){}repack(){}}const o=4096;var h;!function(e){e[e.MAX_AREA=0]="MAX_AREA",e[e.MAX_EDGE=1]="MAX_EDGE"}(h||(h={}));class l{constructor(e=o,t=o,i=0,s={smart:!0,pot:!0,square:!1,allowRotation:!1,tag:!1,border:0,logic:h.MAX_EDGE}){this.width=e,this.height=t,this.padding=i,this.options=s,this._currentBinIndex=0,this.bins=[]}add(...e){if(1===e.length){if("object"!=typeof e[0])throw new Error("MacrectsPacker.add(): Wrong parameters");const t=e[0];if(t.width>this.width||t.height>this.height)this.bins.push(new a(t));else{if(!this.bins.slice(this._currentBinIndex).find(e=>void 0!==e.add(t))){let e=new r(this.width,this.height,this.padding,this.options),i=t.data&&t.data.tag?t.data.tag:t.tag?t.tag:void 0;this.options.tag&&i&&(e.tag=i),e.add(t),this.bins.push(e)}}return t}{const t=new s(e[0],e[1]);if(e.length>2&&(t.data=e[2]),t.width>this.width||t.height>this.height)this.bins.push(new a(t));else{if(!this.bins.slice(this._currentBinIndex).find(e=>void 0!==e.add(t))){let e=new r(this.width,this.height,this.padding,this.options);this.options.tag&&t.data.tag&&(e.tag=t.data.tag),e.add(t),this.bins.push(e)}}return t}}addArray(e){this.sort(e,this.options.logic).forEach(e=>this.add(e))}reset(){this.bins=[],this._currentBinIndex=0}repack(e=!0){if(e){let e=[];for(let t of this.bins)if(t.dirty){let i=t.repack();i&&e.push(...i)}return void this.addArray(e)}if(!this.dirty)return;const t=this.rects;this.reset(),this.addArray(t)}next(){return this._currentBinIndex=this.bins.length,this._currentBinIndex}load(e){e.forEach((e,t)=>{if(e.maxWidth>this.width||e.maxHeight>this.height)this.bins.push(new a(e.width,e.height,{}));else{let i=new r(this.width,this.height,this.padding,e.options);i.freeRects.splice(0),e.freeRects.forEach((e,t)=>{i.freeRects.push(new s(e.width,e.height,e.x,e.y))}),i.width=e.width,i.height=e.height,e.tag&&(i.tag=e.tag),this.bins[t]=i}},this)}save(){let e=[];return this.bins.forEach(t=>{let i={width:t.width,height:t.height,maxWidth:t.maxWidth,maxHeight:t.maxHeight,freeRects:[],rects:[],options:t.options};t.tag&&(i=Object.assign(Object.assign({},i),{tag:t.tag})),t.freeRects.forEach(e=>{i.freeRects.push({x:e.x,y:e.y,width:e.width,height:e.height})}),e.push(i)}),e}sort(e,t=h.MAX_EDGE){return e.slice().sort((e,i)=>{const s=t===h.MAX_EDGE?Math.max(i.width,i.height)-Math.max(e.width,e.height):i.width*i.height-e.width*e.height;return 0===s&&e.hash&&i.hash?e.hash>i.hash?-1:1:s})}get currentBinIndex(){return this._currentBinIndex}get dirty(){return this.bins.some(e=>e.dirty)}get rects(){let e=[];for(let t of this.bins)e.push(...t.rects);return e}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});function n(e,t){return e.map(e=>{const i={x:e.x,y:e.y},s=Math.cos(t),n=Math.sin(t),r=i.x,a=i.y;return i.x=r*s-a*n,i.y=r*n+a*s,i})}function r(e){const{minX:t,minY:i,maxX:s,maxY:n}=e;return[{x:t,y:i},{x:s,y:i},{x:s,y:n},{x:t,y:n},{x:t,y:i}]}function a(e){if(e.length<=3)throw new Error("Not enough points in polygon.");let t=e[0].x,i=e[0].y,s=e[0].x,n=e[0].y;for(let r=1;r<e.length;r++){const{x:a,y:o}=e[r];s=Math.min(a,s),n=Math.min(o,n),t=Math.max(a,t),i=Math.max(o,i)}return{minX:s,minY:n,maxX:t,maxY:i}}function o(e){const{minX:t,maxX:i,minY:s,maxY:n}=e;return{x:t,y:s,width:i-t,height:n-s}}function h(e,t,i,s){i=i||0,s=s||t.length;const n=parseInt(i+(s-i)/2,10);return t[n]===e?n:s-i<=1?t[n]>e?n-1:n:t[n]<e?h(e,t,n,s):h(e,t,i,n)}function l(e,t=0){let{minX:i,maxX:s,minY:n,maxY:r}=e;const a=Math.round(i+(s-i)/2-t/2),o=Math.round(n+(r-n)/2-t/2);return i-=t,n-=t,[{x:i,y:n},{x:s,y:n},{x:s,y:r},{x:i,y:r},{x:i,y:o},{x:s,y:o},{x:a,y:n},{x:a,y:r}]}function d(e,t,i,s,r,a,o,h=0){let l,d,u=0,c=0;if(h>0){var p=(a+o)*h;p<a?u=a-p:c=o-(p-a)}const g=null!==r?n(t,r):t;for(let t=0;t<g.length;t++){l=g[t],d=t==g.length-1?g[0]:g[t+1];const n=d.x-l.x,r=d.y-l.y,h=Math.sqrt(n*n+r*r),p={x:n/h,y:r/h};let f=0;for(e.moveTo(i+l.x+c*p.x,s+l.y+c*p.y);f<=h;)f+=c,f+=u>0?u:a,f>h?(u=f-h,f=h):u=0,e.lineTo(i+l.x+f*p.x,s+l.y+f*p.y),f+=o,f>h&&0==u?c=f-h:(c=0,e.moveTo(i+l.x+f*p.x,s+l.y+f*p.y))}}function u(e){return s(this,void 0,void 0,(function*(){const t=URL.createObjectURL(e),i=new Image;return new Promise((e,s)=>{i.src=t,i.addEventListener("load",s=>(URL.revokeObjectURL(t),e(new PIXI.Texture(new PIXI.BaseTexture(i)))))})}))}function c(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}function p(e,t=1){return s(this,void 0,void 0,(function*(){const i=URL.createObjectURL(e),s=new Image;return t=t||1,new Promise((e,n)=>{s.src=i,s.addEventListener("load",n=>{if(URL.revokeObjectURL(i),1===t)return e(new PIXI.Texture(new PIXI.BaseTexture(s)));{let i=[];for(let e=0;e<t;e++)i.push(new PIXI.Texture(new PIXI.BaseTexture(s)));return e(i)}})})}))}function g(e,t){return s(this,void 0,void 0,(function*(){return new Promise((i,s)=>{e.extract.canvas(t).toBlob(e=>i(e))})}))}function f(e,t){return s(this,void 0,void 0,(function*(){return g(e,new PIXI.Sprite(t))}))}function m(e){let t=e.split(","),i=t[0].match(/:(.*?);/)[1],s=atob(t[1]),n=s.length,r=new Uint8Array(n);for(;n--;)r[n]=s.charCodeAt(n);return new Blob([r],{type:i})}function y(e){return s(this,void 0,void 0,(function*(){const t=new FileReader;return new Promise((i,s)=>{t.readAsDataURL(e),t.onload=e=>i(e.target.result)})}))}function C(e,t){var i=document.createElement("a");return document.body.append(i),i.download=t,i.href=URL.createObjectURL(e),i.click(),i.remove(),!0}t.clearRenderTextureRects=function(e,t,i){if(i instanceof PIXI.WebGLRenderer){i.bindRenderTexture(t);const s=i.gl;s.enable(s.SCISSOR_TEST);for(let t=0;t<e.length;t++){const{x:n,y:r,width:a,height:o}=e[t];s.scissor(n,r,a,o),i.clear()}i.bindRenderTexture()}else for(let i=0;i<e.length;i++){const{x:s,y:n,width:r,height:a}=e[i];t.baseTexture._canvasRenderTarget.context.clearRect(s,n,r,a)}},t.flatten=function e(t,i=[]){for(let s=0,n=t.length;s<n;s++){const n=t[s];Array.isArray(n)?e(n,i):i.push(n)}return i},t.encodeTileId=function(e,t,i,s){if(!t&&!i&&!s)return e},t.decodeTileId=function(e){let t=!!(1073741824&e),i=!!(536870912&e),s=!!(268435456&e);return{tileId:e&=-1879048193,flipDiag:s,flipVer:i,flipHor:t}},t.applyMixins=function(e,t){t.forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(i=>{"constructor"!==i&&(e.prototype[i]=t.prototype[i])})})},t.mergeFlips=function(e,t){const i=e.flipDiag+t.flipDiag;if(2===i)return{flipDiag:!1,flipHor:e.flipVert===t.flipVert,flipVert:e.flipHor+t.flipHor};if(1===i){const i=e.flipDiag?e.flipVert:e.flipHor,s=e.flipDiag?e.flipHor:e.flipVert,n=t.flipDiag?t.flipVert:t.flipHor;return{flipDiag:!0,flipHor:(t.flipDiag?t.flipHor:t.flipVert)!==s,flipVert:i!==n}}return 0===i?{flipDiag:!1,flipVert:e.flipVert!==t.flipVert,flipHor:e.flipHor!==t.flipHor}:void 0},t.decodeRotation=function(e){let t=!!(1073741824&e),i=!!(536870912&e),s=!!(268435456&e);return{id:e&=-1879048193,flips:{flipDiag:s,flipVert:i,flipHor:t}}},t.rotateSprite=function(e,t,i,s,n=!1){if(e.rotation=0,e.scale.set(1,1),!t&&!i&&!s)return;const r=i?-1:1,a=s?-1:1,o=t?90:0;e.scale.set(r,a),e.rotation=o*(Math.PI/180)},t.getBoundingBoxAsTexture=function(e,t,i){const{x:s,y:n,width:r,height:a}=i,o=e.localTransform.clone(),h=PIXI.RenderTexture.create(r,a);return t.render(e,h,!0,o.translate(-s,-n)),h},t.getPolygonAsTexture=function(e,t,i){},t.copyTexture=function(e,t){return s(this,void 0,void 0,(function*(){const i=new PIXI.Sprite(e);return new Promise((e,s)=>{t.extract.canvas(i).toBlob(t=>{i.destroy();const s=URL.createObjectURL(t),n=new Image;n.addEventListener("load",t=>(URL.revokeObjectURL(s),e(new PIXI.Texture(new PIXI.BaseTexture(n))))),n.src=s})})}))},t.createGrid=function(e,t,i,s,n=0,r=1,a=.5){const o=new PIXI.Graphics;o.lineStyle(r,n,a);for(let t=0;t<=i;t+=e)0!==t?(o.moveTo(t,0),o.lineTo(t,s)):(o.moveTo(1,0),o.lineTo(1,s));for(let e=0;e<=s;e+=t)o.moveTo(0,e),o.lineTo(i,e);return o},t.recurseEmit=function e(t,i,s){t.emit(i,s),t instanceof PIXI.Container&&t.children&&t.children.forEach(t=>{e(t,i,s)})},t.rotatePoints=n,t.boundingBoxToPolygon=r,t.drawDashedBoundingBox=function(e,t,i,s,n,a,o,h=0){return d(e,r(t),i,s,n,a,o,h)},t.ceilPoint=function(e){return{x:Math.ceil(e.x),y:Math.ceil(e.y)}},t.boundingBoxFromPolygon=a,t.rectFromPolygon=function(e){return o(a(e))},t.boundingFromPositions=function(e,t){return{minX:Math.min(e.x,t.x),maxX:Math.max(e.x,t.x),minY:Math.min(e.y,t.y),maxY:Math.max(e.y,t.y)}},t.removeFileExtension=function(e){return e.replace(/\.[^/.]+$/,"")},t.pointsEqual=function(e,t){return e.x===t.x&&e.y===t.y},t.adjustTileData=function(e,t,i,s){const n=t+i-1,r=t+s-1,a=s-i;if(!a)throw new Error("Tile count difference should not be 0.");const o=Math.sign(a);if(o>0)for(let t=0;t<e.length;t++){e[t]>=n&&(e[t]+=a)}else if(o<0)for(let i=0;i<e.length;i++){const s=e[i];s>=t&&s<=n&&s>r?e[i]=0:s>r&&(e[i]+=a)}},t.splitSizeKey=function(e){const[t,i]=e.split("-");if(null==t)throw new Error(`Failed to split width on key ${e}`);if(null==i)throw new Error(`Failed to split height on key ${e}`);return{width:parseInt(t),height:parseInt(i)}},t.makeSizeTileKey=function(e){return`${e.width}-${e.height}`},t.isTextureTransparent=function(e){const t=new PIXI.Sprite(e),i=(new PIXI.CanvasRenderer).extract.pixels(t);for(let e=3;e<i.length;e+=4)if(i[e])return t.destroy(!1),!1;return t.destroy(!1),!0},t.orderTileSizeContainers=function(e,t){e.children.sort((e,i)=>{try{const s=t.indexOf(e.sizeKey);if(s<0)throw new Error("Could not find index for sizeKey on a");const n=t.indexOf(i.sizeKey);if(n<0)throw new Error("Could not find index for sizeKey on b");return s-n}catch(s){throw console.error(s,"a was",e,"b was",i,"ordered keys was",t),s}})},t.rectFromBoundingBox=o,t.boundingBoxFromRect=function(e){const{x:t,y:i,width:s,height:n}=e;return{minX:t,minY:i,maxX:t+s,maxY:i+n}},t.swapElements=function(e,t,i){const s=e[t];e[t]=e[i],e[i]=s},t.insertToArray=function(e,t,i){e.splice(t,0,i)},t.moveArray=function(e,t,i){this.splice(i,0,e.splice(t,1)[0])},t.locationOf=h,t.insertSorted=function(e,t){return t.splice(h(e,t)+1,0,e),t},t.updateBoundingBox=function(e,t,i){e.minX=Math.min(t,e.minX),e.maxX=Math.min(t,e.maxX),e.minY=Math.min(i,e.minY),e.maxY=Math.min(i,e.maxY)},t.binarySearchIndex=function e(t,i,s,n){if(s>n)return-1;let r=Math.floor((s+n)/2);return t[r]===i?r:t[r]>i?e(t,i,s,r-1):e(t,i,r+1,n)},t.encodeFlipId=function(e,t){return 0==e?e:(t.flipHor&&(e+=1073741824),t.flipVert&&(e+=536870912),t.flipDiag&&(e+=268435456),e)},t.moveSmallArrayFast=function(e,t,i){let s,n;if(t!==i&&0<=t&&t<=e.length&&0<=i&&i<=e.length){if(n=e[t],t<i)for(s=t;s<i;s++)e[s]=e[s+1];else for(s=t;s>i;s--)e[s]=e[s-1];e[i]=n}},t.forEachItemAfterIndex=function(e,t,i){for(let s=e+1;s<t.length;s++)i(t[s],s)},t.getPointDeltas=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.roundPoint=function(e,t=!1){return t?(e.x=Math.round(e.x),e.y=Math.round(e.y),e):{x:Math.round(e.x),y:Math.round(e.y)}},t.floorPoint=function(e){return{x:Math.floor(e.x),y:Math.floor(e.y)}},t.getVertexesFromBoundingBox=l,t.drawVertexes=function(e,t,i,s,r=2){const a=null!==i?n(l(t,s+r),i):l(t,s+r);e.lineStyle(r,0,1),e.beginFill(16777215,1),a.forEach(t=>{e.drawRect(t.x,t.y,s,s)}),e.endFill()},t.rectContainsPoint=function(e,t,i=0,s=0){let{x:n,y:r,width:a,height:o}=e;return n-=i/2,r-=s/2,a+=i,o+=s,n<=t.x&&t.x<=n+a&&r<=t.y&&t.y<=r+o},t.rectsCollide=function(e,t){return!(e.y+e.height<t.y||e.y>t.y+t.height||e.x+e.width<t.x||e.x>t.x+t.width)},t.drawDashedPolygon=d,t.chunkArray=function(e,t){const i=[];for(let s=0,n=e.length;s<n;s+=t)i.push(e.slice(s,s+t));return i},t.getSlope=function(e,t){return(t.y-e.y)/(t.x-e.x)},t.drawSelectionBox=function(e,t,i,s,n,r=3){e.clear(),e.moveTo(t,i);let a=t;for(let i=t;i<s;i+=r)i>=s&&e.lineTo,i%s==0&&e.lineTo(a,i)},t.getTextureFromBlob=u,t.bufferToBase64=c,t.getTextureFromBlob2=function(e){return s(this,void 0,void 0,(function*(){const t=window.URL||window.webkitURL;let i,s=!0;try{i=t.createObjectURL(e)}catch(t){s=!1;const n=c(e);i="data:image/png;base64,"+n}const n=new Image;return new Promise((e,r)=>{n.src=i,n.addEventListener("load",r=>(s&&t.revokeObjectURL(i),e(new PIXI.Texture(new PIXI.BaseTexture(n)))))})}))},t.getMultipleTexturesFromBlob=p,t.getBlobFromSprite=g,t.getBlobFromTexture=f,t.dataUrlToTexture=function(e){return s(this,void 0,void 0,(function*(){return u(m(e))}))},t.dataURLtoBlob=m,t.blobToDataURL=y,t.downloadBlobPng=C,t.downloadSpritePng=function(e,t,i){return s(this,void 0,void 0,(function*(){return t instanceof PIXI.RenderTexture||t instanceof PIXI.Sprite||(t=new PIXI.Sprite(t)),new Promise((s,n)=>{e.extract.canvas(t).toBlob(e=>s(C(e,i)),"image/png")})}))},t.asyncTimeout=function(e){return s(this,void 0,void 0,(function*(){return new Promise((t,i)=>{setTimeout(()=>t(),e)})}))},t.downloadJson=function(e,t){const i=new Blob([JSON.stringify(e)],{type:"application/json"}),s=URL.createObjectURL(i),n=document.createElement("a");document.body.append(n),n.download=`${t}.json`,n.href=s,n.click(),n.remove()},t.getMinMaxes=function(e,t){return{minX:Math.min(e.x,t.x),maxX:Math.max(e.x,t.x),minY:Math.min(e.y,t.y),maxY:Math.max(e.y,t.y)}},t.getDataURLFromTexture=function(e,t){return s(this,void 0,void 0,(function*(){return y(yield f(e,t))}))},t.getDataUrlsAndTexturesFromTextures=function(e,t){return s(this,void 0,void 0,(function*(){let i=[],s=[],n=[];if(Array.isArray(t))return i=yield Promise.all(t.map(t=>f(e,t))),s=yield Promise.all(i.map(u)),n=yield Promise.all(i.map(y)),{textures:s,dataUrls:n};{const r=Object.keys(t).map(e=>({texture:t[e],id:e}));i=yield Promise.all(r.map(t=>f(e,t.texture))),s=yield Promise.all(i.map(u)),n=yield Promise.all(i.map(y));const a={},o={};for(let e=0;e<i.length;e++)a[r[e].id]=s[e],o[r[e].id]=n[e];return console.log("returning textures",a),{textures:a,dataUrls:o}}}))},t.getTextureFromDataUrl=function(e,t=1){return s(this,void 0,void 0,(function*(){return p(m(e),t)}))};const x=(w=/^[^\\/:\*\?"<>\|]+$/,v=/^\./,T=/^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i,function(e){return w.test(e)&&!v.test(e)&&!T.test(e)});var w,v,T;t.validateFileName=function(e){return x(e)},t.getAverageRGB=function(e,t=1){let i=-(t-1),s=0,n=0,r=0,a=0;const o=e.data.length;for(;(i+=4*t)<o;)++s,0!==e.data[i+3]&&(n+=e.data[i],r+=e.data[i+1],a+=e.data[i+2]);return n=~~(n/s),r=~~(r/s),a=~~(a/s),(n<<16)+(r<<8)+a}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(1),r="object"==typeof window?window.indexedDB||window.webkitIndexedDB||window.mozIndexedDB||window.OIndexedDB||window.msIndexedDB:self.indexedDB||self.webkitIndexedDb;t.Loader=class{constructor(e,t){this.db=t,this.name=e}initialize(){return s(this,void 0,void 0,(function*(){if(this.db)return!0;const e=r.open(this.name,1);return new Promise((t,i)=>{e.onerror=function(e){console.error("Error creating/accessing IndexedDB database",e)},e.onsuccess=s=>{if(this.db=e.result,this.db.onerror=function(e){return console.error("Error creating/accessing IndexedDB database",e),i("Error creating/accessing IndexedDB database")},!this.db.setVersion)return t(!0);if(1==this.db.version)return this.db.createObjectStore(this.name),t(!0);this.db.setVersion(1).onsuccess=function(){return this.db.createObjectStore(this.name),t(!0)}},e.onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore(this.name)}})}))}deleteItem(e){return s(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readwrite").objectStore(this.name).delete(e);return new Promise((i,s)=>{t.onsuccess=e=>i(!0),t.onerror=t=>s(`Error saving texture to indexedDB: ${e}`)})}))}saveJson(e,t){return s(this,void 0,void 0,(function*(){const i=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(JSON.stringify(t),e);return new Promise((t,s)=>{i.onsuccess=e=>t(!0),i.onerror=t=>s(`Error saving texture to indexedDB: ${e}`)})}))}loadJson(e){return s(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((i,s)=>{t.onsuccess=e=>e.target.result?i(JSON.parse(e.target.result)):i(null),t.onerror=t=>{throw new Error(`Error getting texture from indexedDB: ${e}`)}})}))}saveArrayBuffer(e,t){return s(this,void 0,void 0,(function*(){const i=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(t,e);return new Promise((t,s)=>{i.onsuccess=e=>t(!0),i.onerror=t=>s(`Error saving texture to indexedDB: ${e}`)})}))}loadArrayBuffer(e){return s(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((i,s)=>{t.onsuccess=e=>i(e.target.result),t.onerror=t=>{throw new Error(`Error getting texture from indexedDB: ${e}`)}})}))}saveTexture(e,t){return s(this,void 0,void 0,(function*(){const i=this.db.transaction([this.name],"readwrite");let s;if(t.baseTexture.source){const e=document.createElement("canvas");e.width=t.baseTexture.width,e.height=t.baseTexture.height;const i=e.getContext("2d");console.log("the base texture was",t.baseTexture),i.drawImage(t.baseTexture.source,0,0),s=e.toDataURL("image/png")}if(!s)throw new Error("did not get a datasUrl from texture.");const n=i.objectStore(this.name).put(s,e);return new Promise((t,i)=>{n.onsuccess=e=>t(!0),n.onerror=t=>i(`Error saving texture to indexedDB: ${e}`)})}))}saveImageData(e,t){return s(this,void 0,void 0,(function*(){const i=this.db.transaction([this.name],"readwrite").objectStore(this.name).put(t,e);return new Promise((t,s)=>{i.onsuccess=e=>t(!0),i.onerror=t=>s(`Error saving texture to indexedDB: ${e}`)})}))}loadImageData(e){return s(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((i,s)=>{t.onsuccess=e=>{var t,s;const n=null===(s=null===(t=e)||void 0===t?void 0:t.target)||void 0===s?void 0:s.result;return i(n)},t.onerror=t=>s(new Error(`Error getting texture from indexedDB: ${e}`))})}))}loadTexture(e){return s(this,void 0,void 0,(function*(){const t=this.db.transaction([this.name],"readonly").objectStore(this.name).get(e);return new Promise((i,r)=>{t.onsuccess=e=>s(this,void 0,void 0,(function*(){var t,s;const a=null===(s=null===(t=e)||void 0===t?void 0:t.target)||void 0===s?void 0:s.result;if(!a)return i(null);try{const e=yield n.dataUrlToTexture(a);return i(e)}catch(e){return r(e)}})),t.onerror=t=>(console.error("Error",t),r(new Error(`Error getting texture from indexedDB: ${e}`)))})}))}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(0),r=i(26),a=i(1),o=i(27),h=i(3),l=i(28),d=i(29),u=i(30),c=i(33);var p,g;!function(e){e[e.BATCH_SUB_SECTIONS_RENDER_TEXTURES=0]="BATCH_SUB_SECTIONS_RENDER_TEXTURES",e[e.BATCH_SUB_SECTIONS_CONTAINERS=1]="BATCH_SUB_SECTIONS_CONTAINERS",e[e.LAZY_INDEXED_DB_LOAD=2]="LAZY_INDEXED_DB_LOAD"}(p||(p={})),function(e){e.destroyed="destroyed",e.almost_visible="almost_visible",e.visible="visible"}(g=t.VisibilityStates||(t.VisibilityStates={}));t.ChunkManager=class extends c{constructor(e,t,i,s,n,r,a,o,l,d,u,c=!1){super(),this.curBatchIndex=0,this.curBatchChunkIndexes=[],this.almostVisibleChunkIndexes=[],this.visibleChunkIndexes=[],this.chunksInBatch={},this.initBatches={},this.initiailizedSprites=[],this.trackedChunkBatchIndexes=[],this.chunkTextureAtlasses=[],this.pendingChunkImageLoads={},this.interuptedChunkImages={},this.interuptedChunkData={},this.loadingChunkData={},this.loading={},this.loadedChunks={},this.cachedChunkTextures={},this.indexesToUpdate=[],this.cachedChunkData={},this.containerPool=[],this.showedChunkImages={},this.showedChunkColliders={},this.cachedSmallMapData={},this.addLayerSpritePayloadBatches=[],this.resetting=!1,this.tileSizeBySeqLookup=[],this.seqToTagString={},this.cachedMapChunksDatas={},this.collisionManager=r,this.chunkWidth=1024,this.chunkHeight=1024,this.halfChunkWidth=this.chunkWidth/2,this.halfChunkHeight=this.chunkHeight/2,this.subChunkW=h.RUNTIME_TILE_LAYER_SECTION_SIZE,this.subChunkH=h.RUNTIME_TILE_LAYER_SECTION_SIZE,this.imageManager=a,this.seqToTagString=n,this.worldInitData=i,this.mapsInitData=s,this.tileSizeBySeqLookup=[];for(let e=0;e<this.worldInitData.tileSizeSeqLookup.length;e+=2)this.tileSizeBySeqLookup.push({width:this.worldInitData.tileSizeSeqLookup[e],height:this.worldInitData.tileSizeSeqLookup[e+1]});this.chunkTextureAtlasFactory=t instanceof PIXI.WebGLRenderer?this.webGlAtlasFactory.bind(this,t):this.canvasAtlasFactory.bind(this,t),this.playerViewRect=l.playerViewRect,this.chunkLoaderWorker=u,this.baseUrl=e+"/maps",this.tileManager=o,this.renderer=t,this.useIndexedDbWorker=c,this.containerPool=[],this.indexedDbLoader=d}createWorldChunk(e,t=this.mapMetaData,i){return new o.WorldChunk(t,e,this.chunkTextureAtlasses,this.containerPool,this.tileManager)}_webWorkerInit(e){return s(this,void 0,void 0,(function*(){}))}_defaultInit(e){return s(this,void 0,void 0,(function*(){}))}initSmallMap(e){return s(this,void 0,void 0,(function*(){const t=new u.Decoder(this.tileSizeBySeqLookup,this.seqToTagString,this.worldInitData.propSeqToNameLookup),i=e.id,n=r.mapFileKey(this.baseUrl,i);this.getMapMetaData(i,e.ts);let o=0;{const h=yield a.httpGetAsync(n,!1),l=yield t.decodeMap(1024,1024,128,128,h);if(this.saveMapMetaData(i,l.metaData),1!==l.chunks.length)throw new Error("Small map should only have 1 chunk.");const d=this.mergeChunkLayersAsTextures(l.chunks[0],l.metaData);yield Promise.all(d.map((t,n)=>s(this,void 0,void 0,(function*(){if(!t)return;const s=r.mapFileKey(this.baseUrl,i,n);o++,localStorage.setItem(s,`${e.ts}`);const a=new PIXI.Sprite(t),h=this.renderer.extract.base64(a);yield this.indexedDbLoader.saveImageData(s,h);t.destroy(!0)})))),yield this.saveSmallMapImageAndColliderDataOnly(l.chunks[0],i)}yield this.deleteAllChunksGreaterThan(i,o-1,1)}))}saveSmallMapImageAndColliderDataOnly(e,t){return s(this,void 0,void 0,(function*(){e.layers.forEach(e=>{delete e.tileLayers}),yield this.indexedDbLoader.saveJson(`${t}_init`,e)}))}loadSmallMapImageAndColliderDataOnly(e){return s(this,void 0,void 0,(function*(){const t=this.cachedSmallMapData[e];return t?t.data:yield this.indexedDbLoader.loadJson(`${e}_init`)}))}addSmallMapDataToCache(e,t,i){this.cachedSmallMapData[i]?this.cachedSmallMapData[i].ts=Date.now():this.cachedSmallMapData[i]={textures:t,data:e,ts:Date.now()}}mergeChunkLayersAsTextures(e,t){const i=this.chunkTextureAtlasFactory(),s=this.createWorldChunk(e,t),n=s.initTileLayers(),r=i.mergeAllLayerChunks(n);return s.destroy(),r}saveMapMetaData(e,t,i){localStorage.setItem(r.mapFileKey(this.baseUrl,e),JSON.stringify({ts:i||Date.now(),data:t}))}getMapMetaData(e,t){const i=localStorage.getItem(r.mapFileKey(this.baseUrl,e));if(i){const e=JSON.parse(i);return e.ts<t?null:e.data}return null}requestMapMetaData(e){return s(this,void 0,void 0,(function*(){const t=new u.Decoder(this.tileSizeBySeqLookup,this.seqToTagString,this.worldInitData.propSeqToNameLookup),i=yield a.httpGetAsync(r.mapMetaPath(this.baseUrl,e),!1);return t.decodeMetaData(i)}))}initMassiveMap(e){return s(this,void 0,void 0,(function*(){const t=new u.Decoder(this.tileSizeBySeqLookup,this.seqToTagString,this.worldInitData.propSeqToNameLookup),i=e.id,n=r.mapFileKey(this.baseUrl,i);let o=this.getMapMetaData(i,e.ts);const h=e.chunksTs;if(this.emit("downloading-map",e),this.chunkLoaderWorker)o=yield this.chunkLoaderWorker.requestAndStoreAllMapChunks(e.id),this.saveMapMetaData(i,o,e.ts+1);else{const e=yield a.httpGetAsync(n,!1);let h=0;const{metaData:l}=yield t.decodeMap(1024,1024,128,128,e,(e,t)=>s(this,void 0,void 0,(function*(){const s=r.mapFileKey(this.baseUrl,i,t);h=t,yield this.indexedDbLoader.saveJson(s,e)})));o=l}this.saveMapMetaData(i,o,e.ts+1),h?yield this.deleteAllChunksGreaterThan(i,h.length-1,o.layerTileLayerOrder.length):console.warn("no chunk timestamps were found.. this is fine if im not getting this error probably a week after 7/14/20 cuz i changed some meta data stuffs in midst of a project... otherwise fuck.")}))}init(){return s(this,void 0,void 0,(function*(){const e=[this.initSmallMap.bind(this),this.initMassiveMap.bind(this),this.initMassiveMap.bind(this)];if(this.indexedDbLoader&&"undefined"!=typeof localStorage)for(let t=0;t<this.mapsInitData.length;t++){const i=this.mapsInitData[t];yield e[i.size](i),this.emit("finished-downloading")}}))}deleteAllChunksGreaterThan(e,t,i){return s(this,void 0,void 0,(function*(){let s=r.mapFileKey(this.baseUrl,e,++t),n=localStorage.getItem(s);const a=[];for(;null!==n;){if(localStorage.removeItem(s),a.push(this.indexedDbLoader.deleteItem(s)),i)for(let e=0;e<i;e++)a.push(this.indexedDbLoader.deleteItem(`${s}_${i[e]}`));s=r.mapFileKey(this.baseUrl,e,++t),n=localStorage.getItem(s)}return a.length&&(yield Promise.all(a)),!0}))}hideChunk(e,t){if(this.loading[e])return void(this.interuptedChunkData[e]=!0);const i=this.cachedChunkData[e];i||console.error("could not find index ",e,"in cached chunk data",this.cachedChunkData),this.loadedChunks[e].hidden?console.warn("trying to hide already hidden chunk.... need to check this out "):(this.loadedChunks[e].hide(),this.showedChunkColliders[e]&&this.collisionManager.removeChunkColliders(i),delete this.showedChunkColliders[e])}onChunkVisibilityStateChange(e,t,i){return s(this,void 0,void 0,(function*(){if(e===t)throw new Error("states shouldnt be the same");e===g.visible?t===g.almost_visible?this.hideChunk(i,this.curMapSeq):this.destroyChunk(i):e===g.almost_visible?t===g.destroyed?this.destroyChunk(i):this.showChunk(i,this.curMapSeq):e===g.destroyed&&(t===g.almost_visible?this.batchInitChunk(i,this.curMapSeq):yield this.showChunk(i,this.curMapSeq))}))}nextBatch(){if(this.curBatchChunkIndexes.length){let e=Date.now();this.initBatches[this.curBatchChunkIndexes[this.curBatchIndex]].pop()(),Date.now()-e>100&&console.error("found long batch"),++this.curBatchIndex>=this.curBatchChunkIndexes.length&&(this.curBatchIndex=0)}else if(this.addLayerSpritePayloadBatches.length){let e=this.addLayerSpritePayloadBatches.shift();e.sprite.transform?this.emit("add-subchunk-layer-sprite",e):this.nextBatch()}}batchInitChunk(e,t){return s(this,void 0,void 0,(function*(){if(this.resetting)return!1;if(this.initBatches[e])throw new Error("Already existed");const i=[];let n,r,a=!0;const o=e=>{t===this.curMapSeq&&this.addLayerSpritePayloadBatches.push(e)},h=()=>{this.resetting||t!==this.curMapSeq||(a?i.push(h):r.initBatchRender({x:this.playerViewRect.x+this.playerViewRect.width/2,y:this.playerViewRect.y+this.playerViewRect.height/2}))};const l=()=>{if(a)throw new Error("how the fuck in the fuck did this happen.");r.nextBatch()?i.push(l):(delete r.showed_images,this.removeChunkFromBatch(e))};i.push(l,()=>s(this,void 0,void 0,(function*(){t==this.curMapSeq&&(yield this.forceShowChunkImages(n,t)),t==this.curMapSeq&&this.chunksInBatch[e]&&(this.chunksInBatch[e].showed_images=!0)})),h,()=>s(this,void 0,void 0,(function*(){if(t==this.curMapSeq){if(n=yield this.loadChunkData(e,t),!n)return;this.interuptedChunkData[e]||this.initBatches[e]&&(this.resetting||t!==this.curMapSeq||(a=!1,r=this.createWorldChunk(n),r.on("add-subchunk-layer-sprite",o),this.chunksInBatch[e]=r))}}))),this.initBatches[e]=i,this.curBatchChunkIndexes.push(e)}))}destroyChunkInBatch(e){this.chunksInBatch[e]?(this.chunksInBatch[e].showed_images&&this.removeChunkImages(this.cachedChunkData[e]),this.removeChunkFromBatch(e),this.loadedChunks[e].destroy(),delete this.loadedChunks[e]):this.spliceChunkBatch(e),delete this.showedChunkImages[e]}spliceChunkBatch(e){const t=this.curBatchChunkIndexes.indexOf(e);if(t<0)throw new Error(`couldnt find in ${e}`);this.curBatchChunkIndexes.splice(t,1),delete this.initBatches[e],this.curBatchIndex=0}removeChunkFromBatch(e){if(!this.initBatches[e])throw new Error("at this point chunk index should still be in init batches");this.chunksInBatch[e].removeAllListeners("add-subchunk-layer-sprite"),this.loadedChunks[e]||(this.loadedChunks[e]=this.chunksInBatch[e],this.loadedChunks[e].hidden=!0),delete this.chunksInBatch[e],this.spliceChunkBatch(e)}getVisibleSubChunks(e){const t=[],i=Math.max(0,Math.floor(e.x/this.subChunkW)),s=Math.max(0,Math.floor(e.y/this.subChunkH)),n=Math.min(Math.ceil((e.x+e.width)/this.subChunkW),this.subChunkCols),r=Math.min(Math.ceil((e.y+e.height)/this.subChunkH),this.subChunkRows);for(let e=i;e<n;e++)for(let i=s;i<r;i++){let s=e,n=i*this.subChunkCols+s;n>-1&&n<this.maxSubChunks&&t.push(n)}return t}getVisibleChunks(e){const t=[],i=Math.max(0,Math.floor(e.x/this.chunkWidth)),s=Math.max(0,Math.floor(e.y/this.chunkHeight)),n=Math.min(Math.ceil((e.x+e.width)/this.chunkWidth),this.chunkCols),r=Math.min(Math.ceil((e.y+e.height)/this.chunkHeight),this.chunkRows);for(let e=i;e<n;e++)for(let i=s;i<r;i++){let s=e,n=i*this.chunkCols+s;n>-1&&n<this.maxChunks&&t.push(n)}return t}updateAlmostVisibleChunks(e=0,t=0){const i=[...this.almostVisibleChunkIndexes],s=this.chunkWidth+this.subChunkW,n=this.chunkWidth+this.subChunkW,r=this.playerViewRect.x-s,a=this.playerViewRect.y-n;this.mapMetaData.mapW,this.playerViewRect.width,this.mapMetaData.mapH,this.playerViewRect.height;let o={x:r,y:a,width:this.playerViewRect.width+2*s,height:this.playerViewRect.height+2*n};r<0&&(o.x=0,o.width-=2*r),a<0&&(o.y=0,o.height-=2*a),this.almostVisibleChunkIndexes=this.getVisibleChunks(o).filter(e=>!this.visibleChunkIndexes.includes(e));for(let e=0;e<this.almostVisibleChunkIndexes.length;e++){const t=this.almostVisibleChunkIndexes[e],s=i.indexOf(t);s>-1?i.splice(s,1):this.onChunkVisibilityStateChange(g.destroyed,g.almost_visible,t)}for(let e=0;e<i.length;e++)this.onChunkVisibilityStateChange(g.almost_visible,g.destroyed,i[e])}updateVisibleChunks(e=0,t=0){return s(this,void 0,void 0,(function*(){const e=[...this.visibleChunkIndexes],t=this.subChunkW,i=this.subChunkH,s=this.playerViewRect.x-t,n=this.playerViewRect.y-i;let r={x:s,y:n,width:this.playerViewRect.width+2*t,height:this.playerViewRect.height+2*i};s<0&&(r.x=0,r.width-=2*s),n<0&&(r.y=0,r.height-=2*n),this.visibleChunkIndexes=this.getVisibleChunks(r);for(let t=0;t<this.visibleChunkIndexes.length;t++){const i=this.visibleChunkIndexes[t],s=e.indexOf(i);if(s>-1){e.splice(s,1);continue}const n=this.almostVisibleChunkIndexes.indexOf(this.visibleChunkIndexes[t]);n>-1?(this.almostVisibleChunkIndexes.splice(n,1),this.onChunkVisibilityStateChange(g.almost_visible,g.visible,i)):yield this.onChunkVisibilityStateChange(g.destroyed,g.visible,i)}for(let t=0;t<e.length;t++)this.almostVisibleChunkIndexes.push(e[t]),this.onChunkVisibilityStateChange(g.visible,g.almost_visible,e[t]);const a=this.getVisibleSubChunks({x:this.playerViewRect.x-256,y:this.playerViewRect.y-256,width:this.playerViewRect.width+512,height:this.playerViewRect.height+512});for(let e=0;e<this.visibleChunkIndexes.length;e++){const t=this.loadedChunks[this.visibleChunkIndexes[e]];t&&t.updateVisibleSubChunks(a)}}))}loadLargeMap(e,t){return s(this,void 0,void 0,(function*(){this.chunkLoaderWorker&&(yield this.chunkLoaderWorker.initMap({mapId:e,data:t}));const i=this.chunkTextureAtlasses.length-t.layerTileLayerOrder.length;if(i>0){const e=this.chunkTextureAtlasses.splice(this.chunkTextureAtlasses.length-i);for(let t=0;t<i;t++)e[t].clear()}else if(i<0)for(let e=this.chunkTextureAtlasses.length;e<Math.abs(i);e++)this.chunkTextureAtlasses.push(this.chunkTextureAtlasFactory());if(this.mapMetaData.layerTileLayerOrder.length!==this.chunkTextureAtlasses.length)throw new Error("should be the same.");for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)this.chunkTextureAtlasses[e].initForMap(this.subChunkW,this.subChunkH),this.initiailizedSprites.push([]);this.visibleChunkIndexes.length=0,this.almostVisibleChunkIndexes.length=0,this.chunkCols=Math.ceil(this.mapMetaData.mapW/this.chunkWidth),this.subChunkCols=Math.ceil(this.mapMetaData.mapW/this.subChunkW),this.chunkRows=Math.ceil(this.mapMetaData.mapH/this.chunkHeight),this.subChunkRows=Math.ceil(this.mapMetaData.mapW/this.subChunkH),this.maxChunks=this.chunkCols*this.chunkRows,this.maxSubChunks=this.subChunkCols*Math.ceil(this.mapMetaData.mapH/this.subChunkH),yield this.updateVisibleChunks(0,0),this.updateAlmostVisibleChunks(0,0),this.indexesToUpdate.length&&(this.renderMode,p.LAZY_INDEXED_DB_LOAD),this.initialized=!0}))}loadSmallMapTextures(e,t,i=!1){return s(this,void 0,void 0,(function*(){return e in this.cachedSmallMapData?this.cachedSmallMapData[e].textures:Promise.all(t.map((t,n)=>s(this,void 0,void 0,(function*(){const t=r.mapFileKey(this.baseUrl,e,n);i&&console.time(`texture_${t}`),i&&console.time(`texture_${t} index db load`);const s=yield this.indexedDbLoader.loadImageData(t);i&&console.timeEnd(`texture_${t} index db load`),i&&console.time(`texture_${t} make`);const a=PIXI.Texture.from(s);return i&&console.timeEnd(`texture_${t} make`),i&&console.timeEnd(`texture_${t}`),a}))))}))}loadSmallMap(e,t){return s(this,void 0,void 0,(function*(){for(let e=0;e<t.layerTileLayerOrder.length;e++)this.initiailizedSprites.push([]);let i,s;if(e in this.cachedSmallMapData)this.cachedSmallMapData[e].ts=Date.now(),({data:s,textures:i}=this.cachedSmallMapData[e]);else if(this.indexedDbLoader)i=yield this.loadSmallMapTextures(e,t.layerTileLayerOrder),s=yield this.loadSmallMapImageAndColliderDataOnly(e),this.addSmallMapDataToCache(s,i,e);else{const t=yield a.httpGetAsync(r.mapFileKey(this.baseUrl,e),!1),n=new u.Decoder(this.tileSizeBySeqLookup,this.seqToTagString,this.worldInitData.propSeqToNameLookup),o=yield n.decodeMap(1024,1024,128,128,t);if(this.saveMapMetaData(e,o.metaData),1!==o.chunks.length)throw new Error("Small map should only have 1 chunk.");i=this.mergeChunkLayersAsTextures(o.chunks[0],o.metaData),o.chunks[0].layers.forEach(e=>{delete e.tileLayers}),s=o.chunks[0],this.addSmallMapDataToCache(o.chunks[0],i,e)}this.collisionManager.addChunkColliders(s),yield this.forceShowChunkImages(s,this.curMapSeq);const n=i.map(e=>e?new PIXI.Sprite(e):null);this.emit("add-map-chunk-layers",n)}))}loadMap(e,t,i){return s(this,void 0,void 0,(function*(){this.curMapSeq=i,this.cachedMapChunksDatas[e]&&(clearTimeout(this.cachedMapChunksDatas[e].timeout),this.cachedChunkData=this.cachedMapChunksDatas[e].chunks,delete this.cachedMapChunksDatas[e]),this.mapMetaData=t,this.mapId=e;const s=a.resolveMapSize(this.mapMetaData.mapW,this.mapMetaData.mapH);this.curMapSize=s,s===n.MapSize.SMALL?yield this.loadSmallMap(e,t):yield this.loadLargeMap(e,t)}))}reset(){this.resetting=!0;const e=this.mapId;this.curMapSize!==n.MapSize.SMALL?this.cachedMapChunksDatas[e]={timeout:setTimeout(()=>{delete this.cachedMapChunksDatas[e]}),chunks:Object.assign({},this.cachedChunkData)}:this.cachedSmallMapData[e].ts=Date.now();for(let e=0;e<this.visibleChunkIndexes.length;e++)this.destroyChunk(this.visibleChunkIndexes[e]);for(let e=0;e<this.almostVisibleChunkIndexes.length;e++)this.destroyChunk(this.almostVisibleChunkIndexes[e]);Object.keys(this.loadedChunks).length,Object.keys(this.chunksInBatch).length,Object.keys(this.loadedChunks).forEach(e=>{this.destroyChunk(parseInt(e))}),Object.keys(this.chunksInBatch).forEach(e=>{this.destroyChunk(parseInt(e))});for(let e=0;e<this.chunkTextureAtlasses.length;e++)this.chunkTextureAtlasses[e].clear();this.curBatchChunkIndexes.length=0,this.chunkTextureAtlasses.length=0,this.visibleChunkIndexes.length=0,this.almostVisibleChunkIndexes.length=0,this.initBatches={},this.chunksInBatch={},this.loadedChunks={},this.cachedChunkTextures={},this.initiailizedSprites.length=0,this.imageManager.reset(),this.resetting=!1,this.interuptedChunkImages={},this.pendingChunkImageLoads={},this.loadingChunkData={},this.interuptedChunkData={},this.showedChunkImages={},this.loading={},this.showedChunkColliders={},this.addLayerSpritePayloadBatches.length=0}get renderMode(){return this.indexedDbLoader?p.LAZY_INDEXED_DB_LOAD:p.BATCH_SUB_SECTIONS_CONTAINERS}loadChunk(e,t){return s(this,void 0,void 0,(function*(){if(!this.initialized)throw new Error("Chunk manager not initialized.");const i=yield this.loadChunkData(e,t);if(console.log(";loaded",i),!i)return null;const s=this.cachedChunkTextures[e];return this.resetting||t!==this.curMapSeq?void 0:this.createWorldChunk(i,this.mapMetaData,s)}))}forceCompleteBatches(e,t){return s(this,void 0,void 0,(function*(){const i=this.curBatchChunkIndexes.indexOf(e);if(i<0)throw new Error(`couldnt find in ${e}`);const s=this.initBatches[this.curBatchChunkIndexes[i]];for(;s.length&&t===this.curMapSeq;)yield s.pop()();if(this.curMapSeq!==t)return;if(this.curBatchChunkIndexes.indexOf(e)>-1)throw new Error("Shouldnt have found the chunk index in the batches after forcing.");let n=this.addLayerSpritePayloadBatches.length;for(let t=0;t<n;t++)this.addLayerSpritePayloadBatches[t].chunkIndex==e&&(this.emit("add-subchunk-layer-sprite",this.addLayerSpritePayloadBatches[t]),this.addLayerSpritePayloadBatches.splice(t,1),t--,n--)}))}showChunk(e,t){return s(this,void 0,void 0,(function*(){let i=[];if(this.resetting)return!1;if(this.chunksInBatch[e]){const i=this.chunksInBatch[e];if(yield this.forceCompleteBatches(e,t),t!==this.curMapSeq)return;return this.loadedChunks[e]=i,this.collisionManager.addChunkColliders(this.cachedChunkData[e]),void(this.showedChunkColliders[e]=!0)}{let s;const n=this.loadedChunks[e];if(this.loading[e])return;if(n)i=n.show();else{this.loading[e]=!0;const n=yield this.loadChunkData(e,t);if(!n)return;if(this.interuptedChunkData[e]||this.resetting)return void(this.resetting||delete this.interuptedChunkData[e]);delete this.loading[e];let r=this.cachedChunkTextures[e];if(!r&&(this.renderMode,p.LAZY_INDEXED_DB_LOAD),this.resetting||this.interuptedChunkData[e])return;s=this.createWorldChunk(n,this.mapMetaData,r),i=s.show(),yield this.forceShowChunkImages(n,t),this.loadedChunks[e]=s}this.emit("add-map-sub-chunks",i)}this.showedChunkColliders[e]=!0,this.collisionManager.addChunkColliders(this.cachedChunkData[e])}))}removeChunkImages(e){if(this.showedChunkImages[e.index])for(let t=0;t<e.layers.length;t++){const i=e.layers[t].images;if(i&&(!this.resetting||!this.interuptedChunkImages[e.index]&&!this.pendingChunkImageLoads[e.index]))for(let e in i){const s=i[e];for(let e=0;e<s.length;e+=3){const i=s[e+2];this.initiailizedSprites[t][i]?--this.initiailizedSprites[t][i].chunkCount||(this.initiailizedSprites[t][i].removeFromMap(),delete this.initiailizedSprites[t][i]):this.resetting}}}}forceShowChunkImages(e,t){return s(this,void 0,void 0,(function*(){if(this.resetting)return!1;for(let i=0;i<e.layers.length;i++){2==i&&e.index;const s=e.layers[i].images;if(s)for(let n in s){const r=s[n];for(let s=0;s<r.length;s+=3){const a=r[s+2];if(this.initiailizedSprites[i])if(this.initiailizedSprites[i][a])this.initiailizedSprites[i][a].chunkCount++;else{this.pendingChunkImageLoads[e.index]=!0;const o=yield this.imageManager._getMapImage(parseInt(n),r[s],r[s+1],a,i);if(delete this.pendingChunkImageLoads[e.index],this.curMapSeq!==t)return;if(this.resetting)return this.interuptedChunkImages[e.index]=!0,!1;if(!this.initiailizedSprites[i])return;o.chunkCount=1,this.initiailizedSprites[i][a]=o}}}}this.showedChunkImages[e.index]=!0,e.index}))}destroyInitializedChunk(e){const t=this.cachedChunkData[e];this.showedChunkColliders[e]&&this.collisionManager.removeChunkColliders(t),this.showedChunkImages[e]&&this.removeChunkImages(t),this.loadedChunks[e].destroy(),delete this.loadedChunks[e]}destroyChunk(e){this.cachedChunkData[e];if(this.loadedChunks[e])this.destroyInitializedChunk(e);else if(this.initBatches[e])this.destroyChunkInBatch(e);else if(!this.interuptedChunkData[e]&&!this.loadingChunkData[e])throw console.error(this),new Error("Trying to destroy a chunk that was neither loaded nor in the batch queue. The chunk index was "+e);delete this.showedChunkColliders[e],delete this.showedChunkImages[e],delete this.cachedChunkData[e]}bakeAndSaveNeededChunks(){return s(this,void 0,void 0,(function*(){for(let e=0;e<this.indexesToUpdate.length;e++){const t=this.indexesToUpdate[e],i=(yield this.loadChunk(t,this.curMapSeq)).bake();yield this.saveChunkTextures(t,i),i.forEach(e=>{e.destroy(!0)})}}))}loadAllChunks(){return s(this,void 0,void 0,(function*(){return!0}))}loadChunkData(e,t){return s(this,void 0,void 0,(function*(){if(this.cachedChunkData[e])return this.cachedChunkData[e];if(this.resetting)throw new Error("no loading chunk data while resetting.");const i=this.mapId;let s;if(this.loadingChunkData[e]=!0,this.chunkLoaderWorker)s=yield this.chunkLoaderWorker.getChunkData(e);else{const t=r.mapFileKey(this.baseUrl,this.mapId,e);s=this.indexedDbLoader?yield this.indexedDbLoader.loadJson(t):yield a.httpGetAsync(t,!1)}return this.curMapSeq!==t?(i in this.cachedMapChunksDatas&&(this.cachedMapChunksDatas[i].chunks[e]=s),null):(delete this.loadingChunkData[e],s.index=e,this.resetting?(this.interuptedChunkData[e]=!0,i in this.cachedMapChunksDatas&&(this.cachedMapChunksDatas[i].chunks[e]=s)):this.cachedChunkData[e]=s,s)}))}loadChunkLocalStorage(e){return JSON.parse(localStorage.getItem(`${this.localStorageDataKey}_${e}`))}loadChunkWebWorker(e){return s(this,void 0,void 0,(function*(){return null}))}makeChunkLayerKey(e,t){return`${this.mapId}_${e}_${t}`}deleteChunkTextures(){}saveChunkTextures(e,t){return s(this,void 0,void 0,(function*(){for(let i=0;i<t.length;i++)yield this.indexedDbLoader.saveTexture(this.makeChunkLayerKey(e,i),t[i])}))}loadChunkTextures(e){return s(this,void 0,void 0,(function*(){const t=[],i=this.cachedChunkData[e];if(!i)throw new Error("no chunk data found");for(let s=0;s<i.layers.length;s++)t.push(this.indexedDbLoader.loadTexture(this.makeChunkLayerKey(e,s)));return Promise.all(t)}))}isVisibleWithBuffer(e,t,i){let{x:s,y:n,width:r,height:a}=this.playerViewRect;return s-=t/2,n-=i/2,r+=t,a+=i,e.x<s+r&&e.x+e.width>s&&e.y<n+a&&e.height+e.y>n}webGlAtlasFactory(e){return new d.WebGLTextureAtlas(e)}canvasAtlasFactory(e){return new l.CanvasTextureAtlas(e)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mapFileKey=function(e,t,i){return null!=i?`${e}/${t}/s_${i}`:`${e}/${t}/map`},t.mapMetaPath=function(e,t){return`${e}/${t}/meta`}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(3);class n extends PIXI.utils.EventEmitter{constructor(e,t,i,n,r,a){super(),this.colliders=[],this.subChunkContainers=[],this.subChunkRenderedSprites=[],this.layerRenderedContainers=[],this.isBatching=!1,this.visibleChunks=[],this.spritePool=[],this.initBatches=[],this.initializedSubChunks=!1,this.usingBakedRenderTextures=!1,this.bakingOnTheGo=!1,this.hidden=!1,this.layerContainers=[],this.worldSubChunkIndexes={},this.localChunkIndexesArray=[],this.localToWorldSubChunkIndexes={},this.mapMetaData=e,this.textureAtlassesByLayerIndex=i;const o=e.subChunkW||s.RUNTIME_TILE_LAYER_SECTION_SIZE,h=e.subChunkH||s.RUNTIME_TILE_LAYER_SECTION_SIZE;this.subChunkW=o,this.subChunkH=h,this.subChunkColumns=Math.ceil(t.width/o),this.subChunkRows=Math.ceil(t.height/h),this.maxSubChunks=this.subChunkRows*this.subChunkColumns,this.chunkData=t;const l=Math.ceil(this.mapMetaData.mapW/o),d=Math.floor(this.chunkData.x/o),u=Math.floor(this.chunkData.y/h);this.parentStartingSubChunkIndex=u*l+d;for(let e=0;e<this.subChunkColumns;e++){let t=e+d;for(let i=0;i<this.subChunkRows;i++){const s=(i+u)*l+t,n=i*this.subChunkColumns+e;this.worldSubChunkIndexes[s]=n,this.localToWorldSubChunkIndexes[n]=s}}this.localChunkIndexesArray=Object.keys(this.localToWorldSubChunkIndexes).map(parseInt).sort((e,t)=>e-t),this.tileManager=r,this.containerPool=n}bake(e){const t=[],i=[];for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)i.push(new PIXI.Container);return i.forEach((i,s)=>{e.render(i,t[s])}),t}orderSubChunksByDistanceDescending(e){const t=new Array(this.maxSubChunks);for(let i=0;i<this.maxSubChunks;i++){const n=this.chunkData.x+i%this.subChunkColumns*s.RUNTIME_TILE_LAYER_SECTION_SIZE,r=this.chunkData.y+Math.floor(i/this.subChunkColumns)*s.RUNTIME_TILE_LAYER_SECTION_SIZE;t[i]={i:i,d:Math.sqrt(Math.pow(n-e.x,2)+Math.pow(r-e.y,2))}}return t.sort((e,t)=>e.d-t.d),t.map(e=>e.i)}interuptBatch(){const e=[];this.initBatches.length=0,this.isBatching=!1;for(let t=0;t<this.maxSubChunks;t++)this.subChunkRenderedSprites[t]?e[t]=this.subChunkRenderedSprites[t]:this.subChunkContainers[t]?e[t]=this.subChunkContainers[t]:(this.addTilesToSubChunkContainer(t),e[t]=this.subChunkContainers[t]);return e}initTileLayers(){for(let e=0;e<this.maxSubChunks;e++)this.addTilesToSubChunkContainer(e);const e=new Array(this.mapMetaData.layerTileLayerOrder.length);for(let t=0;t<this.mapMetaData.layerTileLayerOrder.length;t++){e[t]=new Array(this.maxSubChunks);for(let i=0;i<this.maxSubChunks;i++)this.subChunkContainers[i]&&(e[t][i]=this.subChunkContainers[i][t])}return e}initBatchRender(e){var t;const i=this.orderSubChunksByDistanceDescending(e);if(this.isBatching)throw new Error("Alreading batching...");this.isBatching=!0;for(let e=0;e<i.length;e++){const s=i[e];this.subChunkContainers[s]=new Array(this.mapMetaData.layerTileLayerOrder.length);for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)if(this.initBatches.push(this.renderSubChunkLayer.bind(this,s,e,null,null,!0)),null===(t=this.chunkData.layers[e])||void 0===t?void 0:t.tileLayers)for(let t=0;t<this.chunkData.layers[e].tileLayers.length;t++)this.chunkData.layers[e].tileLayers[t]&&this.chunkData.layers[e].tileLayers[t].subChunks[s]&&this.initBatches.push(this.addSizedTilesToSubChunkLayerContainer.bind(this,t,e,s,null,null,!0));this.initBatches.push(()=>{this.subChunkContainers[s]=new Array(this.mapMetaData.layerTileLayerOrder.length),this.subChunkRenderedSprites[s]=new Array(this.mapMetaData.layerTileLayerOrder.length);for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)this.subChunkContainers[s][e]=new PIXI.Container})}}forceBatches(){if(this.initBatches.length>0)for(let e=this.initBatches.length-1;e>=0;e--)this.initBatches[e]();this.initBatches.length=0,this.isBatching=!1}nextBatch(e=0){const t=this.initBatches.pop();if(t){const i=performance.now();return t(),!((e+=performance.now()-i)<2)||this.nextBatch(e)}return this.isBatching=!1,!1}destroy(){this.initBatches.length=0;for(let e=0;e<this.subChunkContainers.length;e++)for(let t=0;t<this.subChunkContainers[e].length;t++)if(this.subChunkRenderedSprites[e]&&this.subChunkRenderedSprites[e][t]){this.textureAtlassesByLayerIndex[t].removeChunkFromTexture(this.localToWorldSubChunkIndexes[e]);const i=this.subChunkRenderedSprites[e][t];i.parent&&i.parent.removeChild(i),i.texture.destroy(!1),i.destroy()}else this.subChunkContainers[e]&&this.subChunkContainers[e][t]&&(Array.from(this.subChunkContainers[e][t].children).forEach(e=>{e.removeFromMap()}),this.subChunkContainers[e][t].destroy());return this.subChunkContainers.length=0,this.subChunkRenderedSprites.length=0,!0}hide(){this.hidden=!0;for(let e=0;e<this.maxSubChunks;e++)for(let t=0;t<this.mapMetaData.layerTileLayerOrder.length;t++)this.subChunkContainers[e]&&this.subChunkContainers[e][t]&&(this.subChunkContainers[e][t].visible=!1),this.subChunkRenderedSprites[e]&&this.subChunkRenderedSprites[e][t]&&(this.subChunkRenderedSprites[e][t].visible=!1);return!0}show(e,t,i){if(this.hidden)for(let e=0;e<this.maxSubChunks;e++)for(let t=0;t<this.mapMetaData.layerTileLayerOrder.length;t++)this.subChunkContainers[e]&&this.subChunkContainers[e][t]&&(this.subChunkContainers[e][t].visible=!0),this.subChunkRenderedSprites[e]&&this.subChunkRenderedSprites[e][t]&&(this.subChunkRenderedSprites[e][t].visible=!0);else if(this.isBatching)this.forceBatches();else for(let e=0;e<this.maxSubChunks;e++)this.subChunkRenderedSprites[e]||this.renderSubChunk(e),this.isBatching=!1;return this.subChunkRenderedSprites}bakeSubChunk(e){return[]}updateVisibleSubChunks(e){const t={};for(let i=0;i<e.length;i++)if(e[i]in this.worldSubChunkIndexes){const s=this.worldSubChunkIndexes[e[i]];if(t[s]=!0,this.subChunkContainers[s])for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)this.subChunkContainers[s][e]&&(this.subChunkContainers[s][e].visible=!0);if(this.subChunkRenderedSprites[s])for(let e=0;e<this.mapMetaData.layerTileLayerOrder.length;e++)this.subChunkRenderedSprites[s][e]&&(this.subChunkRenderedSprites[s][e].visible=!0)}for(let e=0;e<this.localChunkIndexesArray.length;e++)if(!t[this.localChunkIndexesArray[e]]){if(this.subChunkContainers[this.localChunkIndexesArray[e]])for(let t=0;t<this.mapMetaData.layerTileLayerOrder.length;t++)this.subChunkContainers[this.localChunkIndexesArray[e]][t]&&(this.subChunkContainers[this.localChunkIndexesArray[e]][t].visible=!1);if(this.subChunkRenderedSprites[this.localChunkIndexesArray[e]])for(let t=0;t<this.mapMetaData.layerTileLayerOrder.length;t++)this.subChunkRenderedSprites[this.localChunkIndexesArray[e]][t]&&(this.subChunkRenderedSprites[this.localChunkIndexesArray[e]][t].visible=!1)}}renderSubChunkLayer(e,t,i,n,r=!1,a=!0){const o=performance.now();if(this.subChunkRenderedSprites[e][t]){const i=this.subChunkRenderedSprites[e][t];return this.emit("add-subchunk-layer-sprite",{chunkIndex:this.chunkData.index,layerIndex:t,sprite:i,subsectionIndex:e}),i}this.subChunkContainers[e][t]||this.addTilesToSubChunkLayerContainer(t,e,i,n);const h=this.subChunkContainers[e][t];if(!h||!h.children.length)return;const{x:l,y:d}=h.getLocalBounds();i=this.chunkData.x+e%this.subChunkColumns*s.RUNTIME_TILE_LAYER_SECTION_SIZE,n=this.chunkData.y+Math.floor(e/this.subChunkColumns)*s.RUNTIME_TILE_LAYER_SECTION_SIZE;const u=this.textureAtlassesByLayerIndex[t].renderSubChunkLayerGroup(this.localToWorldSubChunkIndexes[e],h),c=new PIXI.Sprite;c.texture=u,this.subChunkRenderedSprites[e][t]=c,Array.from(h.children).forEach((e,t)=>{e.removeFromMap()}),h.destroy(!1),c.x=i+l,c.y=n+d,c.visible=!1;performance.now();return this.emit("add-subchunk-layer-sprite",{chunkIndex:this.chunkData.index,layerIndex:t,sprite:c,subsectionIndex:e}),c}renderSubChunk(e,t=!0){this.forceBatches();const i=this.chunkData.x+e%this.subChunkColumns*s.RUNTIME_TILE_LAYER_SECTION_SIZE,n=this.chunkData.y+Math.floor(e/this.subChunkColumns)*s.RUNTIME_TILE_LAYER_SECTION_SIZE;if(this.subChunkRenderedSprites[e]||(this.subChunkRenderedSprites[e]=new Array(this.mapMetaData.layerTileLayerOrder.length)),this.subChunkContainers[e])for(let s=0;s<this.mapMetaData.layerTileLayerOrder.length;s++)!this.subChunkRenderedSprites[e][s]&&this.renderSubChunkLayer(e,s,i,n,t);else{this.addTilesToSubChunkContainer(e);for(let s=0;s<this.mapMetaData.layerTileLayerOrder.length;s++)this.renderSubChunkLayer(e,s,i,n,t)}return this.subChunkRenderedSprites[e]}addSizedTilesToSubChunkLayerContainer(e,t,i,n,r,a=!1){const o=this.chunkData.layers,{layerId:h,colliders:l,tileLayers:d,images:u}=o[t];if(!d[e]||!d[e].subChunks[i])return;n=i%this.subChunkColumns*s.RUNTIME_TILE_LAYER_SECTION_SIZE,Math.floor(i/this.subChunkColumns),s.RUNTIME_TILE_LAYER_SECTION_SIZE;const c=this.subChunkContainers[i][t];if(!c)throw new Error("should have container at this point");const{tileWidth:p,tileHeight:g,tileSizeSeq:f,subChunks:m,maxTileId:y,startOffsets:C}=d[e],x=m[i];let w=x[0],v=x[1];for(let e=2;e<m[i].length;e++){let t=m[i][e],r=t;if(t){let e;if(t>y){let i=!!(1073741824&t),s=!!(536870912&t),n=!!(268435456&t);r&=-1879048193,e=this.tileManager.getTile(f,r);let a=0,o=0,h=1,l=1;s&&(l=-1,a=g),i&&(h=-1,o=p),n&&(e.rotation=Math.PI/180*90,i||(o=0),a=s?0:g),e.colliders}else e=this.tileManager.getTile(f,t);e.x=w,e.y=v,c.addChild(e)}w+=p,(w>=s.RUNTIME_TILE_LAYER_SECTION_SIZE||w>=this.chunkData.x+this.chunkData.width-n)&&(w=x[0],v+=g)}}addTilesToSubChunkLayerContainer(e,t,i,s){var n;const r=this.chunkData.layers;0==e&&0==t&&this.parentStartingSubChunkIndex;if(this.subChunkContainers[t]||(this.subChunkContainers[t]=[]),!(null===(n=r[e])||void 0===n?void 0:n.tileLayers))return;const{layerId:a,colliders:o,tileLayers:h,images:l}=r[e];this.subChunkContainers[t][e]=new PIXI.Container;for(let n=0;n<h.length;n++)h[n]&&h[n].subChunks[t]&&(this.subChunkContainers[t][e].x=i,this.subChunkContainers[t][e].y=s,this.addSizedTilesToSubChunkLayerContainer(n,e,t,i,s))}addTilesToSubChunkContainer(e){if(this.subChunkContainers[e])return;const t=this.chunkData.layers,i=this.chunkData.x+e%this.subChunkColumns*s.RUNTIME_TILE_LAYER_SECTION_SIZE,n=this.chunkData.y+Math.floor(e/this.subChunkColumns)*s.RUNTIME_TILE_LAYER_SECTION_SIZE;this.subChunkContainers[e]=[];for(let s=0;s<t.length;s++)this.addTilesToSubChunkLayerContainer(s,e,i,n);this.initializedSubChunks=!0}getOffset(e,t){}getVisibleIndexes(e){const{x:t,y:i,width:s,height:n}=this.chunkData;return[]}}t.WorldChunk=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(10);class n extends s.AbstractTextureAtlas{constructor(e){super(2048,e),this.lookup={}}removeChunkFromTexture(e){if(!this.lookup[e])return;const{x:t,y:i,w:s,h:n,aIdx:r,texture:a}=this.lookup[e];delete this.lookup[e],this.addOpenSpot(r,t,i,s,n)}}t.CanvasTextureAtlas=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(10);class n extends s.AbstractTextureAtlas{constructor(e){super(e.gl.MAX_TEXTURE_SIZE,e),this.lookup={}}removeChunkFromTexture(e){if(!this.lookup[e])return;const{x:t,y:i,w:s,h:n,aIdx:r,texture:a}=this.lookup[e];this.renderer.bindRenderTexture(this.atlasses[r]);const o=this.renderer.gl;o.enable(o.SCISSOR_TEST),o.scissor(t,i,s,n),this.renderer.clear(),this.renderer.bindRenderTexture(),delete this.lookup[e],this.addOpenSpot(r,t,i,s,n)}}t.WebGLTextureAtlas=n},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(31),r=i(3),a=i(32),o=i(0);t.Decoder=class{constructor(e,t,i){this.propSeqToNameLookup={},this.tileIdToSizeLookup=[],this.tagSeqToStringLookup={},this.tileIdToSizeLookup=e,this.tagSeqToStringLookup=t,this.propSeqToNameLookup=i||{}}decodeMetaData(e){const t=e[0],i=e[1];let s=2,n=0;const a=[];let o,h=1;for(;;){if(e[s]===r.RESERVED_FLAGS.BLOB_SEPARATOR){if(h++,2===h){o=s+1;break}}else 1===h?(e[s]===r.RESERVED_FLAGS.EMPTY_SECTION_FLAG?a.push(null):a.push([e[s]]),n=a.length-1,h=0):a[n].push(e[s]);s++}return{mapW:t,mapH:i,startingChunkIndex:o,layerTileLayerOrder:a}}adjustNeg(e){return e.x>r.RESERVED_FLAGS.NEGATIVE_NUMBER&&(e.x&=~r.RESERVED_FLAGS.NEGATIVE_NUMBER,e.x*=-1),e.y>r.RESERVED_FLAGS.NEGATIVE_NUMBER&&(e.y&=~r.RESERVED_FLAGS.NEGATIVE_NUMBER,e.y*=-1),e}decodeString(e,t){let i="",s=t[e++];for(;s!=r.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR;)i+=String.fromCharCode(s),s=t[e++];return{decodedString:i,endIndex:e}}decodePropStrings(e,t){const i={};let s=null,n=t[e];for(;n!=r.RESERVED_FLAGS.BLOB_SEPARATOR;)if(n==r.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)s=null,n=t[++e];else if(null===s){if(s=this.propSeqToNameLookup[n],!s)throw new Error("Expected prop");i[s]="",n=t[++e]}else i[s]+=String.fromCharCode(n),n=t[++e];return{endIndex:e+1,props:i}}decodePropNumbers(e,t){const i={};let s=t[e];for(;s!=r.RESERVED_FLAGS.BLOB_SEPARATOR;){const n=this.propSeqToNameLookup[t[e++]];if(!n)throw new Error("Did not find seq.");let a=t[e++];a>r.RESERVED_FLAGS.NEGATIVE_NUMBER&&(a&=~r.RESERVED_FLAGS.NEGATIVE_NUMBER,a*=-1),i[n]=a,s=t[e]}return{endIndex:e+1,props:i}}decodePropBooleans(e,t){const i={};let s=t[e];for(;s!=r.RESERVED_FLAGS.BLOB_SEPARATOR;){const n=this.propSeqToNameLookup[t[e++]];if(!n)throw new Error("Did not find seq.");let r=!!t[e++];i[n]=r,s=t[e]}return{endIndex:e+1,props:i}}decodePolygon(e,t){let i=e;const s=t[i++],n=t[i++];let r=[];const a=t[i++];for(;r.length<a;)r.push(this.adjustNeg({x:t[i++],y:t[i++]}));const h={colObj:{id:s,shapeType:o.RuntimeColliderShape.POLYGON,shapeData:r},endIndex:i};return this.decodeColliderTagsAndProps(h,n,t,i),h}decodeProps(e,t){let i,s={};return t[e]===r.RESERVED_FLAGS.EMPTY_SECTION_FLAG?{endAtIndex:e+1}:(({endIndex:e,props:i}=this.decodePropBooleans(e,t)),s=Object.assign(Object.assign({},s),i),({endIndex:e,props:i}=this.decodePropNumbers(e,t)),s=Object.assign(Object.assign({},s),i),({endIndex:e,props:i}=this.decodePropStrings(e,t)),s=Object.assign(Object.assign({},s),i),{props:s,endAtIndex:e})}mapTags(e){return e.map(e=>{if(!(e in this.tagSeqToStringLookup))throw new Error(`Could not find tag seq ${e} in lookup.`);return this.tagSeqToStringLookup[e]})}decodeRect(e,t){let i=e;const s=t[i++],n=t[i++],r=this.adjustNeg({x:t[i++],y:t[i++],w:t[i++],h:t[i++]}),a={colObj:{id:s,shapeType:o.RuntimeColliderShape.RECT,shapeData:r},endIndex:i};return this.decodeColliderTagsAndProps(a,n,t,i),a}decodeColliderTagsAndProps(e,t,i,s){const{tags:n,endAtIndex:r}=this.decodeTags(t,i,s);n&&(e.colObj.tags=n),e.endIndex=r;const{endAtIndex:a,props:o}=this.decodeProps(r,i);o&&(e.colObj.props=o),e.endIndex=a}decodeTags(e,t,i){let s;if(!e)return{endAtIndex:i};for(s=[];s.length<e;)s.push(t[i++]);return{tags:this.mapTags(s),endAtIndex:i}}decodePoint(e,t){let i=e;const s=t[i++],n=t[i++],r=this.adjustNeg({x:t[i++],y:t[i++]}),a={colObj:{id:s,shapeType:o.RuntimeColliderShape.POINT,shapeData:r},endIndex:i};return this.decodeColliderTagsAndProps(a,n,t,i),a}decodeCollider(e,t,i){switch(e){case"polygons":return this.decodePolygon(t,i);case"rects":return this.decodeRect(t,i);case"points":return this.decodePoint(t,i);default:throw new Error(`Unhandled type ${e}`)}}decodeColliders(e,t,i){const s=new Array(i);let n=!1,r=0;const a=["points","rects","polygons"];let o=e;for(;r<i;){let e=0;for(;e<a.length;){let i=0,h=t[o++];for(;i<h;){n=!0,s[r]||(s[r]={}),s[r][a[e]]||(s[r][a[e]]=new Array(h));const{endIndex:l,colObj:d}=this.decodeCollider(a[e],o,t);o=l,s[r][a[e]][i]=d,i++}e++}r++}return{decoded:n?s:null,endIndex:o}}splitChunkArrayLayers(e,t){const i=new Array(t.length),s=new Array(t.length);let n=0;for(let a=0;a<t.length;a++){s[a]=[];const o=t[a];if(o&&o.length){i[a]=[],o.forEach(()=>{i[a].push([])});let t=0;for(;t<o.length;)e[n]===r.RESERVED_FLAGS.BLOB_SEPARATOR?t++:i[a][t].push(e[n]),n++}else i[a]=null}let a,o=0,h=!1,l=!0,d=0,u=!0;for(;o<t.length;){5==e[n+1]&&e[n+2];const i=e[n];if(l)a=i,a||(s[o]=null),l=!1;else if(i===r.RESERVED_FLAGS.BLOB_SEPARATOR)u=!0,o++,o<t.length&&(l=!0);else if(i===r.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)u=!0,s[o].push(i);else{h=!0,d++,d===(u?4:3)&&(d=0,u=!1),s[o].push(i)}n++}const{endIndex:c,decoded:p}=this.decodeColliders(n,e,t.length);n=c;const g={tileArrays:i};return h&&(g.images=s),p&&(g.colliders=p),g}decodeChunk(e,t,i,s,r,o,h,l,d){d=Array.isArray(d)?d:n.default.uncompress(d);const u=Math.ceil(t/s),c=e%u*s,p=Math.floor(e/u)*r,{endX:g,endY:f}=a.calculateEndOfChunk(t,i,s,r,c,p),m={index:e,x:c,y:p,width:g-c,height:f-p,layers:new Array(l.length)},y=this.splitChunkArrayLayers(d,l),C=!!y.images,x=!!y.colliders;for(let e=0;e<l.length;e++){const n=l[e];m.layers[e]={layerId:e},n&&(m.layers[e].tileLayers=n.map((n,a)=>{const{width:l,height:d}=this.tileIdToSizeLookup[n],u=y.tileArrays[e][a];return{tileSizeSeq:n,maxTileId:1e4,tileWidth:l,tileHeight:d,subChunks:u?this.unmergeSubsectionTiles(l,d,o,h,s,r,c,p,t,i,u):null}})),C&&y.images[e]&&(m.layers[e].images=this.unmergeLayerImages(y.images[e])),x&&y.colliders[e]&&(m.layers[e].colliders=y.colliders[e])}return m}getCompressedChunksFromMap(e,t,i){const s=n.default.uncompress(i),{mapW:a,mapH:o,startingChunkIndex:h,layerTileLayerOrder:l}=this.decodeMetaData(s),d=Math.ceil(a/e)*Math.ceil(o/t);let u=0;const c=new Array(d);for(let e=0;e<d;e++)c[e]=[];for(let e=h;e<s.length;e++)if(s[e]!==r.RESERVED_FLAGS.CHUNK_SEPERATOR)c[u].push(s[e]);else{if(++u,u===d){if(e!==s.length-1)throw new Error("Should be on last element by the time it gets here.");break}c[u]=[]}return{metaData:{mapW:a,mapH:o,startingChunkIndex:h,layerTileLayerOrder:l},buffers:c.map(e=>n.default.compress(e))}}decodeMap(e,t,i,a,o,h){return s(this,void 0,void 0,(function*(){const s=Array.isArray(o)?o:n.default.uncompress(o),{mapW:l,mapH:d,startingChunkIndex:u,layerTileLayerOrder:c}=this.decodeMetaData(s),p=(c.length,Math.ceil(l/e)*Math.ceil(d/t)),g=new Array(p);g[0]=[];let f=0;for(let e=u;e<s.length;e++)if(s[e]!==r.RESERVED_FLAGS.CHUNK_SEPERATOR)g[f].push(s[e]);else{if(++f,f===p){if(e!==s.length-1)throw new Error("Should be on last element by the time it gets here.");break}g[f]=[]}const m=[];if(h)for(let s=0;s<g.length;s++){const n=this.decodeChunk(s,l,d,e,t,i,a,c,g[s]);m.push(n),yield h(n,s)}else for(let s=0;s<g.length;s++)m.push(this.decodeChunk(s,l,d,e,t,i,a,c,g[s]));return{metaData:{mapW:l,mapH:d,startingChunkIndex:u,layerTileLayerOrder:c},chunks:m}}))}unmergeLayerImages(e){const t={};let i=!0,s=0,n=null;for(let a=0;a<e.length;a++)if(e[a]!==r.RESERVED_FLAGS.IMAGE_AND_STRING_SEPERATOR)if(i)n=e[a],t[n]=[],i=!1;else{let i=e[a];s<2&&i>r.RESERVED_FLAGS.NEGATIVE_NUMBER&&(i&=~r.RESERVED_FLAGS.NEGATIVE_NUMBER,i*=-1),t[n].push(i),s++,3===s&&(s=0)}else i=!0;return t}unmergeSubsectionTiles(e,t,i,s,n,o,h,l,d,u,c,p){let g,f;p?(g=p.x,f=p.y):({endX:g,endY:f}=a.calculateEndOfChunk(d,u,n,o,h,l));const m=a.calculateSubChunks(d,u,n,o,h,l,i,s),y=new Array(m).fill(-1);let C=0,x=h,w=l,{x:v,y:T}=a.getTopLeftPadding(e,t,d,u,i,s,x,w),b=v,S=T;const k=()=>{C++,b=0,S=0,x+=i,x>=g&&(x=h,w+=s),({x:v,y:T}=a.getTopLeftPadding(e,t,d,u,i,s,x,w)),b=v,S=T};for(let n=0;n<c.length;n++)if(c[n]===r.RESERVED_FLAGS.EMPTY_SECTION_FLAG){if(-1!==y[C])throw new Error("This sub chunk should have been -1 at this time");y[C]=null,k()}else{if(-1===y[C]&&(y[C]=[v,T]),y[C].push(c[n]),b+=e,x+b>=g||b>=i){b=v,S+=t,(w+S>=f||S>=s)&&k()}}return y}}},function(e,t,i){"use strict";function s(){}function n(e){return e<128?1:e<16384?2:e<1<<21?3:e<1<<28?4:5}function r(e){return e+e^e>>31}function a(e){return e>>1^-(1&e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=s,s.computeCompressedSizeInBytes=function(e){for(var t=e.length,i=0,s=0;s<t;s++)i+=n(e[s]);return i},s.computeCompressedSizeInBytesSigned=function(e){for(var t=e.length,i=0,s=0;s<t;s++)i+=n(r(e[s]));return i},s.compress=function(e){for(var t=e.length,i=new ArrayBuffer(s.computeCompressedSizeInBytes(e)),n=new Int8Array(i),r=0,a=0;a<t;a++){var o=e[a];o<128?n[r++]=o:o<16384?(n[r++]=127&o|128,n[r++]=o>>>7):o<1<<21?(n[r++]=127&o|128,n[r++]=o>>>7&127|128,n[r++]=o>>>14):o<1<<28?(n[r++]=127&o|128,n[r++]=o>>>7&127|128,n[r++]=o>>>14&127|128,n[r++]=o>>>21):(n[r++]=127&o|128,n[r++]=o>>>7&127|128,n[r++]=o>>>14&127|128,n[r++]=o>>>21&127|128,n[r++]=o>>>28)}return i},s.computeHowManyIntegers=function(e){for(var t=new Int8Array(e).length,i=0,s=0;s<t;s++)i+=e[s]>>>7;return t-i},s.uncompress=function(e){for(var t=[],i=new Int8Array(e),s=i.length,n=0;s>n;){var r=i[n++],a=127&r;r>=0?t.push(a):(a|=(127&(r=i[n++]))<<7,r>=0?t.push(a):(a|=(127&(r=i[n++]))<<14,r>=0?t.push(a):(a|=(127&(r=i[n++]))<<21,r>=0?t.push(a):(a|=(r=i[n++])<<28,t.push(a)))))}return t},s.compressSigned=function(e){for(var t=e.length,i=new ArrayBuffer(s.computeCompressedSizeInBytesSigned(e)),n=new Int8Array(i),a=0,o=0;o<t;o++){var h=r(e[o]);h<128?n[a++]=h:h<16384?(n[a++]=127&h|128,n[a++]=h>>>7):h<1<<21?(n[a++]=127&h|128,n[a++]=h>>>7&127|128,n[a++]=h>>>14):h<1<<28?(n[a++]=127&h|128,n[a++]=h>>>7&127|128,n[a++]=h>>>14&127|128,n[a++]=h>>>21):(n[a++]=127&h|128,n[a++]=h>>>7&127|128,n[a++]=h>>>14&127|128,n[a++]=h>>>21&127|128,n[a++]=h>>>28)}return i},s.uncompressSigned=function(e){for(var t=[],i=new Int8Array(e),s=i.length,n=0;s>n;){var r=i[n++],o=127&r;r>=0?t.push(a(o)):(o|=(127&(r=i[n++]))<<7,r>=0?t.push(a(o)):(o|=(127&(r=i[n++]))<<14,r>=0?t.push(a(o)):(o|=(127&(r=i[n++]))<<21,r>=0?t.push(a(o)):(o|=(r=i[n++])<<28,t.push(a(o))))))}return t}},function(e,t,i){"use strict";function s(e,t,i,s,n,r,a,o){const h=e-n,l=t-r,d=Math.min(Math.ceil(i/a),Math.ceil(h/a));return{rows:Math.min(Math.ceil(s/o),Math.ceil(l/o)),columns:d}}Object.defineProperty(t,"__esModule",{value:!0}),t.calculateEndOfChunk=function(e,t,i,s,n,r){const a=e-n,o=t-r;return{endX:n+(a>=i?i:a),endY:r+(o>=s?s:o)}},t.calculateSubChunks=function(e,t,i,n,r,a,o,h){const{rows:l,columns:d}=s(e,t,i,n,r,a,o,h);return l*d},t.calculateRowsAndColumns=s,t.getTopLeftPadding=function(e,t,i,s,n,r,a,o){const h={x:0,y:0},l=Math.floor(a/n),d=Math.floor(o/r);let u=(e-n%e)*l,c=Math.floor(u/e);return h.x=u-c*e,u=(t-r%t)*d,c=Math.floor(u/t),h.y=u-c*t,h},t.calculateOffsets=function(e,t,i,s,n,r,a,o){const h=Math.ceil(i/n),l=Math.ceil(s/r),d={x:0,y:0},u=Math.floor(a/n),c=Math.floor(o/r);let p=(e-n%e)*u,g=Math.floor(p/e);d.x=p-g*e,p=(t-r%t)*c,g=Math.floor(p/t),d.y=p-g*t;const f={x:0,y:0};return u<h-1&&(p=(e-n%e)*(u+1),g=Math.floor(p/e),f.x=p-g*e),c<l-1&&(p=(t-r%t)*(c+1),g=Math.floor(p/t),f.y=p-g*t),{bottomRightOverflow:f,topLeftPadding:d}}},function(e,t,i){"use strict";var s=Object.prototype.hasOwnProperty,n="~";function r(){}function a(e,t,i){this.fn=e,this.context=t,this.once=i||!1}function o(e,t,i,s,r){if("function"!=typeof i)throw new TypeError("The listener must be a function");var o=new a(i,s||e,r),h=n?n+t:t;return e._events[h]?e._events[h].fn?e._events[h]=[e._events[h],o]:e._events[h].push(o):(e._events[h]=o,e._eventsCount++),e}function h(e,t){0==--e._eventsCount?e._events=new r:delete e._events[t]}function l(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),l.prototype.eventNames=function(){var e,t,i=[];if(0===this._eventsCount)return i;for(t in e=this._events)s.call(e,t)&&i.push(n?t.slice(1):t);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(e)):i},l.prototype.listeners=function(e){var t=n?n+e:e,i=this._events[t];if(!i)return[];if(i.fn)return[i.fn];for(var s=0,r=i.length,a=new Array(r);s<r;s++)a[s]=i[s].fn;return a},l.prototype.listenerCount=function(e){var t=n?n+e:e,i=this._events[t];return i?i.fn?1:i.length:0},l.prototype.emit=function(e,t,i,s,r,a){var o=n?n+e:e;if(!this._events[o])return!1;var h,l,d=this._events[o],u=arguments.length;if(d.fn){switch(d.once&&this.removeListener(e,d.fn,void 0,!0),u){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,t),!0;case 3:return d.fn.call(d.context,t,i),!0;case 4:return d.fn.call(d.context,t,i,s),!0;case 5:return d.fn.call(d.context,t,i,s,r),!0;case 6:return d.fn.call(d.context,t,i,s,r,a),!0}for(l=1,h=new Array(u-1);l<u;l++)h[l-1]=arguments[l];d.fn.apply(d.context,h)}else{var c,p=d.length;for(l=0;l<p;l++)switch(d[l].once&&this.removeListener(e,d[l].fn,void 0,!0),u){case 1:d[l].fn.call(d[l].context);break;case 2:d[l].fn.call(d[l].context,t);break;case 3:d[l].fn.call(d[l].context,t,i);break;case 4:d[l].fn.call(d[l].context,t,i,s);break;default:if(!h)for(c=1,h=new Array(u-1);c<u;c++)h[c-1]=arguments[c];d[l].fn.apply(d[l].context,h)}}return!0},l.prototype.on=function(e,t,i){return o(this,e,t,i,!1)},l.prototype.once=function(e,t,i){return o(this,e,t,i,!0)},l.prototype.removeListener=function(e,t,i,s){var r=n?n+e:e;if(!this._events[r])return this;if(!t)return h(this,r),this;var a=this._events[r];if(a.fn)a.fn!==t||s&&!a.once||i&&a.context!==i||h(this,r);else{for(var o=0,l=[],d=a.length;o<d;o++)(a[o].fn!==t||s&&!a[o].once||i&&a[o].context!==i)&&l.push(a[o]);l.length?this._events[r]=1===l.length?l[0]:l:h(this,r)}return this},l.prototype.removeAllListeners=function(e){var t;return e?(t=n?n+e:e,this._events[t]&&h(this,t)):(this._events=new r,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=n,l.EventEmitter=l,e.exports=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(1);var n;!function(e){e[e.INFINITE_SIZE=0]="INFINITE_SIZE",e[e.FIXED_VIEW=1]="FIXED_VIEW",e[e.MAX_SIZE=2]="MAX_SIZE"}(n=t.LevelCameraRenderMode||(t.LevelCameraRenderMode={}));class r{constructor(e={},t,i,r){this.focused=!1,this.viewRect={x:0,y:0,width:0,height:0},this.offsetViewRect={x:0,y:0,width:0,height:0},this.centeredScreenPosition={x:0,y:0},this.mapOffsetX=0,this.mapOffsetY=0,this.mapPaddingLeft=0,this.mapPaddingTop=0,this.resizeWithScreen=!0,this.stopCameraAtBoundaries=!0,this.isStopping=!1,this.staticSprites=[],this.dynamicSprites=[],this.playerViewRect={x:0,y:0,width:0,height:0},this.resolution=1,this.computedResolution=1,this.centeredScreenPosition={x:0,y:0},this.renderer=r,this.gameStage=t,this.flags=i,e=s.mergeOptions(e,{renderMode:n.INFINITE_SIZE,resolution:1,resizeWithScreen:!0,viewWidth:"undefined"!=typeof window?window.innerWidth:"undefined"!=typeof screen?screen.width:null,viewHeight:"undefined"!=typeof window?window.innerHeight:"undefined"!=typeof screen?screen.height:null,stopCameraAtBoundaries:!0},["resolution","viewWidth","viewHeight"]),this.resolution=e.resolution,this.renderMode=e.renderMode,this.resizeView(e.viewWidth,e.viewHeight),this.resizeWithScreen=!1!==e.resizeWithScreen,this.stopCameraAtBoundaries=e.stopCameraAtBoundaries,this.handleRemovedFocusedGameObject=this.handleRemovedFocusedGameObject.bind(this)}reset(){this.staticSprites.length=0,this.dynamicSprites.length=0,this.gameStage.x=0,this.gameStage.y=0}handleRemovedFocusedGameObject(){this.focusedGameObject.offRemovedFromMap(this.handleRemovedFocusedGameObject),this.focusedGameObject=null,this.focusOn({x:this.focusedGameObject.worldX,y:this.focusedGameObject.worldY})}focusOn(e,t=0,i=0){return this.preFocusBoundPoint=this.boundCameraCenter,this.bindCameraCenter(e)}removeSprite(e){if(Array.isArray(e))for(let t=0;t<e.length;t++){const i=e[t].isStatic?this.staticSprites:this.dynamicSprites;for(let s=0;s<i.length;s++)if(e[t]===i[s]){i.splice(s,1);break}}else{const t=e.isStatic?this.staticSprites:this.dynamicSprites;for(let i=0;i<t.length;i++)if(e===t[i])return void t.splice(i,1)}}addSingleStaticSprite(e){this.staticSprites.push(e)}addStaticSprites(e){if(Array.isArray(e))for(let t=0;t<e.length;t++)this.staticSprites.push(e[t]);else this.staticSprites.push(e)}addDynamicSprite(e){if(Array.isArray(e))for(let t=0;t<e.length;t++)this.dynamicSprites.push(e[t]);else this.dynamicSprites.push(e)}onUpdateCamera(e){const t=r.prototype;this.updateStage=()=>{e(t.updateStage.bind(this))}}updateStage(){this.boundCameraCenter?(this.boundPositionOffsets?this.updateViewRect(Math.round(this.boundCameraCenter.x)+this.boundPositionOffsets.x,Math.round(this.boundCameraCenter.y)+this.boundPositionOffsets.y):this.updateViewRect(Math.round(this.boundCameraCenter.x),Math.round(this.boundCameraCenter.y)),this.gameStage.x=-this.playerViewRect.x,this.gameStage.y=-this.playerViewRect.y):console.error("Call world.bindCameraCenter on an object with an x and y variable.")}bindCameraCenter(e,t){this.boundPositionOffsets=t,this.boundCameraCenter=e,this.playerViewRect.x=Math.max(0,Math.min(this.playerViewRect.x,this.levelWidthInPixels-this.playerViewRect.width)),this.playerViewRect.y=Math.max(0,Math.min(this.playerViewRect.y,this.levelHeightInPixels-this.playerViewRect.height)),this.gameStage.x=-this.playerViewRect.x,this.gameStage.y=-this.playerViewRect.y,this.lastX=this.boundCameraCenter.x,this.lastY=this.boundCameraCenter.y}updateMapSize(e,t){this.mapOffsetX=0,this.mapOffsetY=0,this.levelWidthInPixels=e,this.levelHeightInPixels=t,this.levelHeightResAdjusted=t*this.resolution,this.levelWidthResAdjusted=e*this.resolution,this.viewWidth*this.resolution>this.levelWidthResAdjusted&&(this.mapOffsetX=Math.floor((this.viewWidth*this.resolution-this.levelWidthResAdjusted)/2)),this.viewHeight*this.resolution>this.levelHeightResAdjusted&&(this.mapOffsetY=Math.floor((this.viewHeight*this.resolution-this.levelHeightResAdjusted)/2))}isOutOfMap(e){}isVisibleWithBuffer(e,t,i){let{x:s,y:n,width:r,height:a}=this.playerViewRect;const o=t/2,h=i/2;return s-=o,n-=h,r+=o,a+=h,e.x<s+r&&e.x+e.width>s&&e.y<n+a&&e.height+e.y>n}isVisible(e){const{x:t,y:i,width:s,height:n}=this.playerViewRect;return e.x<t+s&&e.x+e.width>t&&e.y<i+n&&e.height+e.y>i}worldToScreen(e,t){return e-=this.playerViewRect.x,t-=this.playerViewRect.y,e/=this.ratioW,t/=this.ratioH,{x:e+this.mapPaddingLeft,y:t+this.mapPaddingTop}}screenToWorld(e,t){return{x:(e-this.mapPaddingLeft)*this.ratioW+this.playerViewRect.x,y:(t-this.mapPaddingTop)*this.ratioH+this.playerViewRect.y}}focusedCameraUpdate(){const e=this.focusedPoint.x+this.focusOffsetX,t=this.focusedPoint.y+this.focusOffsetY;this.updateViewRect(e,t)}updateViewRect(e,t){this.playerViewRect.x=e-this.halfWidth,this.playerViewRect.y=t-this.halfHeight,this.offsetViewRect.x=this.playerViewRect.x+this.mapOffsetX,this.offsetViewRect.y=this.playerViewRect.y+this.mapOffsetY,this.centeredScreenPosition.x=e+this.mapOffsetX,this.centeredScreenPosition.y=t+this.mapOffsetY;const{x:i,y:s}=this.centeredScreenPosition;if(this.stopCameraAtBoundaries){const e=Math.floor(i-this.halfWidth),t=e+this.viewWidth,n=Math.floor(s-this.halfHeight),r=n+this.viewHeight;this.isStopping=!1,e<=this.mapOffsetX?(this.playerViewRect.x=0,this.offsetViewRect.x=this.mapOffsetX,this.isStopping=!0,this.centeredScreenPosition.x=this.halfWidth+this.mapOffsetX):t>=this.levelWidthInPixels+this.mapOffsetX&&(this.playerViewRect.x=Math.max(this.levelWidthInPixels-this.viewWidth,0),this.offsetViewRect.x=this.playerViewRect.x+this.mapOffsetX,this.isStopping=!0,this.centeredScreenPosition.x=Math.floor(this.levelWidthInPixels+this.mapOffsetX-this.halfWidth)),n<=this.mapOffsetY?(this.playerViewRect.y=0,this.offsetViewRect.y=this.mapOffsetY,this.isStopping=!0,this.centeredScreenPosition.y=this.halfHeight+this.mapOffsetY):r>this.levelHeightInPixels+this.mapOffsetY&&(this.playerViewRect.y=Math.max(this.levelHeightInPixels-this.viewHeight),this.offsetViewRect.y=this.playerViewRect.y+this.mapOffsetY,this.isStopping=!0,this.centeredScreenPosition.y=Math.floor(this.levelHeightInPixels+this.mapOffsetY-this.halfHeight))}}updatePlayerSprite(e,t){this.isStopping||this.focused?(this.playerSprite.x=e-this.playerViewRect.x+this.mapOffsetX,this.playerSprite.y=t-this.playerViewRect.y+this.mapOffsetY):(this.playerSprite.x=this.centeredScreenPosition.x-this.playerViewRect.x+this.mapOffsetX,this.playerSprite.y=this.centeredScreenPosition.y-this.playerViewRect.y+this.mapOffsetY)}updateLevelSprites(e){for(let e=0;e<this.staticSprites.length;e++){const t=this.staticSprites[e];t.visible&&(t.x=t.worldX-this.playerViewRect.x+this.mapOffsetX,t.y=t.worldY-this.playerViewRect.y+this.mapOffsetY)}}focusOff(){if(!this.preFocusBoundPoint)throw new Error("No point to focus off onto.");this.bindCameraCenter(this.preFocusBoundPoint),delete this.preFocusBoundPoint}centerViewRect(e,t){this.centeredScreenPosition.x=e+this.mapOffsetX,this.centeredScreenPosition.y=t+this.mapOffsetY,this.playerViewRect.x=Math.floor(e-this.viewWidth/2),this.playerViewRect.y=Math.floor(t-this.viewHeight/2),this.offsetViewRect.x=this.playerViewRect.x+this.mapOffsetX,this.offsetViewRect.y=this.playerViewRect.y+this.mapOffsetY;for(let e=0;e<this.staticSprites.length;e++){const t=this.worldToScreen(this.staticSprites[e].worldX,this.staticSprites[e].worldY);this.staticSprites[e].x=t.x,this.staticSprites[e].y=t.y}}onResolutionUpdate(e){const{resolution:t,viewWidth:i,viewHeight:s,offsetWidth:n,offsetHeight:r,canvasWidth:a,canvasHeight:o,fixedResolution:h}=e;if(this.renderer.autoResize=!1,this.computedResolution=t,this.flags.webGl){if(t>=1){this.resolution=1,this.renderer.screen.width=i,this.renderer.screen.height=s,this.renderer.view.style.width=`${i*t}px`,this.renderer.view.style.height=`${s*t}px`;const e=this.renderer.view.parentElement.clientWidth,a=this.renderer.view.parentElement.clientHeight,o=1===t?n:(e-i*t)/2,h=1===t?r:(a-s*t)/2;this.renderer.view.style.marginLeft=`${o}px`,this.renderer.view.style.marginTop=`${h}px`,this.mapPaddingLeft=o,this.mapPaddingTop=h,this.renderer.view.width=i,this.renderer.view.height=s,this.resizeView(i,s);const l=this.renderer.rootRenderTarget;l&&l.resize(i,s)}else{this.resolution=t,this.renderer.plugins.interaction.resolution=1/t,this.renderer.screen.width=i/t,this.renderer.screen.height=s/t,this.renderer.view.style.width=`${i}px`,this.renderer.view.style.height=`${s}px`,this.renderer.view.width=Math.round(i/t),this.renderer.view.height=Math.round(s/t),this.renderer.view.style.marginLeft=`${(a-i)/2}px`,this.renderer.view.style.marginTop=`${(o-s)/2}px`,this.mapPaddingLeft=(a-i)/2,this.mapPaddingTop=(o-s)/2,this.resizeView(i,s);const e=this.renderer.rootRenderTarget;e&&e.resize(i/t,s/t)}this.renderer._activeRenderTarget&&this.renderer._activeRenderTarget===this.renderer.rootRenderTarget&&(this.renderer.rootRenderTarget.activate(),this.renderer._activeShader&&(this.renderer._activeShader.uniforms.projectionMatrix=this.renderer.rootRenderTarget.projectionMatrix.toArray(!0))),this.ratioW=this.renderer.screen.width/this.renderer.view.clientWidth,this.ratioH=this.renderer.screen.height/this.renderer.view.clientHeight,this.mapPaddingLeft*=this.ratioW,this.mapPaddingTop*=this.ratioH}}resizeView(e,t){if(!e)throw new Error("Cannot determine screen width");if(!t)throw new Error("Cannot determine screen width");this.resizeViewHeight(t),this.resizeViewWidth(e)}resizeViewWidth(e){this.viewWidth=Math.floor(e/this.resolution),this.halfWidth=Math.floor(this.viewWidth/2),this.playerViewRect.width=this.viewWidth,this.viewWidth>Math.ceil(this.levelWidthResAdjusted/this.resolution)?this.mapOffsetX=Math.floor((this.viewWidth-this.levelWidthResAdjusted)/2):this.mapOffsetX=0,this.centeredScreenPosition.x=this.viewWidth/2+this.mapOffsetX}resizeViewHeight(e){this.viewHeight=Math.floor(e/this.resolution),this.halfHeight=Math.floor(this.viewHeight/2),this.playerViewRect.height=this.viewHeight,this.viewHeight>this.levelHeightResAdjusted?this.mapOffsetY=Math.floor((this.viewHeight-this.levelHeightResAdjusted)/2):this.mapOffsetY=0,this.centeredScreenPosition.y=Math.floor(this.viewHeight/2+this.mapOffsetY)}}t.PlayerCamera=r},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(11),r=i(36);t.ChunkLoaderWorker=class{constructor(){this.nextReq=0,this.pendingRequests={},this.worker=new r,this.worker.onmessage=e=>{this.pendingRequests[e.data[1]](e.data[0])}}initWorld(e,t,i,r,a){return s(this,void 0,void 0,(function*(){if(i.length&&i.length%2)throw new Error("the tile size seq lookup should have an even amount of elements since its a width, height flat array.");return this.awaitResponse(n.Messages.INIT_LOADER,JSON.stringify([e,t,i,r,a]))}))}initMap(e){return s(this,void 0,void 0,(function*(){return this.awaitResponse(n.Messages.INIT_MAP,JSON.stringify(e))}))}getChunkData(e){return s(this,void 0,void 0,(function*(){const t=yield this.awaitResponse(n.Messages.GET_SECTION_DATA,e);return JSON.parse(t)}))}requestAndStoreAllMapChunks(e){return s(this,void 0,void 0,(function*(){const t=yield this.awaitResponse(n.Messages.REQUEST_AND_SAVE_ALL_MAP_CHUNKS,e);if(t===n.ResultCodes.ERROR)throw new Error(`Error decoding map chunk in the worker for map id ${e}`);return JSON.parse(t)}))}requestAndStoreSingleMapChunk(e,t){return s(this,void 0,void 0,(function*(){return this.awaitResponse(n.Messages.REQUEST_AND_SAVE_SINGLE_MAP_CHUNK,[e,t])}))}requestAndStoreMapChunks(e,t){return s(this,void 0,void 0,(function*(){yield this.awaitResponse(n.Messages.REQUEST_AND_SAVE_MAP_CHUNKS,[e,t])}))}awaitResponse(e,t){return s(this,void 0,void 0,(function*(){const i=++this.nextReq>65535?0:this.nextReq;return this.worker.postMessage([t,e,i]),new Promise(e=>{this.pendingRequests[i]=t=>(delete this.pendingRequests[i],e(t))})}))}}},function(e,t,i){e.exports=function(){return new Worker(i.p+"82608f8a2e4dcfc7a29b.worker.js")}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0),n=i(1),r=i(38),a={[s.RuntimeColliderShape.RECT]:"rects",[s.RuntimeColliderShape.POINT]:"points",[s.RuntimeColliderShape.POLYGON]:"polygons",[s.RuntimeColliderShape.CIRCLE]:"circles",[s.RuntimeColliderShape.LINE]:"lines"},o=new Array(4);o[s.RuntimeColliderShape.POINT]=(e,t)=>t,o[s.RuntimeColliderShape.RECT]=(e,t)=>({w:e.w,h:e.h,x:t.x,y:t.y}),o[s.RuntimeColliderShape.POLYGON]=(e,t)=>{const i=t.x-e[0].x,s=t.y-e[0].y;return e.map(e=>({x:e.x+=i,y:e.y+=s}))},o[s.RuntimeColliderShape.CIRCLE]=(e,t)=>({x:t.x,y:t.y,r:e.r});t.SpatialGrid=class{constructor(){this.uidIdx=1,this.dynamicColliders=[],this.staticColliders=[],this.iteration=0,this.collidersByTag={},this.colliderTags=[],this.tagCouples=[],this.staticBuckets={},this.uidCheckedCollidedMap={},this.uidArray=[],this.checkedMap={},this.curSeq=1,this.resolvePointLine=function(e,t,i,s,n,r,a=.5){const o=Math.sqrt(Math.pow(e-i,2)+Math.pow(t-s,2)),h=Math.sqrt(Math.pow(e-n,2)+Math.pow(t-r,2)),l=Math.sqrt(Math.pow(n-i,2)+Math.pow(r-s,2));return o+h>=l-a&&o+h<=l+a},this.getCollidersWithTags=r.getCollidersWithTags.bind(this,this.collidersByTag),this.getBucketsLookup=new Array(5),this.getBucketsLookup[s.RuntimeColliderShape.RECT]=this.getBucketsForRect.bind(this),this.getBucketsLookup[s.RuntimeColliderShape.POLYGON]=this.getBucketsForPolygon.bind(this),this.getBucketsLookup[s.RuntimeColliderShape.POINT]=this.getBucketsForPoint.bind(this),this.getBucketsLookup[s.RuntimeColliderShape.CIRCLE]=this.getBucketsForCircle.bind(this),this.getBucketsLookup[s.RuntimeColliderShape.LINE]=this.getBucketsForLine.bind(this)}onInit(e,t){const i=n.resolveMapSize(e,t);switch(i){case s.MapSize.LARGE:this.cellSize=256;break;case s.MapSize.MEDIUM:this.cellSize=128;break;case s.MapSize.SMALL:this.cellSize=64;break;default:throw new Error(`Invalid map size. ${i}`)}this.rows=Math.ceil(t/this.cellSize),this.cols=Math.ceil(e/this.cellSize)}onClear(){this.checkedMap={},this.curSeq=1,this.uidIdx=1,this.dynamicColliders.length=0,this.staticColliders.length=0,this.staticBuckets={},this.cellSize=0}getAllColliders(){return[...this.dynamicColliders,...this.staticColliders]}onAddedTagToCollider(e,t){if(this.addColliderToType(e,[t],a[e.shapeType]),e.isPolygon){if(this.handleAddedTagToPolygon(e,t),!e.dynamic){const t=e._bcache||this.getBucketsLookup[e.shapeType](e.shapeData);t.length>8&&(e._bcache=t);for(let i=0;i<t.length;i++)this.staticBuckets[t[i]]?this.staticBuckets[t[i]].push(e):this.staticBuckets[t[i]]=[e];for(let t=0;t<e.lines.length;t++){const i=this.getBucketsForLine(e.lines[t]);for(let t=0;t<i.length;t++)this.staticBuckets[i[t]].push(e)}}}else if(this.updateCheckMapOnAdd(e._uid,e,t),!e.dynamic){const t=this.getBucketsLookup[e.shapeType](e.shapeData);for(let i=0;i<t.length;i++)this.staticBuckets[t[i]]?this.staticBuckets[t[i]].push(e):this.staticBuckets[t[i]]=[e]}}onRemovedTagFromCollider(e,t){if(e.isPolygon){if(this.removeColliderFromType(e,[t],"polygons"),this.updateCheckMapOnPolygonRemove(e._uid,e,t),!e.tags){this.removeStaticColliderFromBucket(e);for(let t=0;t<e.lines.length;t++)this.removeStaticColliderFromBucket(e.lines[t])}}else this.removeColliderFromType(e,[t],a[e.shapeType]),this.updateCheckMapOnRemove(e._uid,e,t),e.tags||this.removeStaticColliderFromBucket(e)}getTagCoupleArrayForTag(e){for(let t=0;t<this.tagCouples.length;t++)if(this.tagCouples[t][0]===e)return this.tagCouples[t];return 1}onAddedColliderCouple(e,t){let i,s;if(e===t)for(let n=0;n<this.tagCouples.length;n++){if(this.tagCouples[n][0]===e){i=this.tagCouples[n];for(let s=1;s<i.length;s++)if(i[s]===t)throw new Error(`Trying to add duplicate tag couple ${e} and ${t}`)}if(this.tagCouples[n][0]===t){s=this.tagCouples[n];for(let i=1;i<s.length;i++)if(s[i]===e)throw new Error(`Trying to add duplicate tag couple ${e} and ${t}`)}}else{let n=0;for(let r=0;r<this.tagCouples.length;r++)if(this.tagCouples[r][0]===e){n++,i=this.tagCouples[r];for(let s=1;s<i.length;s++)if(i[s]===t)throw new Error(`Trying to add duplicate tag couple ${e} and ${t}`);if(2===n)break}else if(this.tagCouples[r][0]===t){n++,s=this.tagCouples[r];for(let i=1;i<s.length;i++)if(s[i]===e)throw new Error(`Trying to add duplicate tag couple ${e} and ${t}`);if(2===n)break}}i?i.push(t):(i=[e,t],this.tagCouples.push(i)),s?s.push(e):(s=[t,e],this.tagCouples.push(s));const n=this.collidersByTag[e],r=this.collidersByTag[t];if(n&&r){if(n.rects)for(let t=0;t<n.rects.length;t++)this.updateCheckMapOnAdd(n.rects[t]._uid,n.rects[t],e,s);if(n.points)for(let t=0;t<n.points.length;t++)this.updateCheckMapOnAdd(n.points[t]._uid,n.points[t],e,s);if(n.circles)for(let t=0;t<n.circles.length;t++)this.updateCheckMapOnAdd(n.circles[t]._uid,n.circles[t],e,s);if(n.polygons)for(let t=0;t<n.polygons.length;t++){const i=n.polygons[t],r=[];if(this.updateCheckMapOnPolygonAdd(i._uid,i,e,s,r),r.length)for(let e=0;e<i.lines.length;e++){const t=i.lines[e].uid;for(let e=0;e<r.length;e++)this.checkedMap[t][r[e]]=1,this.checkedMap[r[e]][t]=1}}if(n.lines)for(let t=0;t<n.lines.length;t++)n.lines[t].parent||this.updateCheckMapOnAdd(n.circles[t]._uid,n.rects[t],e)}return!0}collidersShareInitializedCouple(e,t,i){for(let s=0;s<e.tags.length;s++){const n=e.tags[s];let r=i[n];if(r||(r=this.getTagCoupleArrayForTag(n),i[n]=r),1!==r)for(let e=1;e<r.length;e++)for(let i=0;i<t.tags.length;i++)if(r[e]===t.tags[i])return!0}for(let s=0;s<t.tags.length;s++){const n=t.tags[s];let r=i[n];if(r||(r=this.getTagCoupleArrayForTag(n),i[n]=r),1!==r)for(let t=1;t<r.length;t++)for(let i=0;i<e.tags.length;i++)if(r[t]===e.tags[i])return!0}}onRemovedColliderCouple(e,t){let i=-1,s=-1;for(let n=0;n<this.tagCouples.length;n++)if(this.tagCouples[n][0]===e){i=n;for(let e=1;e<this.tagCouples[n].length;e++)this.tagCouples[n][e]===t&&(s=e);break}i>-1&&s>-1&&(this.tagCouples[i].splice(s,1),1===this.tagCouples[i].length&&this.tagCouples.splice(i,1));let n=-1,r=-1;for(let i=0;i<this.tagCouples.length;i++)if(this.tagCouples[i][0]===t){n=i;for(let t=1;t<this.tagCouples[i].length;t++)this.tagCouples[i][t]===e&&(r=t);break}n>-1&&r>-1&&(this.tagCouples[n].splice(r,1),1===this.tagCouples[n].length&&this.tagCouples.splice(n,1));const a={};this.forEachColliderWithTag(e,e=>{this.forEachColliderWithTag(t,t=>{t!==e&&(this.collidersShareInitializedCouple(e,t,a)||(delete this.checkedMap[e._uid][t._uid],delete this.checkedMap[t._uid][e._uid]))})})}onAddedStaticCollider(e){if(e._uid=this.uidIdx++,this.staticColliders.push(e),e.tags)if(this.addColliderToType(e,e.tags,a[e.shapeType]),this._onAddedColliderWithTags(e),e.isPolygon){e.lines.forEach(e=>{this.onAddedStaticCollider(e)}),delete e._cached_uids;const t=this.getBucketsLookup[e.shapeType](e.shapeData);t.length>8&&(e._bcache=t);for(let i=0;i<t.length;i++)this.staticBuckets[t[i]]?this.staticBuckets[t[i]].push(e):this.staticBuckets[t[i]]=[e]}else{const t=this.getBucketsLookup[e.shapeType](e.shapeData);for(let i=0;i<t.length;i++)this.staticBuckets[t[i]]?this.staticBuckets[t[i]].push(e):this.staticBuckets[t[i]]=[e]}}onAddedDynamicCollider(e){e._uid=this.uidIdx++,this.dynamicColliders.push(e),e.tags&&(this.addColliderToType(e,e.tags,a[e.shapeType]),this._onAddedColliderWithTags(e)),e.shapeType===s.RuntimeColliderShape.POLYGON&&(e.lines.forEach(e=>{this.onAddedDynamicCollider(e)}),delete e._cached_uids)}_onAddedColliderWithTags(e){performance.now();const t=e._uid;if(this.checkedMap[t]={},e.parent)for(let i=0;i<e.parent._cached_uids.length;i++){const s=e.parent._cached_uids[i];this.checkedMap[t][s]=1,this.checkedMap[s][t]=1}else e.isPolygon?(e._cached_uids=[],e.tags.forEach(i=>{this.updateCheckMapOnPolygonAdd(t,e,i,e._cached_uids)})):e.tags.forEach(i=>{this.updateCheckMapOnAdd(t,e,i)})}onRemovedDynamicCollider(e){for(let t=0;t<this.dynamicColliders.length;t++)if(this.dynamicColliders[t]===e){this.dynamicColliders.splice(t,1);break}e.tags&&(this.removeColliderFromType(e,e.tags,a[e.shapeType]),e.parent||this._onRemovedColliderWithTags(e))}_onRemovedColliderWithTags(e){if(e.isPolygon){for(let t=0;t<e.lines.length;t++)delete this.checkedMap[e.lines[t]];Object.keys(this.checkedMap[e._uid]).forEach(t=>{for(let i=0;i<e.lines.length;i++)delete this.checkedMap[t][e.lines[i]._uid];delete this.checkedMap[t][e._uid]})}else Object.keys(this.checkedMap[e._uid]).forEach(t=>{delete this.checkedMap[t][e._uid]});delete this.checkedMap[e._uid]}handleAddedTagToPolygon(e,t){const i=[];if(this.updateCheckMapOnPolygonAdd(e._uid,e,t,i),this.collidersByTag[t].lines?this.collidersByTag[t].lines.push(...e.lines):this.collidersByTag[t].lines=[...e.lines],i.length)for(let t=0;t<e.lines.length;t++)for(let s=0;s<i.length;s++)this.checkedMap[e.lines[t]._uid][i[s]]=1,this.checkedMap[i[s]][e.lines[t]._uid]=1}forEachColliderWithTag(e,t){if(!this.collidersByTag[e])return;const i=this.collidersByTag[e];if(i.rects)for(let e=0;e<i.rects.length;e++)t(i.rects[e]);if(i.polygons)for(let e=0;e<i.polygons.length;e++)t(i.polygons[e]);if(i.lines)for(let e=0;e<i.lines.length;e++)t(i.lines[e]);if(i.circles)for(let e=0;e<i.circles.length;e++)t(i.circles[e]);if(i.points)for(let e=0;e<i.points.length;e++)t(i.points[e])}updateCheckMapOnPolygonRemove(e,t,i){const s=e=>{if(t.tags)for(let i=0;i<t.tags.length;i++)for(let s=0;s<e.tags.length;s++)if(t.tags[i]===e.tags[s])return!0;return!1};if(this.collidersByTag[i]){const n=this.collidersByTag[i];if(n.rects)for(let i=0;i<n.rects.length;i++){const r=n.rects[i];s(r)||(delete this.checkedMap[e][r._uid],delete this.checkedMap[r._uid][e],t.lines.forEach(e=>{delete this.checkedMap[e._uid][r._uid],delete this.checkedMap[r._uid][e._uid]}))}if(n.polygons)for(let i=0;i<n.polygons.length;i++){const r=n.polygons[i];s(r)||(delete this.checkedMap[e][r._uid],delete this.checkedMap[r._uid][e],t.lines.forEach(e=>{delete this.checkedMap[e._uid][r._uid],delete this.checkedMap[r._uid][e._uid]}),r.lines.forEach(i=>{delete this.checkedMap[e][i._uid],delete this.checkedMap[i._uid][e],t.lines.forEach(e=>{delete this.checkedMap[i._uid][e._uid],delete this.checkedMap[e._uid][i._uid]})}))}if(n.circles)for(let i=0;i<n.circles.length;i++){const r=n.circles[i];s(r)||(delete this.checkedMap[e][r._uid],delete this.checkedMap[r._uid][e],t.lines.forEach(e=>{delete this.checkedMap[e._uid][r._uid],delete this.checkedMap[r._uid][e._uid]}))}if(n.lines)for(let i=0;i<n.lines.length;i++){const r=n.lines[i];s(r)||(delete this.checkedMap[e][r._uid],delete this.checkedMap[r._uid][e],t.lines.forEach(e=>{delete this.checkedMap[e._uid][r._uid],delete this.checkedMap[r._uid][e._uid]}))}if(n.points)for(let i=0;i<n.points.length;i++){const r=n.points[i];s(r)||(delete this.checkedMap[e][r._uid],delete this.checkedMap[r._uid][e],t.lines.forEach(e=>{delete this.checkedMap[e._uid][r._uid],delete this.checkedMap[r._uid][e._uid]}))}}}updateCheckMapOnRemove(e,t,i){const s=e=>{if(t.tags)for(let i=0;i<t.tags.length;i++)for(let s=0;s<e.tags.length;s++)if(t.tags[i]===e.tags[s])return!0;return!1};if(this.collidersByTag[i]){const t=this.collidersByTag[i];if(t.rects)for(let i=0;i<t.rects.length;i++){const n=t.rects[i];s(n)||(delete this.checkedMap[e][n._uid],delete this.checkedMap[n._uid][e])}if(t.polygons)for(let i=0;i<t.polygons.length;i++){const n=t.polygons[i];s(n)||(delete this.checkedMap[e][n._uid],delete this.checkedMap[n._uid][e],n.lines.forEach(t=>{delete this.checkedMap[e][t._uid],delete this.checkedMap[t._uid][e]}))}if(t.circles)for(let i=0;i<t.circles.length;i++){const n=t.circles[i];s(n)||(delete this.checkedMap[e][n._uid],delete this.checkedMap[n._uid][e])}if(t.lines)for(let i=0;i<t.lines.length;i++){const n=t.lines[i];s(n)||(delete this.checkedMap[e][n._uid],delete this.checkedMap[n._uid][e])}if(t.points)for(let i=0;i<t.points.length;i++){const n=t.points[i];s(n)||(delete this.checkedMap[e][n._uid],delete this.checkedMap[n._uid][e])}}}updateCheckMapOnPolygonAdd(e,t,i,s,n){if(1!=(n=n||this.getTagCoupleArrayForTag(i)))for(let i=1;i<n.length;i++){const r=this.collidersByTag[n[i]];if(r){if(r.rects)for(let t=0;t<r.rects.length;t++){const i=r.rects[t];this.checkedMap[e][i._uid]||(s.push(i._uid),this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1)}if(r.points)for(let t=0;t<r.points.length;t++){const i=r.points[t];this.checkedMap[e][i._uid]||(s.push(i._uid),this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1)}if(r.polygons)for(let t=0;t<r.polygons.length;t++){const i=r.polygons[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(s.push(i._uid),this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}if(r.circles)for(let t=0;t<r.circles.length;t++){const i=r.circles[t];this.checkedMap[e][i._uid]||(s.push(i._uid),this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1)}if(r.lines)for(let i=0;i<r.lines.length;i++){const n=r.lines[i];n.parent&&n.parent===t||this.checkedMap[e][n._uid]||(s.push(n._uid),this.checkedMap[e][n._uid]=1,this.checkedMap[n._uid][e]=1)}}}}updateCheckMapOnAdd(e,t,i,s){if(1!==(s=s||this.getTagCoupleArrayForTag(i)))for(let i=1;i<s.length;i++){const n=this.collidersByTag[s[i]];if(n){if(n.rects)for(let t=0;t<n.rects.length;t++){const i=n.rects[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}if(n.points)for(let t=0;t<n.points.length;t++){const i=n.points[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}if(n.polygons)for(let t=0;t<n.polygons.length;t++){const i=n.polygons[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}if(n.circles)for(let t=0;t<n.circles.length;t++){const i=n.circles[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}if(n.lines)if(t.parent)for(let i=0;i<n.lines.length;i++){const s=n.lines[i];e===s._uid||s.parent&&t.parent===s.parent||t.parent===s.parent||this.checkedMap[e][s._uid]||(this.checkedMap[e][s._uid]=1,this.checkedMap[s._uid][e]=1)}else for(let t=0;t<n.lines.length;t++){const i=n.lines[t];e!==i._uid&&(this.checkedMap[e][i._uid]||(this.checkedMap[e][i._uid]=1,this.checkedMap[i._uid][e]=1))}}}}onRemovedStaticCollider(e){for(let t=0;t<this.staticColliders.length;t++)if(this.staticColliders[t]===e){this.staticColliders.splice(t,1);break}e.tags&&(e.parent||this._onRemovedColliderWithTags(e),this.removeColliderFromType(e,e.tags,a[e.shapeType]),this.removeStaticColliderFromBucket(e))}removeStaticColliderFromBucket(e){const t=e._bcache?e._bcache:this.getBucketsLookup[e.shapeType](e.shapeData);for(let i=0;i<t.length;i++)for(let s=0;s<this.staticBuckets[t[i]].length;s++){const n=t[i];if(this.staticBuckets[n][s]===e){this.staticBuckets[n].splice(s,1),this.staticBuckets[n].length||delete this.staticBuckets[n];break}}}addColliderToType(e,t,i){for(let s=0;s<t.length;s++){const n=t[s];this.collidersByTag[n]||(this.collidersByTag[n]={}),this.collidersByTag[n][i]||(this.collidersByTag[n][i]=[]),this.collidersByTag[n][i].push(e)}}removeColliderFromType(e,t,i){for(let s=0;s<t.length;s++){const n=t[s],r=this.collidersByTag[n][i];for(let t=0;t<r.length;t++)if(r[t]===e){r.splice(t,1),r.length||delete this.collidersByTag[n][i],Object.keys(this.collidersByTag[n]).length||delete this.collidersByTag[n];break}}if(e.isPolygon)for(let i=0;i<e.lines.length;i++)this.removeColliderFromType(e.lines[i],t,"lines")}getActiveBuckets(){const e={};for(let t=0;t<this.dynamicColliders.length;t++){const i=this.dynamicColliders[t];if(!i.tags)continue;const n=this.getBucketsLookup[i.shapeType](i.shapeData);i.shapeType,s.RuntimeColliderShape.LINE,this.iteration;for(let t=0;t<n.length;t++)e[n[t]]?e[n[t]].push(i):this.staticBuckets[n[t]]?e[n[t]]=[...this.staticBuckets[n[t]],i]:e[n[t]]=[i]}return e}getCollisions(e){this.curSeq++,this.iteration++;performance.now();const t=this.getActiveBuckets();performance.now();this.iteration;const i=[];for(let e in t){const s=t[e];for(let e=0;e<s.length;e++){let t=s[e]._uid;for(let n=s.length-1;n>0&&n!==e;n--){let r=s[n]._uid;const a=this.checkedMap[t][r];a&&a!==this.curSeq&&(this.checkedMap[t][r]=this.curSeq,this.checkedMap[r][t]=this.curSeq,this.resolveCollision(s[e],s[n])&&(i.push(s[e]),i.push(s[n])))}}}return this.curSeq>6e4&&(this.curSeq=1),i}resolveCollision(e,t){const i=e.shapeData,n=t.shapeData;if(e.shapeType===s.RuntimeColliderShape.RECT){if(t.shapeType===s.RuntimeColliderShape.RECT)return i.x+i.w>=n.x&&i.x<=n.x+n.w&&i.y+i.h>=n.y&&i.y<=n.y+n.h;if(t.shapeType===s.RuntimeColliderShape.CIRCLE)return this.resolveRectCircle(i,n);if(t.shapeType===s.RuntimeColliderShape.POLYGON)return this.resolveRectPolygon(i,n);if(t.shapeType===s.RuntimeColliderShape.POINT)return n.x>=i.x&&n.x<=i.x+i.w&&n.y>=i.y&&n.y<=i.y+i.h;if(t.shapeType===s.RuntimeColliderShape.LINE)return this.resolveLineRect(n[0].x,n[1].x,n[0].y,n[1].y,i.x,i.y,i.w,i.h)}else if(e.shapeType===s.RuntimeColliderShape.CIRCLE){if(t.shapeType===s.RuntimeColliderShape.RECT)return this.resolveRectCircle(n,i);if(t.shapeType===s.RuntimeColliderShape.CIRCLE)return Math.sqrt(Math.pow(i.x-n.x,2)+Math.pow(i.y-n.y,2))<i.r+n.r;if(t.shapeType===s.RuntimeColliderShape.POLYGON)return this.resolvePolygonCircle(n,i);if(t.shapeType===s.RuntimeColliderShape.POINT)return Math.sqrt(Math.pow(n.x-i.x,2)+Math.pow(n.y-i.y,2))<=i.r;if(t.shapeType===s.RuntimeColliderShape.LINE)return this.resolveLineCircle(n[0].x,n[1].x,n[0].y,n[1].y,i.x,i.y,i.r)}else if(e.shapeType===s.RuntimeColliderShape.POLYGON){if(t.shapeType===s.RuntimeColliderShape.RECT)return this.resolveRectPolygon(n,i);if(t.shapeType===s.RuntimeColliderShape.CIRCLE)return this.resolvePolygonCircle(i,n);if(t.shapeType===s.RuntimeColliderShape.POLYGON)return this.resolvePolygonPolygon(i,n);if(t.shapeType===s.RuntimeColliderShape.POINT)return this.resolvePolygonPoint(i,n);if(t.shapeType===s.RuntimeColliderShape.LINE)return this.resolveLinePoly(n[0].x,n[0].y,n[1].x,n[1].y,i)}else if(e.shapeType===s.RuntimeColliderShape.POINT){if(t.shapeType===s.RuntimeColliderShape.RECT)return i.x>=n.x&&i.x<=n.x+n.w&&i.y>=n.y&&i.y<=n.y+n.h;if(t.shapeType===s.RuntimeColliderShape.CIRCLE)return Math.sqrt(Math.pow(i.x-n.x,2)+Math.pow(i.y-n.y,2))<=n.r;if(t.shapeType===s.RuntimeColliderShape.POLYGON)return this.resolvePolygonPoint(n,i);if(t.shapeType===s.RuntimeColliderShape.POINT)return i.x===n.x&&i.y===n.y;if(t.shapeType===s.RuntimeColliderShape.LINE)return this.resolvePointLine(i.x,i.y,n[0].x,n[0].y,n[1].x,n[1])}else if(e.shapeType===s.RuntimeColliderShape.LINE){if(t.shapeType===s.RuntimeColliderShape.RECT)return this.resolveLineRect(i[0].x,i[1].x,i[0].y,i[1].y,n.x,n.y,n.w,n.h);if(t.shapeType===s.RuntimeColliderShape.CIRCLE)return this.resolveLineCircle(i[0].x,i[1].x,i[0].y,i[1].y,n.x,n.y,n.r);if(t.shapeType===s.RuntimeColliderShape.POLYGON)return this.resolveLinePoly(i[0].x,i[0].y,i[1].x,i[1].y,n);if(t.shapeType===s.RuntimeColliderShape.POINT)return this.resolvePointLine(n.x,n.y,i[0].x,i[0].y,i[1].x,i[1]);if(t.shapeType===s.RuntimeColliderShape.LINE)return this.resolveLineLine(i[0].x,i[0].y,i[1].x,i[1].y,n[0].x,n[0].y,n[1].x,n[1].y)}return!1}getEllipseFromScaledCircle(e,t,i,s,n){}getPolygonFromRotatedRect(e,t,i){return[]}resolveLineLineIntersectOnly(e,t,i,s,n,r,a,o){const h=((a-n)*(t-r)-(o-r)*(e-n))/((o-r)*(i-e)-(a-n)*(s-t)),l=((i-e)*(t-r)-(s-t)*(e-n))/((o-r)*(i-e)-(a-n)*(s-t));return h>=0&&h<=1&&l>=0&&l<=1}resolveLineLine(e,t,i,s,n,r,a,o,h=!1){const l=(o-r)*(i-e)-(a-n)*(s-t);if(0!=l){const h=((a-n)*(t-r)-(o-r)*(e-n))/l,d=((i-e)*(t-r)-(s-t)*(e-n))/l;return 0<=h&&h<=1&&0<=d&&d<=1}return!(Math.max(e,i)<Math.min(n,a))&&(!(Math.max(n,a)<Math.min(e,i))&&(!(Math.max(t,s)<Math.min(r,o))&&(!(Math.max(r,o)<Math.min(t,s))&&(this.resolvePointLine(e,t,n,r,a,o,1)||this.resolvePointLine(i,s,n,r,a,o,1)))))}resolveLineRect(e,t,i,s,n,r,a,o){return!!this.resolveLineLine(e,i,t,s,n,r,n,r+o)||(!!this.resolveLineLine(e,i,t,s,n+a,r,n+a,r+o)||(!!this.resolveLineLine(e,i,t,s,n,r,n+a,r)||(!!this.resolveLineLine(e,i,t,s,n,r+o,n+a,r+o)||void 0)))}resolvePointPoly(e,t,i){let s=!1,n=0;for(let r=0;r<i.length;r++){n=r+1,n===i.length&&(n=0);let a=i[r],o=i[n];(a.y>=t&&o.y<t||a.y<t&&o.y>=t)&&e<(o.x-a.x)*(t-a.y)/(o.y-a.y)+a.x&&(s=!s)}return s}resolveRectPolygon(e,t){for(let i=0;i<t.length;i++)if(this.resolvePointPoly(e.x,e.y,t))return!0}resolveRectCircle(e,t){const{x:i,y:s,w:n,h:r}=e,a=t.x,o=t.y;let h=a,l=o;return a<i?h=i:a>i+n&&(h=i+n),o<s?l=s:o>s+r&&(l=s+r),Math.sqrt(Math.pow(a-h,2)+Math.pow(o-l,2))<=t.r}resolveLineCircle(e,t,i,s,n,r,a){if(Math.sqrt(Math.pow(e-n,2)+Math.pow(i-r,2))<a)return!0;if(Math.sqrt(Math.pow(t-n,2)+Math.pow(s-r,2))<a)return!0;let o=e-t,h=i-s;const l=Math.sqrt(o*o+h*h),d=((n-e)*(t-e)+(r-i)*(s-i))/Math.pow(l,2),u=e+d*(t-e),c=i+d*(s-i);return!!this.resolvePointLine(u,c,e,i,t,s)&&(o=u-n,h=c-r,Math.sqrt(o*o+h*h)<=a)}resolvePolygonCircle(e,t){return this.resolvePolygonPoint(e,t)}resolvePolygonPoint(e,t){let i=!1,s=0;for(let n=0;n<e.length;n++){s=n+1,s===e.length&&(s=0);let r=e[n],a=e[s];(r.y>=t.y&&a.y<t.y||r.y<t.y&&a.y>=t.y)&&t.x<(a.x-r.x)*(t.y-r.y)/(a.y-r.y)+r.x&&(i=!i)}return i}resolveLinePoly(e,t,i,s,n){let r=0;for(let a=0;a<n.length;a++){r=a+1,r===n.length&&(r=0);const o=n[a].x,h=n[a].y,l=n[r].x,d=n[r].y;if(this.resolveLineLine(e,t,i,s,o,h,l,d))return!0}return!1}resolveCircleEllipse(e,t){}resolvePolygonPolygon(e,t){for(let i=0;i<e.length;i++){if(this.resolvePolygonPoint(e,t[0]))return!0;if(this.resolvePolygonPoint(t,e[0]))return!0}return!1}getBucketsForPolygon(e,t=[]){for(let t=0;t<e.length;t++);for(let i=0;i<e.length;i++){const s=e[i],n=i===e.length-1?e[0]:e[i+1],r=[];this.getBucketsForLine([s,n],r),this.getBucketsForLine([s,n],t)}return t}getBucketsForCircle(e,t=[]){const i=2*e.r;return this.getBucketsForRect({x:e.x-e.r,y:e.y-e.r,w:i,h:i},t)}getBucketsForRect(e,t=[]){const i=this.cellSize;let s=e.x,n=e.y;if(e.w>=i||e.h>=i){const r=Math.floor(s/i),a=Math.floor(n/i),o=Math.ceil((s+e.w)/i),h=Math.ceil((n+e.h)/i);for(let e=r;e<o;e++)for(let i=a;i<h;i++){const s=e,n=i*this.cols+s;t.includes(n)||t.push(n)}}else{let r=s+e.w,a=n+e.h;if(!(s/i>=this.cols||n/i>=this.rows||s<0||s<0)){let e=Math.floor(s/i)+Math.floor(n/i)*this.cols;t.includes(e)||t.push(e)}if(!(s/i>=this.cols||a/i>=this.rows||s<0||a<0)){let e=Math.floor(s/i)+Math.floor(a/i)*this.cols;t.includes(e)||t.push(e)}if(!(r/i>=this.cols||n/i>=this.rows||r<0||n<0)){let e=Math.floor(r/i)+Math.floor(n/i)*this.cols;t.includes(e)||t.push(e)}if(!(r/i>=this.cols||a/i>=this.rows||r<0||a<0)){let e=Math.floor(r/i)+Math.floor(a/i)*this.cols;t.includes(e)||t.push(e)}}return t}getBucketsForSmallRect(e,t,i,s,n=[]){const r=this.cellSize;if(!(e/r>=this.cols||t/r>=this.rows||e<0||e<0)){let i=Math.floor(e/r)+Math.floor(t/r)*this.cols;n.includes(i)||n.push(i)}if(!(e/r>=this.cols||s/r>=this.rows||e<0||s<0)){let t=Math.floor(e/r)+Math.floor(s/r)*this.cols;n.includes(t)||n.push(t)}if(!(i/r>=this.cols||t/r>=this.rows||i<0||t<0)){let e=Math.floor(i/r)+Math.floor(t/r)*this.cols;n.includes(e)||n.push(e)}if(!(i/r>=this.cols||s/r>=this.rows||i<0||s<0)){let e=Math.floor(i/r)+Math.floor(s/r)*this.cols;n.includes(e)||n.push(e)}}getBucketsForPoint(e,t=[]){const{x:i,y:s}=e;if(!(i/this.cellSize>=this.cols||s/this.cellSize>=this.rows||i<0||s<0)){let e=Math.floor(i/this.cellSize)+Math.floor(s/this.cellSize)*this.cols;t.includes(e)||t.push(e)}return t}getBucketsForLine(e,t=[]){const i=e[0],s=e[1];if(i.x===s.x||i.y===s.y)return this.getBucketsForRect({x:Math.min(i.x,s.x),y:Math.min(i.y,s.y),w:Math.max(1,Math.abs(i.x-s.x)),h:Math.max(1,Math.abs(i.y-s.y))},t);s.y,i.y,s.x,s.x;const n=s.y-i.y/s.x-i.x,r=i.y-i.x*n;let a=0;const o=i.x>s.x?-1:1,h=i.y>s.y?-1:1;let l=i.x,d=i.y;let u=0;const c=[l,d,s.x,s.y];let p=!1;const g=(i.x+o)*n+r;Math.abs(g-i.y)<=1?(u=Math.abs(i.x-s.x),p=!0):u=Math.abs(i.y-s.y);let f=!0;for(;f;)p?(l+=o,a+=o,d=l*n+r):(d+=h,a+=h,l=(d-r)/n),l>=0&&d>=0&&(c.push(l),c.push(d)),Math.abs(a)>=u&&(f=!1);for(let e=0;e<c.length;e+=2){const i=Math.floor(c[e]/this.cellSize)+Math.floor(c[e+1]/this.cellSize)*this.cols;t.includes(i)||t.push(i)}return t}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getCollidersWithTags=function(e,t){const i=[];if(1===e.length){const i=t[e[0]];return i||[]}let s;for(let i=0;i<e.length;i++){const n=e[i];t[n]&&(!s||t[n].length<s.length)&&(s=t[n])}return s?(s.forEach(t=>{let s=!0;for(let i=0;i<e.length;i++){const n=e[i];if(!t.tags.includes(n)){s=!1;break}}s&&i.push(t)}),i):[]}},function(e,t,i){"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.NONE=0]="NONE",e[e.CHILD=1]="CHILD",e[e.FULL=2]="FULL"}(s=t.LayoutSetting||(t.LayoutSetting={})),t.ResolutionModes={};class n{constructor(e,t){var i;this._ratioCap=!1,this._viewCap=!1,this._sizeCap=!1,this._widthSizeCap=-1,this._heightSizeCap=-1,this.resolution=1,this.dynamicResolution=!1,this.calculate=this.calculate.bind(this),this.calculateWithTimeout=this.calculateWithTimeout.bind(this),this.camera=e,t=t||{},this._layoutMode=(null===(i=t)||void 0===i?void 0:i.layout)||s.FULL,window.addEventListener("resize",this.calculateWithTimeout,{passive:!0}),t.maxView&&(this._widthViewCap=t.maxView.w,this._heightViewCap=t.maxView.h,this._viewCap=!0),t.aspectRatio&&(this._widthRatioCap=t.aspectRatio.w,this._heightSizeCap=t.aspectRatio.h,this._ratioCap=!0),t.maxSize&&(this._widthSizeCap=t.maxSize.w,this._heightSizeCap=t.maxSize.h,this._sizeCap=!0);this.dynamicResolution=!!t.dynamicResolution&&t.dynamicResolution}setResolution(e){this.dynamicResolution&&(this.dynamicResolution=!1),this.resolution=e}unlimitResolution(e){this.dynamicResolution=!1}limitResolution(){this.dynamicResolution=!0}setMapLengths(e,t){this.mapWidth=e,this.mapHeight=t,this.calculate()}destroy(){window.removeEventListener("resize",this.calculateWithTimeout)}calculate(){var e,t,i,r,a,o,h,l;let d,u;this._layoutMode===s.FULL?(u=(null===(e=window)||void 0===e?void 0:e.innerWidth)||(null===(i=null===(t=document)||void 0===t?void 0:t.body)||void 0===i?void 0:i.clientWidth),d=(null===(r=window)||void 0===r?void 0:r.innerHeight)||(null===(o=null===(a=document)||void 0===a?void 0:a.body)||void 0===o?void 0:o.clientHeight)):this._layoutMode===s.CHILD?(u=(null===(h=this.camera.renderer.view.parentElement)||void 0===h?void 0:h.clientWidth)||this.camera.renderer.view.clientWidth,d=(null===(l=this.camera.renderer.view.parentElement)||void 0===l?void 0:l.clientHeight)||this.camera.renderer.view.clientHeight):(u=this.camera.renderer.view.width,d=this.camera.renderer.view.height);let c,p,g=0,f=0;if(this._sizeCap&&(this._widthSizeCap<u&&(g=u-this._widthSizeCap/2,u=this._widthSizeCap),this._heightSizeCap<d&&(f=d-this._heightSizeCap/2,d=this._heightSizeCap)),this._viewCap){if(c=this._widthViewCap,p=this._heightViewCap,this._ratioCap){const e=c/this._widthRatioCap,t=p/this._heightRatioHCap;e<t?p*=this._widthRatioCap/this._heightRatioHCap:t>e&&(c*=this._widthRatioCap/this._heightRatioHCap)}}else if(this._ratioCap){const e=u/this._widthRatioCap,t=d/this._heightRatioHCap;e<t?(c=u,p=d*(this._widthRatioCap/this._heightRatioHCap)):t>e&&(p=d,c=u*(this._widthRatioCap/this._heightRatioHCap))}else c=u,p=d;const m=n.calculateDynamicResolution(u,d,this.mapWidth,this.mapHeight,c,p);this.dynamicResolution?this.resolution=m.resolution:(m.resolution=this.resolution,m.fixedResolution=!0),g&&(m.offsetWidth+=g),f&&(m.offsetHeight+=f),this.camera.onResolutionUpdate(m)}calculateWithTimeout(){this.calculateTimeout&&clearTimeout(this.calculateTimeout),this.calculateTimeout=setTimeout(this.calculate,50)}static calculateDynamicResolution(e,t,i,s,n,r){const a=e/n,o=t/r;let h,l,d=o,u=0,c=0,p=!1,g=!1;a<o?(d=a,h=e>n?n:e,t>r?(c=(t-r)/2,c%1&&(p=!0,c=Math.floor(c)),l=r):l=t-2*c,d<1&&(c+=c*d,l*=d)):o<a?(d=o,l=t>r?r:t,e>n?(u=Math.floor(e-n)/2,u%1&&(g=!0,u=Math.floor(u)),h=n):l=e,d<1&&(u+=u*d,h*=d)):(l=Math.min(r,t),h=Math.min(n,e));const f=h+2*u,m=h+2*u;if(f>i){u+=(g?Math.ceil:Math.floor)((f-i)/2)}if(m>s){c+=(p?Math.ceil:Math.floor)((m-s)/2)}return{resolution:d,viewHeight:l,viewWidth:h,offsetWidth:u,offsetHeight:c,canvasWidth:e,canvasHeight:t}}}t.ResolutionManager=n},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function a(e){try{h(s.next(e))}catch(e){r(e)}}function o(e){try{h(s.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(9),r=i(1);t.InterfaceManager=class{constructor(e,t,i){this.needsReRender=!1,this.indexedDbLoader=i,this.interfaceAtlas=n.AtlasFactory(t,i),this.renderer=t,this.interfaceStage=e}clearInterface(){this.interfaceStage.removeChildren(0)}loadTexture(e,t){return s(this,void 0,void 0,(function*(){let i;if(t=t||e,this.indexedDbLoader)try{if(i=yield this.indexedDbLoader.loadImageData(e),!i)throw new Error("couldnt get image from indexeddb.")}catch(t){i=yield r.httpGetAsync(e,!1)}else i=yield r.httpGetAsync(e,!1);if(!i)throw new Error(`Failed to load interface image from path ${e}`);const s=yield r.getTextureFromDataUrl(i);return this.interfaceAtlas.addTexture(t,s,null,!0)}))}addTextureToInterfaceAtlas(e,t,i=!0){return this.interfaceAtlas.addTexture(e,t,null,i)}getTexture(e){return this.interfaceAtlas.getTexture(e)}addInterfaceItem(e){this.interfaceStage.addChild(e)}removeInterfaceItem(e){this.interfaceStage.removeChild(e)}addChild(e){this.interfaceStage.addChild(e)}removeChild(e){this.interfaceStage.removeChild(e)}}}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,